import {
  init_hdrFilteringFunctions,
  init_importanceSampling
} from "./chunk-J4HKBMVH.js";
import {
  init_pbrBRDFFunctions
} from "./chunk-OKC3TBB4.js";
import {
  init_helperFunctions
} from "./chunk-JUBEOR2P.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/Shaders/hdrFiltering.fragment.js
var name, shader, hdrFilteringPixelShader;
var init_hdrFiltering_fragment = __esm({
  "node_modules/@babylonjs/core/Shaders/hdrFiltering.fragment.js"() {
    init_shaderStore();
    init_helperFunctions();
    init_importanceSampling();
    init_pbrBRDFFunctions();
    init_hdrFilteringFunctions();
    name = "hdrFilteringPixelShader";
    shader = `#include<helperFunctions>
#include<importanceSampling>
#include<pbrBRDFFunctions>
#include<hdrFilteringFunctions>
uniform float alphaG;uniform samplerCube inputTexture;uniform vec2 vFilteringInfo;uniform float hdrScale;varying vec3 direction;void main() {vec3 color=radiance(alphaG,inputTexture,direction,vFilteringInfo);gl_FragColor=vec4(color*hdrScale,1.0);}`;
    if (!ShaderStore.ShadersStore[name]) {
      ShaderStore.ShadersStore[name] = shader;
    }
    hdrFilteringPixelShader = { name, shader };
  }
});

export {
  hdrFilteringPixelShader,
  init_hdrFiltering_fragment
};
//# sourceMappingURL=chunk-2ZGUZXJZ.js.map
