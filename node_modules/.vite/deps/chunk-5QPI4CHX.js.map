{
  "version": 3,
  "sources": ["../../../dev/core/src/AudioV2/abstractAudio/subProperties/abstractSpatialAudio.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/abstractStereoAudio.ts", "../../../dev/core/src/AudioV2/abstractAudio/subNodes/stereoAudioSubNode.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/stereoAudio.ts", "../../../dev/core/src/AudioV2/abstractAudio/components/spatialAudioAttacherComponent.ts", "../../../dev/core/src/AudioV2/abstractAudio/subNodes/spatialAudioSubNode.ts", "../../../dev/core/src/AudioV2/webAudio/subNodes/spatialWebAudioSubNode.ts", "../../../dev/core/src/AudioV2/webAudio/subNodes/stereoWebAudioSubNode.ts", "../../../dev/core/src/AudioV2/webAudio/subNodes/webAudioBusAndSoundSubGraph.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/spatialAudio.ts", "../../../dev/core/src/AudioV2/webAudio/components/spatialWebAudioUpdaterComponent.ts", "../../../dev/core/src/AudioV2/webAudio/subProperties/spatialWebAudio.ts"],
  "sourcesContent": ["import { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport type { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\n\nexport const _SpatialAudioDefaults = {\n    coneInnerAngle: 6.28318530718 as number,\n    coneOuterAngle: 6.28318530718 as number,\n    coneOuterVolume: 0 as number,\n    distanceModel: \"linear\" as DistanceModelType,\n    maxDistance: 10000 as number,\n    minDistance: 1 as number,\n    panningModel: \"equalpower\" as PanningModelType,\n    position: Vector3.Zero(),\n    rolloffFactor: 1 as number,\n    rotation: Vector3.Zero(),\n    rotationQuaternion: new Quaternion(),\n} as const;\n\n/**\n * Options for spatial audio.\n */\nexport interface ISpatialAudioOptions {\n    /**\n     * Whether to automatically update the spatial properties of the audio node. Defaults to `true`.\n     */\n    spatialAutoUpdate: boolean;\n    /**\n     * The spatial cone inner angle, in radians. Defaults to 2π.\n     * - When the listener is inside the cone inner angle, the volume is at its maximum.\n     */\n    spatialConeInnerAngle: number;\n    /**\n     * The spatial cone outer angle, in radians. Defaults to 2π.\n     * - When the listener is between the the cone inner and outer angles, the volume fades to its minimum as the listener approaches the outer angle.\n     * - When the listener is outside the cone outer angle, the volume is at its minimum.\n     */\n    spatialConeOuterAngle: number;\n    /**\n     * The amount of volume reduction outside the {@link spatialConeOuterAngle}. Defaults to 0.\n     */\n    spatialConeOuterVolume: number;\n    /**\n     * The algorithm to use to reduce the volume of the audio source as it moves away from the listener. Defaults to \"inverse\".\n     *\n     * Possible values are:\n     * - `\"linear\"`: The volume is reduced linearly as the source moves away from the listener.\n     * - `\"inverse\"`: The volume is reduced inversely as the source moves away from the listener.\n     * - `\"exponential\"`: The volume is reduced exponentially as the source moves away from the listener.\n     *\n     * @see {@link spatialMaxDistance}\n     * @see {@link spatialMinDistance}\n     * @see {@link spatialRolloffFactor}\n     */\n    spatialDistanceModel: \"linear\" | \"inverse\" | \"exponential\";\n    /**\n     * Enable spatial audio. Defaults to false.\n     *\n     * When set to `true`, the audio node's spatial properties will be initialized on creation and there will be no\n     * delay when setting the first spatial value.\n     *\n     * When not specified, or set to `false`, the audio node's spatial properties will not be initialized on creation\n     * and there will be a small delay when setting the first spatial value.\n     *\n     * - This option is ignored if any other spatial options are set.\n     */\n    spatialEnabled: boolean;\n    /**\n     * The maximum distance between the audio source and the listener, after which the volume is not reduced any further. Defaults to 10000.\n     * - This value is used only when the {@link spatialDistanceModel} is set to `\"linear\"`.\n     * @see {@link spatialDistanceModel}\n     */\n    spatialMaxDistance: number;\n    /**\n     * The minimum update time in seconds of the spatialization if it is attached to a mesh or transform node. Defaults to `0`.\n     * - The spatialization's position and rotation will not update faster than this time, but they may update slower depending on the frame rate.\n     */\n    spatialMinUpdateTime: number;\n    /**\n     * Possible values are:\n     * - `\"equalpower\"`: Represents the equal-power panning algorithm, generally regarded as simple and efficient.\n     * - `\"HRTF\"`: Renders a stereo output of higher quality than `\"equalpower\"` — it uses a convolution with measured impulse responses from human subjects.\n     */\n    spatialPanningModel: \"equalpower\" | \"HRTF\";\n    /**\n     * The spatial position. Defaults to (0, 0, 0).\n     */\n    spatialPosition: Vector3;\n    /**\n     * The distance for reducing volume as the audio source moves away from the listener – i.e. the distance the volume reduction starts at. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link spatialDistanceModel}\n     */\n    spatialMinDistance: number;\n    /**\n     * How quickly the volume is reduced as the source moves away from the listener. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link spatialDistanceModel}\n     */\n    spatialRolloffFactor: number;\n    /**\n     * The spatial rotation, as Euler angles. Defaults to (0, 0, 0).\n     */\n    spatialRotation: Vector3;\n    /**\n     * The spatial rotation, as a quaternion. Defaults to (0, 0, 0, 1).\n     */\n    spatialRotationQuaternion: Quaternion;\n}\n\n/**\n * @param options The spatial audio options to check.\n * @returns `true` if spatial audio options are defined, otherwise `false`.\n */\nexport function _HasSpatialAudioOptions(options: Partial<ISpatialAudioOptions>): boolean {\n    return (\n        options.spatialEnabled ||\n        options.spatialAutoUpdate !== undefined ||\n        options.spatialConeInnerAngle !== undefined ||\n        options.spatialConeOuterAngle !== undefined ||\n        options.spatialConeOuterVolume !== undefined ||\n        options.spatialDistanceModel !== undefined ||\n        options.spatialMaxDistance !== undefined ||\n        options.spatialMinDistance !== undefined ||\n        options.spatialMinUpdateTime !== undefined ||\n        options.spatialPanningModel !== undefined ||\n        options.spatialPosition !== undefined ||\n        options.spatialRolloffFactor !== undefined ||\n        options.spatialRotation !== undefined ||\n        options.spatialRotationQuaternion !== undefined\n    );\n}\n\n/**\n * Abstract class representing the `spatial` audio property on a sound or audio bus.\n *\n * @see {@link AudioEngineV2.listener}\n */\nexport abstract class AbstractSpatialAudio {\n    /**\n     * The spatial cone inner angle, in radians. Defaults to 2π.\n     * - When the listener is inside the cone inner angle, the volume is at its maximum.\n     */\n    public abstract coneInnerAngle: number;\n\n    /**\n     * The spatial cone outer angle, in radians. Defaults to 2π.\n     * - When the listener is between the the cone inner and outer angles, the volume fades to its minimum as the listener approaches the outer angle.\n     * - When the listener is outside the cone outer angle, the volume is at its minimum.\n     */\n    public abstract coneOuterAngle: number;\n\n    /**\n     * The amount of volume reduction outside the {@link coneOuterAngle}. Defaults to 0.\n     */\n    public abstract coneOuterVolume: number;\n\n    /**\n     * The algorithm to use to reduce the volume of the audio source as it moves away from the listener. Defaults to \"inverse\".\n     *\n     * Possible values are:\n     * - `\"linear\"`: The volume is reduced linearly as the source moves away from the listener.\n     * - `\"inverse\"`: The volume is reduced inversely as the source moves away from the listener.\n     * - `\"exponential\"`: The volume is reduced exponentially as the source moves away from the listener.\n     *\n     * @see {@link spatialMaxDistance}\n     * @see {@link spatialMinDistance}\n     * @see {@link spatialRolloffFactor}\n     */\n    public abstract distanceModel: \"linear\" | \"inverse\" | \"exponential\";\n\n    /**\n     * Whether the audio source is attached to a mesh or transform node.\n     */\n    public abstract isAttached: boolean;\n\n    /**\n     * The maximum distance between the audio source and the listener, after which the volume is not reduced any further. Defaults to 10000.\n     * - This value is used only when the {@link distanceModel} is set to `\"linear\"`.\n     * @see {@link distanceModel}\n     */\n    public abstract maxDistance: number;\n\n    /**\n     * The distance for reducing volume as the audio source moves away from the listener – i.e. the distance the volume reduction starts at. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link distanceModel}\n     */\n    public abstract minDistance: number;\n\n    /**\n     * The minimum update time in seconds of the spatialization if it is attached to a mesh or transform node. Defaults to `0`.\n     * - The spatialization's position and rotation will not update faster than this time, but they may update slower depending on the frame rate.\n     */\n    public abstract minUpdateTime: number;\n\n    /**\n     * The spatial panning model. Defaults to \"equalpower\".\n     *\n     * Possible values are:\n     * - `\"equalpower\"`: Represents the equal-power panning algorithm, generally regarded as simple and efficient.\n     * - `\"HRTF\"`:Renders a stereo output of higher quality than `\"equalpower\"` — it uses a convolution with measured impulse responses from human subjects.\n     */\n    public abstract panningModel: \"equalpower\" | \"HRTF\";\n\n    /**\n     * The spatial position. Defaults to (0, 0, 0).\n     */\n    public abstract position: Vector3;\n\n    /**\n     * How quickly the volume is reduced as the source moves away from the listener. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link distanceModel}\n     */\n    public abstract rolloffFactor: number;\n\n    /**\n     * The spatial rotation. Defaults to (0, 0, 0).\n     */\n    public abstract rotation: Vector3;\n\n    /**\n     * The spatial rotation quaternion. Defaults to (0, 0, 0, 1).\n     */\n    public abstract rotationQuaternion: Quaternion;\n\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the bounding box of the node for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    public abstract attach(sceneNode: Nullable<Node>, useBoundingBox?: boolean, attachmentType?: SpatialAudioAttachmentType): void;\n\n    /**\n     * Detaches from the scene node if attached.\n     */\n    public abstract detach(): void;\n\n    /**\n     * Updates the position and rotation of the associated audio engine object in the audio rendering graph.\n     *\n     * This is called automatically by default and only needs to be called manually if automatic updates are disabled.\n     */\n    public abstract update(): void;\n}\n", "export const _StereoAudioDefaults = {\n    pan: 0 as number,\n} as const;\n\n/** */\nexport interface IStereoAudioOptions {\n    /**\n     * Enable stereo. Defaults to false.\n     *\n     * When set to `true`, the audio node's stereo properties will be initialized on creation and there will be no\n     * delay when setting the first stereo value.\n     *\n     * When not specified, or set to `false`, the audio node's stereo properties will not be initialized on creation\n     * and there will be a small delay when setting the first stereo value.\n     *\n     * - This option is ignored if any other stereo options are set.\n     */\n    stereoEnabled: boolean;\n    /**\n     * The stereo pan from -1 (left) to 1 (right). Defaults to 0.\n     */\n    stereoPan: number;\n}\n\n/**\n * @param options The stereo audio options to check.\n * @returns `true` if stereo audio options are defined, otherwise `false`.\n */\nexport function _HasStereoAudioOptions(options: Partial<IStereoAudioOptions>): boolean {\n    return options.stereoEnabled || options.stereoPan !== undefined;\n}\n\n/**\n * Abstract class representing the `stereo` audio property on a sound or audio bus.\n *\n * @see {@link AudioEngineV2.listener}\n */\nexport abstract class AbstractStereoAudio {\n    /**\n     * The stereo pan from -1 (left) to 1 (right). Defaults to 0.\n     */\n    public abstract pan: number;\n}\n", "import type { Nullable } from \"../../../types\";\nimport type { AudioEngineV2 } from \"../../abstractAudio/audioEngineV2\";\nimport { _AbstractAudioSubNode } from \"../../abstractAudio/subNodes/abstractAudioSubNode\";\nimport { AudioSubNode } from \"../../abstractAudio/subNodes/audioSubNode\";\nimport type { IStereoAudioOptions } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport { _StereoAudioDefaults } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport type { _AbstractAudioSubGraph } from \"./abstractAudioSubGraph\";\n\n/** @internal */\nexport abstract class _StereoAudioSubNode extends _AbstractAudioSubNode {\n    protected constructor(engine: AudioEngineV2) {\n        super(AudioSubNode.STEREO, engine);\n    }\n\n    public abstract pan: number;\n\n    /** @internal */\n    public setOptions(options: Partial<IStereoAudioOptions>): void {\n        this.pan = options.stereoPan ?? _StereoAudioDefaults.pan;\n    }\n}\n\n/** @internal */\nexport function _GetStereoAudioSubNode(subGraph: _AbstractAudioSubGraph): Nullable<_StereoAudioSubNode> {\n    return subGraph.getSubNode<_StereoAudioSubNode>(AudioSubNode.STEREO);\n}\n\n/** @internal */\nexport function _SetStereoAudioProperty<K extends keyof typeof _StereoAudioDefaults>(subGraph: _AbstractAudioSubGraph, property: K, value: _StereoAudioSubNode[K]): void {\n    subGraph.callOnSubNode<_StereoAudioSubNode>(AudioSubNode.STEREO, (node) => {\n        node[property] = value;\n    });\n}\n", "import { _StereoAudioDefaults, AbstractStereoAudio } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport type { _AbstractAudioSubGraph } from \"../subNodes/abstractAudioSubGraph\";\nimport { _SetStereoAudioProperty } from \"../subNodes/stereoAudioSubNode\";\n\n/** @internal */\nexport class _StereoAudio extends AbstractStereoAudio {\n    private _pan: number = _StereoAudioDefaults.pan;\n    private _subGraph: _AbstractAudioSubGraph;\n\n    /** @internal */\n    public constructor(subGraph: _AbstractAudioSubGraph) {\n        super();\n        this._subGraph = subGraph;\n    }\n\n    /** @internal */\n    public get pan(): number {\n        return this._pan;\n    }\n\n    public set pan(value: number) {\n        this._pan = value;\n        _SetStereoAudioProperty(this._subGraph, \"pan\", value);\n    }\n}\n", "import { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { AbstractMesh } from \"../../../Meshes/abstractMesh\";\nimport type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\nimport type { _SpatialAudioSubNode } from \"../subNodes/spatialAudioSubNode\";\nimport type { _SpatialAudioListener } from \"../subProperties/spatialAudioListener\";\n\n/**\n * Provides a common interface for attaching an audio listener or source to a specific entity, ensuring only one entity\n * is attached at a time.\n * @internal\n */\nexport class _SpatialAudioAttacherComponent {\n    /** @internal */\n    private _attachmentType: SpatialAudioAttachmentType = SpatialAudioAttachmentType.PositionAndRotation;\n    private readonly _position = new Vector3();\n    private readonly _rotationQuaternion = new Quaternion();\n    private _sceneNode: Nullable<Node> = null;\n    private readonly _spatialAudioNode: _SpatialAudioSubNode | _SpatialAudioListener;\n    private _useBoundingBox: boolean = false;\n\n    /** @internal */\n    public constructor(spatialAudioNode: _SpatialAudioSubNode | _SpatialAudioListener) {\n        this._spatialAudioNode = spatialAudioNode;\n    }\n\n    /**\n     * Returns `true` if attached to a scene node; otherwise returns `false`.\n     */\n    public get isAttached(): boolean {\n        return this._sceneNode !== null;\n    }\n\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the scene node's bounding box for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the scene node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    public attach(sceneNode: Nullable<Node>, useBoundingBox: boolean, attachmentType: SpatialAudioAttachmentType): void {\n        if (this._sceneNode === sceneNode) {\n            return;\n        }\n\n        this.detach();\n\n        if (!sceneNode) {\n            return;\n        }\n\n        this._attachmentType = attachmentType;\n\n        this._sceneNode = sceneNode;\n        this._sceneNode.onDisposeObservable.add(this.dispose);\n\n        this._useBoundingBox = useBoundingBox;\n    }\n\n    /**\n     * Detaches from the scene node if attached.\n     */\n    public detach() {\n        this._sceneNode?.onDisposeObservable.removeCallback(this.dispose);\n        this._sceneNode = null;\n    }\n\n    /**\n     * Releases associated resources.\n     */\n    public dispose = () => {\n        this.detach();\n    };\n\n    /**\n     * Updates the position and rotation of the associated audio engine object in the audio rendering graph.\n     *\n     * This is called automatically by default and only needs to be called manually if automatic updates are disabled.\n     */\n    public update() {\n        if (this._attachmentType & SpatialAudioAttachmentType.Position) {\n            if (this._useBoundingBox && (this._sceneNode as AbstractMesh).getBoundingInfo) {\n                this._position.copyFrom((this._sceneNode as AbstractMesh).getBoundingInfo().boundingBox.centerWorld);\n            } else {\n                this._sceneNode?.getWorldMatrix().getTranslationToRef(this._position);\n            }\n\n            this._spatialAudioNode.position.copyFrom(this._position);\n            this._spatialAudioNode._updatePosition();\n        }\n\n        if (this._attachmentType & SpatialAudioAttachmentType.Rotation) {\n            this._sceneNode?.getWorldMatrix().decompose(undefined, this._rotationQuaternion);\n\n            this._spatialAudioNode.rotationQuaternion.copyFrom(this._rotationQuaternion);\n            this._spatialAudioNode._updateRotation();\n        }\n    }\n}\n", "import type { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport type { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\nimport type { AudioEngineV2 } from \"../audioEngineV2\";\nimport { _SpatialAudioAttacherComponent } from \"../components/spatialAudioAttacherComponent\";\nimport type { ISpatialAudioOptions } from \"../subProperties/abstractSpatialAudio\";\nimport { _SpatialAudioDefaults } from \"../subProperties/abstractSpatialAudio\";\nimport type { _AbstractAudioSubGraph } from \"./abstractAudioSubGraph\";\nimport { _AbstractAudioSubNode } from \"./abstractAudioSubNode\";\nimport { AudioSubNode } from \"./audioSubNode\";\n\n/** @internal */\nexport abstract class _SpatialAudioSubNode extends _AbstractAudioSubNode {\n    private _attacherComponent: Nullable<_SpatialAudioAttacherComponent> = null;\n\n    protected constructor(engine: AudioEngineV2) {\n        super(AudioSubNode.SPATIAL, engine);\n    }\n\n    public abstract coneInnerAngle: number;\n    public abstract coneOuterAngle: number;\n    public abstract coneOuterVolume: number;\n    public abstract distanceModel: DistanceModelType;\n    public abstract maxDistance: number;\n    public abstract minDistance: number;\n    public abstract panningModel: PanningModelType;\n    public abstract position: Vector3;\n    public abstract rolloffFactor: number;\n    public abstract rotation: Vector3;\n    public abstract rotationQuaternion: Quaternion;\n    public abstract _inNode: AudioNode;\n\n    /** @internal */\n    public get isAttached(): boolean {\n        return this._attacherComponent !== null && this._attacherComponent.isAttached;\n    }\n\n    /** @internal */\n    public attach(sceneNode: Nullable<Node>, useBoundingBox: boolean, attachmentType: SpatialAudioAttachmentType): void {\n        this.detach();\n\n        if (!this._attacherComponent) {\n            this._attacherComponent = new _SpatialAudioAttacherComponent(this);\n        }\n\n        this._attacherComponent.attach(sceneNode, useBoundingBox, attachmentType);\n    }\n\n    /** @internal */\n    public detach(): void {\n        this._attacherComponent?.detach();\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._attacherComponent?.dispose();\n        this._attacherComponent = null;\n    }\n\n    /** @internal */\n    public setOptions(options: Partial<ISpatialAudioOptions>): void {\n        this.coneInnerAngle = options.spatialConeInnerAngle ?? _SpatialAudioDefaults.coneInnerAngle;\n        this.coneOuterAngle = options.spatialConeOuterAngle ?? _SpatialAudioDefaults.coneOuterAngle;\n        this.coneOuterVolume = options.spatialConeOuterVolume ?? _SpatialAudioDefaults.coneOuterVolume;\n        this.distanceModel = options.spatialDistanceModel ?? _SpatialAudioDefaults.distanceModel;\n        this.maxDistance = options.spatialMaxDistance ?? _SpatialAudioDefaults.maxDistance;\n        this.minDistance = options.spatialMinDistance ?? _SpatialAudioDefaults.minDistance;\n        this.panningModel = options.spatialPanningModel ?? _SpatialAudioDefaults.panningModel;\n        this.rolloffFactor = options.spatialRolloffFactor ?? _SpatialAudioDefaults.rolloffFactor;\n\n        if (options.spatialPosition) {\n            this.position = options.spatialPosition.clone();\n        }\n\n        if (options.spatialRotationQuaternion) {\n            this.rotationQuaternion = options.spatialRotationQuaternion.clone();\n        } else if (options.spatialRotation) {\n            this.rotation = options.spatialRotation.clone();\n        } else {\n            this.rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\n        }\n\n        this.update();\n    }\n\n    /** @internal */\n    public update(): void {\n        if (this.isAttached) {\n            this._attacherComponent?.update();\n        } else {\n            this._updatePosition();\n            this._updateRotation();\n        }\n    }\n\n    public abstract _updatePosition(): void;\n    public abstract _updateRotation(): void;\n}\n\n/** @internal */\nexport function _GetSpatialAudioSubNode(subGraph: _AbstractAudioSubGraph): Nullable<_SpatialAudioSubNode> {\n    return subGraph.getSubNode<_SpatialAudioSubNode>(AudioSubNode.SPATIAL);\n}\n\n/** @internal */\nexport function _SetSpatialAudioProperty<K extends keyof typeof _SpatialAudioDefaults>(subGraph: _AbstractAudioSubGraph, property: K, value: _SpatialAudioSubNode[K]): void {\n    subGraph.callOnSubNode<_SpatialAudioSubNode>(AudioSubNode.SPATIAL, (node) => {\n        node[property] = value;\n    });\n}\n", "import { Matrix, Quaternion, Vector3 } from \"../../../Maths/math.vector\";\r\nimport { _SpatialAudioSubNode } from \"../../abstractAudio/subNodes/spatialAudioSubNode\";\r\nimport { _SpatialAudioDefaults } from \"../../abstractAudio/subProperties/abstractSpatialAudio\";\r\nimport type { _WebAudioEngine } from \"../webAudioEngine\";\r\nimport type { IWebAudioInNode } from \"../webAudioNode\";\r\n\r\nconst TmpMatrix = Matrix.Zero();\r\nconst TmpQuaternion = new Quaternion();\r\nconst TmpVector = Vector3.Zero();\r\n\r\nfunction d2r(degrees: number): number {\r\n    return (degrees * Math.PI) / 180;\r\n}\r\n\r\nfunction r2d(radians: number): number {\r\n    return (radians * 180) / Math.PI;\r\n}\r\n\r\n/** @internal */\r\nexport async function _CreateSpatialAudioSubNodeAsync(engine: _WebAudioEngine): Promise<_SpatialAudioSubNode> {\r\n    return new _SpatialWebAudioSubNode(engine);\r\n}\r\n\r\n/** @internal */\r\nexport class _SpatialWebAudioSubNode extends _SpatialAudioSubNode {\r\n    private _lastPosition: Vector3 = Vector3.Zero();\r\n    private _lastRotation: Vector3 = Vector3.Zero();\r\n    private _lastRotationQuaternion: Quaternion = new Quaternion();\r\n\r\n    /** @internal */\r\n    public override readonly engine: _WebAudioEngine;\r\n\r\n    /** @internal */\r\n    public readonly position = _SpatialAudioDefaults.position.clone();\r\n    /** @internal */\r\n    public readonly rotation: Vector3 = _SpatialAudioDefaults.rotation.clone();\r\n    /** @internal */\r\n    public readonly rotationQuaternion: Quaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\r\n\r\n    /** @internal */\r\n    public readonly node: PannerNode;\r\n\r\n    /** @internal */\r\n    public constructor(engine: _WebAudioEngine) {\r\n        super(engine);\r\n\r\n        this.node = new PannerNode(engine._audioContext);\r\n    }\r\n\r\n    /** @internal */\r\n    public get coneInnerAngle(): number {\r\n        return d2r(this.node.coneInnerAngle);\r\n    }\r\n\r\n    public set coneInnerAngle(value: number) {\r\n        this.node.coneInnerAngle = r2d(value);\r\n    }\r\n\r\n    /** @internal */\r\n    public get coneOuterAngle(): number {\r\n        return d2r(this.node.coneOuterAngle);\r\n    }\r\n\r\n    public set coneOuterAngle(value: number) {\r\n        this.node.coneOuterAngle = r2d(value);\r\n    }\r\n\r\n    /** @internal */\r\n    public get coneOuterVolume(): number {\r\n        return this.node.coneOuterGain;\r\n    }\r\n\r\n    public set coneOuterVolume(value: number) {\r\n        this.node.coneOuterGain = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get distanceModel(): \"linear\" | \"inverse\" | \"exponential\" {\r\n        return this.node.distanceModel;\r\n    }\r\n\r\n    public set distanceModel(value: \"linear\" | \"inverse\" | \"exponential\") {\r\n        this.node.distanceModel = value;\r\n\r\n        // Wiggle the max distance to make the change take effect.\r\n        const maxDistance = this.node.maxDistance;\r\n        this.node.maxDistance = maxDistance + 0.001;\r\n        this.node.maxDistance = maxDistance;\r\n    }\r\n\r\n    /** @internal */\r\n    public get minDistance(): number {\r\n        return this.node.refDistance;\r\n    }\r\n\r\n    public set minDistance(value: number) {\r\n        this.node.refDistance = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get maxDistance(): number {\r\n        return this.node.maxDistance;\r\n    }\r\n\r\n    public set maxDistance(value: number) {\r\n        this.node.maxDistance = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get panningModel(): \"equalpower\" | \"HRTF\" {\r\n        return this.node.panningModel;\r\n    }\r\n\r\n    public set panningModel(value: \"equalpower\" | \"HRTF\") {\r\n        this.node.panningModel = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get rolloffFactor(): number {\r\n        return this.node.rolloffFactor;\r\n    }\r\n\r\n    public set rolloffFactor(value: number) {\r\n        this.node.rolloffFactor = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _inNode(): AudioNode {\r\n        return this.node;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _outNode(): AudioNode {\r\n        return this.node;\r\n    }\r\n\r\n    /** @internal */\r\n    public _updatePosition(): void {\r\n        if (this._lastPosition.equalsWithEpsilon(this.position)) {\r\n            return;\r\n        }\r\n\r\n        this.engine._setAudioParam(this.node.positionX, this.position.x);\r\n        this.engine._setAudioParam(this.node.positionY, this.position.y);\r\n        this.engine._setAudioParam(this.node.positionZ, this.position.z);\r\n\r\n        this._lastPosition.copyFrom(this.position);\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateRotation(): void {\r\n        if (!this._lastRotationQuaternion.equalsWithEpsilon(this.rotationQuaternion)) {\r\n            TmpQuaternion.copyFrom(this.rotationQuaternion);\r\n            this._lastRotationQuaternion.copyFrom(this.rotationQuaternion);\r\n        } else if (!this._lastRotation.equalsWithEpsilon(this.rotation)) {\r\n            Quaternion.FromEulerAnglesToRef(this.rotation.x, this.rotation.y, this.rotation.z, TmpQuaternion);\r\n            this._lastRotation.copyFrom(this.rotation);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        Matrix.FromQuaternionToRef(TmpQuaternion, TmpMatrix);\r\n        Vector3.TransformNormalToRef(Vector3.RightReadOnly, TmpMatrix, TmpVector);\r\n\r\n        this.engine._setAudioParam(this.node.orientationX, TmpVector.x);\r\n        this.engine._setAudioParam(this.node.orientationY, TmpVector.y);\r\n        this.engine._setAudioParam(this.node.orientationZ, TmpVector.z);\r\n    }\r\n\r\n    protected override _connect(node: IWebAudioInNode): boolean {\r\n        const connected = super._connect(node);\r\n\r\n        if (!connected) {\r\n            return false;\r\n        }\r\n\r\n        // If the wrapped node is not available now, it will be connected later by the subgraph.\r\n        if (node._inNode) {\r\n            this.node.connect(node._inNode);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected override _disconnect(node: IWebAudioInNode): boolean {\r\n        const disconnected = super._disconnect(node);\r\n\r\n        if (!disconnected) {\r\n            return false;\r\n        }\r\n\r\n        if (node._inNode) {\r\n            this.node.disconnect(node._inNode);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public getClassName(): string {\r\n        return \"_SpatialWebAudioSubNode\";\r\n    }\r\n}\r\n", "import { _StereoAudioSubNode } from \"../../abstractAudio/subNodes/stereoAudioSubNode\";\nimport type { _WebAudioEngine } from \"../webAudioEngine\";\nimport type { IWebAudioInNode } from \"../webAudioNode\";\n\n/** @internal */\nexport async function _CreateStereoAudioSubNodeAsync(engine: _WebAudioEngine): Promise<_StereoAudioSubNode> {\n    return new _StereoWebAudioSubNode(engine);\n}\n\n/** @internal */\nexport class _StereoWebAudioSubNode extends _StereoAudioSubNode {\n    private _pan: number = 0;\n\n    /** @internal */\n    public override readonly engine: _WebAudioEngine;\n\n    /** @internal */\n    public readonly node: StereoPannerNode;\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine) {\n        super(engine);\n\n        this.node = new StereoPannerNode(engine._audioContext);\n    }\n\n    /** @internal */\n    public get pan(): number {\n        return this._pan;\n    }\n\n    /** @internal */\n    public set pan(value: number) {\n        this._pan = value;\n        this.engine._setAudioParam(this.node.pan, value);\n    }\n\n    /** @internal */\n    public get _inNode(): AudioNode {\n        return this.node;\n    }\n\n    /** @internal */\n    public get _outNode(): AudioNode {\n        return this.node;\n    }\n\n    /** @internal */\n    public getClassName(): string {\n        return \"_StereoWebAudioSubNode\";\n    }\n\n    protected override _connect(node: IWebAudioInNode): boolean {\n        const connected = super._connect(node);\n\n        if (!connected) {\n            return false;\n        }\n\n        // If the wrapped node is not available now, it will be connected later by the subgraph.\n        if (node._inNode) {\n            this.node.connect(node._inNode);\n        }\n\n        return true;\n    }\n\n    protected override _disconnect(node: IWebAudioInNode): boolean {\n        const disconnected = super._disconnect(node);\n\n        if (!disconnected) {\n            return false;\n        }\n\n        if (node._inNode) {\n            this.node.disconnect(node._inNode);\n        }\n\n        return true;\n    }\n}\n", "import type { Nullable } from \"../../../types\";\nimport type { AbstractAudioNode } from \"../../abstractAudio/abstractAudioNode\";\nimport type { _AbstractAudioSubNode } from \"../../abstractAudio/subNodes/abstractAudioSubNode\";\nimport { AudioSubNode } from \"../../abstractAudio/subNodes/audioSubNode\";\nimport { _GetSpatialAudioSubNode } from \"../../abstractAudio/subNodes/spatialAudioSubNode\";\nimport { _GetStereoAudioSubNode } from \"../../abstractAudio/subNodes/stereoAudioSubNode\";\nimport type { IVolumeAudioOptions } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport { _GetVolumeAudioSubNode } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport type { ISpatialAudioOptions } from \"../../abstractAudio/subProperties/abstractSpatialAudio\";\nimport { _HasSpatialAudioOptions } from \"../../abstractAudio/subProperties/abstractSpatialAudio\";\nimport type { IStereoAudioOptions } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport { _HasStereoAudioOptions } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport type { IWebAudioOutNode, IWebAudioSubNode } from \"../webAudioNode\";\nimport type { _SpatialWebAudioSubNode } from \"./spatialWebAudioSubNode\";\nimport { _CreateSpatialAudioSubNodeAsync } from \"./spatialWebAudioSubNode\";\nimport type { _StereoWebAudioSubNode } from \"./stereoWebAudioSubNode\";\nimport { _CreateStereoAudioSubNodeAsync } from \"./stereoWebAudioSubNode\";\nimport type { _VolumeWebAudioSubNode } from \"./volumeWebAudioSubNode\";\nimport { _WebAudioBaseSubGraph } from \"./webAudioBaseSubGraph\";\n\n/** @internal */\nexport interface IWebAudioBusAndSoundSubGraphOptions extends ISpatialAudioOptions, IStereoAudioOptions, IVolumeAudioOptions {}\n\n/** @internal */\nexport abstract class _WebAudioBusAndSoundSubGraph extends _WebAudioBaseSubGraph {\n    private _rootNode: Nullable<GainNode> = null;\n    protected abstract readonly _upstreamNodes: Nullable<Set<AbstractAudioNode>>;\n\n    protected _inputNode: Nullable<AudioNode> = null;\n\n    /** @internal */\n    public override async init(options: Partial<IWebAudioBusAndSoundSubGraphOptions>): Promise<void> {\n        await super.init(options);\n\n        let hasSpatialOptions = false;\n        let hasStereoOptions = false;\n\n        if ((hasSpatialOptions = _HasSpatialAudioOptions(options))) {\n            await this.createAndAddSubNode(AudioSubNode.SPATIAL);\n        }\n        if ((hasStereoOptions = _HasStereoAudioOptions(options))) {\n            await this.createAndAddSubNode(AudioSubNode.STEREO);\n        }\n\n        await this._createSubNodePromisesResolved();\n\n        if (hasSpatialOptions) {\n            _GetSpatialAudioSubNode(this)?.setOptions(options);\n        }\n        if (hasStereoOptions) {\n            _GetStereoAudioSubNode(this)?.setOptions(options);\n        }\n    }\n\n    /** @internal */\n    public override get _inNode(): Nullable<AudioNode> {\n        return this._inputNode;\n    }\n\n    protected override _createSubNode(name: string): Promise<_AbstractAudioSubNode> {\n        try {\n            const node = super._createSubNode(name);\n            return node;\n        } catch (e) {}\n\n        switch (name) {\n            case AudioSubNode.SPATIAL:\n                return _CreateSpatialAudioSubNodeAsync(this._owner.engine);\n            case AudioSubNode.STEREO:\n                return _CreateStereoAudioSubNodeAsync(this._owner.engine);\n            default:\n                throw new Error(`Unknown subnode name: ${name}`);\n        }\n    }\n\n    protected override _onSubNodesChanged(): void {\n        super._onSubNodesChanged();\n\n        const spatialNode = _GetSpatialAudioSubNode(this);\n        const stereoNode = _GetStereoAudioSubNode(this);\n        const volumeNode = _GetVolumeAudioSubNode(this);\n\n        if (spatialNode && spatialNode.getClassName() !== \"_SpatialWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n        if (stereoNode && stereoNode.getClassName() !== \"_StereoWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n        if (volumeNode && volumeNode.getClassName() !== \"_VolumeWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n\n        if (spatialNode) {\n            spatialNode.disconnectAll();\n\n            if (volumeNode) {\n                spatialNode.connect(volumeNode);\n            }\n        }\n\n        if (stereoNode) {\n            stereoNode.disconnectAll();\n\n            if (volumeNode) {\n                stereoNode.connect(volumeNode);\n            }\n        }\n\n        if (spatialNode && stereoNode) {\n            this._rootNode = new GainNode(this._owner.engine._audioContext);\n            this._rootNode.connect((spatialNode as _SpatialWebAudioSubNode)._outNode);\n            this._rootNode.connect((stereoNode as _StereoWebAudioSubNode)._outNode);\n        } else {\n            this._rootNode?.disconnect();\n            this._rootNode = null;\n        }\n\n        let inSubNode: Nullable<IWebAudioSubNode> = null;\n\n        let inNode: Nullable<AudioNode> = null;\n\n        if (this._rootNode) {\n            inNode = this._rootNode;\n        } else {\n            if (spatialNode) {\n                inSubNode = spatialNode as _SpatialWebAudioSubNode;\n            } else if (stereoNode) {\n                inSubNode = stereoNode as _StereoWebAudioSubNode;\n            } else if (volumeNode) {\n                inSubNode = volumeNode as _VolumeWebAudioSubNode;\n            }\n\n            inNode = inSubNode?.node ?? null;\n        }\n\n        if (this._inputNode !== inNode) {\n            // Disconnect the wrapped upstream WebAudio nodes from the old wrapped WebAudio node.\n            // The wrapper nodes are unaware of this change.\n            if (this._inputNode && this._upstreamNodes) {\n                const it = this._upstreamNodes.values();\n                for (let next = it.next(); !next.done; next = it.next()) {\n                    (next.value as IWebAudioOutNode)._outNode?.disconnect(this._inputNode);\n                }\n            }\n\n            this._inputNode = inNode;\n\n            // Connect the wrapped upstream WebAudio nodes to the new wrapped WebAudio node.\n            // The wrapper nodes are unaware of this change.\n            if (inNode && this._upstreamNodes) {\n                const it = this._upstreamNodes.values();\n                for (let next = it.next(); !next.done; next = it.next()) {\n                    (next.value as IWebAudioOutNode)._outNode?.connect(inNode);\n                }\n            }\n        }\n    }\n}\n", "import type { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\nimport type { _AbstractAudioSubGraph } from \"../subNodes/abstractAudioSubGraph\";\nimport { AudioSubNode } from \"../subNodes/audioSubNode\";\nimport type { _SpatialAudioSubNode } from \"../subNodes/spatialAudioSubNode\";\nimport { _GetSpatialAudioSubNode, _SetSpatialAudioProperty } from \"../subNodes/spatialAudioSubNode\";\nimport { _SpatialAudioDefaults, AbstractSpatialAudio } from \"./abstractSpatialAudio\";\n\n/** @internal */\nexport abstract class _SpatialAudio extends AbstractSpatialAudio {\n    private _coneInnerAngle: number = _SpatialAudioDefaults.coneInnerAngle;\n    private _coneOuterAngle: number = _SpatialAudioDefaults.coneOuterAngle;\n    private _coneOuterVolume: number = _SpatialAudioDefaults.coneOuterVolume;\n    private _distanceModel: DistanceModelType = _SpatialAudioDefaults.distanceModel;\n    private _maxDistance: number = _SpatialAudioDefaults.maxDistance;\n    private _minDistance: number = _SpatialAudioDefaults.minDistance;\n    private _panningModel: PanningModelType = _SpatialAudioDefaults.panningModel;\n    private _position: Vector3;\n    private _rolloffFactor: number = _SpatialAudioDefaults.rolloffFactor;\n    private _rotation: Vector3;\n    private _rotationQuaternion: Quaternion;\n    private _subGraph: _AbstractAudioSubGraph;\n\n    /** @internal */\n    public constructor(subGraph: _AbstractAudioSubGraph) {\n        super();\n\n        const subNode = _GetSpatialAudioSubNode(subGraph);\n        if (subNode) {\n            this._position = subNode.position.clone();\n            this._rotation = subNode.rotation.clone();\n            this._rotationQuaternion = subNode.rotationQuaternion.clone();\n        } else {\n            this._position = _SpatialAudioDefaults.position.clone();\n            this._rotation = _SpatialAudioDefaults.rotation.clone();\n            this._rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\n\n            subGraph.createAndAddSubNode(AudioSubNode.SPATIAL);\n        }\n\n        this._subGraph = subGraph;\n    }\n\n    /** @internal */\n    public get coneInnerAngle(): number {\n        return this._coneInnerAngle;\n    }\n\n    public set coneInnerAngle(value: number) {\n        this._coneInnerAngle = value;\n        _SetSpatialAudioProperty(this._subGraph, \"coneInnerAngle\", value);\n    }\n\n    /** @internal */\n    public get coneOuterAngle(): number {\n        return this._coneOuterAngle;\n    }\n\n    public set coneOuterAngle(value: number) {\n        this._coneOuterAngle = value;\n        _SetSpatialAudioProperty(this._subGraph, \"coneOuterAngle\", value);\n    }\n\n    /** @internal */\n    public get coneOuterVolume(): number {\n        return this._coneOuterVolume;\n    }\n\n    public set coneOuterVolume(value: number) {\n        this._coneOuterVolume = value;\n        _SetSpatialAudioProperty(this._subGraph, \"coneOuterVolume\", value);\n    }\n\n    /** @internal */\n    public get distanceModel(): DistanceModelType {\n        return this._distanceModel;\n    }\n\n    public set distanceModel(value: DistanceModelType) {\n        this._distanceModel = value;\n        _SetSpatialAudioProperty(this._subGraph, \"distanceModel\", value);\n    }\n\n    /** @internal */\n    public get isAttached(): boolean {\n        return this._subGraph.getSubNode<_SpatialAudioSubNode>(AudioSubNode.SPATIAL)?.isAttached ?? false;\n    }\n\n    /** @internal */\n    public get maxDistance(): number {\n        return this._maxDistance;\n    }\n\n    public set maxDistance(value: number) {\n        if (value <= 0) {\n            value = 0.000001;\n        }\n\n        this._maxDistance = value;\n        _SetSpatialAudioProperty(this._subGraph, \"maxDistance\", value);\n    }\n\n    /** @internal */\n    public get minDistance(): number {\n        return this._minDistance;\n    }\n\n    public set minDistance(value: number) {\n        this._minDistance = value;\n        _SetSpatialAudioProperty(this._subGraph, \"minDistance\", value);\n    }\n\n    /** @internal */\n    public get panningModel(): PanningModelType {\n        return this._panningModel;\n    }\n\n    public set panningModel(value: PanningModelType) {\n        this._panningModel = value;\n        _SetSpatialAudioProperty(this._subGraph, \"panningModel\", value);\n    }\n\n    /** @internal */\n    public get position(): Vector3 {\n        return this._position;\n    }\n\n    public set position(value: Vector3) {\n        this._position = value;\n        this._updatePosition();\n    }\n\n    /** @internal */\n    public get rolloffFactor(): number {\n        return this._rolloffFactor;\n    }\n\n    public set rolloffFactor(value: number) {\n        this._rolloffFactor = value;\n        _SetSpatialAudioProperty(this._subGraph, \"rolloffFactor\", value);\n    }\n\n    /** @internal */\n    public get rotation(): Vector3 {\n        return this._rotation;\n    }\n\n    public set rotation(value: Vector3) {\n        this._rotation = value;\n        this._updateRotation();\n    }\n\n    /** @internal */\n    public get rotationQuaternion(): Quaternion {\n        return this._rotationQuaternion;\n    }\n\n    public set rotationQuaternion(value: Quaternion) {\n        this._rotationQuaternion = value;\n        this._updateRotation();\n    }\n\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the bounding box of the node for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    public attach(sceneNode: Nullable<Node>, useBoundingBox: boolean = false, attachmentType: SpatialAudioAttachmentType = SpatialAudioAttachmentType.PositionAndRotation): void {\n        _GetSpatialAudioSubNode(this._subGraph)?.attach(sceneNode, useBoundingBox, attachmentType);\n    }\n\n    /**\n     * Detaches from the scene node if attached.\n     */\n    public detach(): void {\n        _GetSpatialAudioSubNode(this._subGraph)?.detach();\n    }\n\n    /** @internal */\n    public update(): void {\n        const subNode = _GetSpatialAudioSubNode(this._subGraph);\n\n        if (!subNode) {\n            return;\n        }\n\n        if (subNode.isAttached) {\n            subNode.update();\n        } else {\n            this._updatePosition(subNode);\n            this._updateRotation(subNode);\n        }\n    }\n\n    private _updatePosition(subNode: Nullable<_SpatialAudioSubNode> = null): void {\n        if (!subNode) {\n            subNode = _GetSpatialAudioSubNode(this._subGraph);\n\n            if (!subNode) {\n                return;\n            }\n        }\n\n        const position = subNode.position;\n        if (!position.equalsWithEpsilon(this._position)) {\n            subNode.position.copyFrom(this._position);\n            subNode._updatePosition();\n        }\n    }\n\n    private _updateRotation(subNode: Nullable<_SpatialAudioSubNode> = null): void {\n        if (!subNode) {\n            subNode = _GetSpatialAudioSubNode(this._subGraph);\n\n            if (!subNode) {\n                return;\n            }\n        }\n\n        if (!subNode.rotationQuaternion.equalsWithEpsilon(this._rotationQuaternion)) {\n            subNode.rotationQuaternion.copyFrom(this._rotationQuaternion);\n            subNode._updateRotation();\n        } else if (!subNode.rotation.equalsWithEpsilon(this._rotation)) {\n            subNode.rotation.copyFrom(this._rotation);\n            subNode._updateRotation();\n        }\n    }\n}\n", "import { PrecisionDate } from \"../../../Misc/precisionDate\";\n\n/** @internal */\nexport class _SpatialWebAudioUpdaterComponent {\n    private _autoUpdate = true;\n    private _lastUpdateTime: number = 0;\n\n    /** @internal */\n    public minUpdateTime = 0;\n\n    /** @internal */\n    public constructor(parent: { update: () => void }, autoUpdate: boolean, minUpdateTime: number) {\n        if (!autoUpdate) {\n            return;\n        }\n\n        this.minUpdateTime = minUpdateTime;\n\n        const update = () => {\n            if (!this._autoUpdate) {\n                return;\n            }\n\n            let skipUpdate = false;\n\n            if (0 < this.minUpdateTime) {\n                const now = PrecisionDate.Now;\n                if (this._lastUpdateTime && now - this._lastUpdateTime < this.minUpdateTime) {\n                    skipUpdate = true;\n                }\n                this._lastUpdateTime = now;\n            }\n\n            if (!skipUpdate) {\n                parent.update();\n            }\n\n            requestAnimationFrame(update);\n        };\n        requestAnimationFrame(update);\n    }\n\n    /** @internal */\n    public dispose(): void {\n        this._autoUpdate = false;\n    }\n}\n", "import type { _AbstractAudioSubGraph } from \"../../abstractAudio/subNodes/abstractAudioSubGraph\";\nimport { _SpatialAudio } from \"../../abstractAudio/subProperties/spatialAudio\";\nimport { _SpatialWebAudioUpdaterComponent } from \"../components/spatialWebAudioUpdaterComponent\";\n\n/** @internal */\nexport class _SpatialWebAudio extends _SpatialAudio {\n    private _updaterComponent: _SpatialWebAudioUpdaterComponent;\n\n    /** @internal */\n    public constructor(subGraph: _AbstractAudioSubGraph, autoUpdate: boolean, minUpdateTime: number) {\n        super(subGraph);\n\n        this._updaterComponent = new _SpatialWebAudioUpdaterComponent(this, autoUpdate, minUpdateTime);\n    }\n\n    /** @internal */\n    public get minUpdateTime(): number {\n        return this._updaterComponent.minUpdateTime;\n    }\n\n    /** @internal */\n    public set minUpdateTime(value: number) {\n        this._updaterComponent.minUpdateTime = value;\n    }\n\n    /** @internal */\n    public dispose(): void {\n        this._updaterComponent.dispose();\n        this._updaterComponent = null!;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
