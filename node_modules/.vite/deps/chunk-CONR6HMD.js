import {
  AbstractAudioBus,
  init_abstractAudioBus
} from "./chunk-RSBI2V5R.js";
import {
  _WebAudioBaseSubGraph,
  init_webAudioBaseSubGraph
} from "./chunk-WVIW6OKE.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/AudioV2/abstractAudio/mainAudioBus.js
var MainAudioBus;
var init_mainAudioBus = __esm({
  "node_modules/@babylonjs/core/AudioV2/abstractAudio/mainAudioBus.js"() {
    init_abstractAudioBus();
    MainAudioBus = class extends AbstractAudioBus {
      constructor(name, engine) {
        super(name, engine);
      }
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/webAudio/webAudioMainBus.js
var _WebAudioMainBus;
var init_webAudioMainBus = __esm({
  "node_modules/@babylonjs/core/AudioV2/webAudio/webAudioMainBus.js"() {
    init_mainAudioBus();
    init_webAudioBaseSubGraph();
    _WebAudioMainBus = class __WebAudioMainBus extends MainAudioBus {
      /** @internal */
      constructor(name, engine) {
        super(name, engine);
        this._subGraph = new __WebAudioMainBus._SubGraph(this);
      }
      /** @internal */
      async _init(options) {
        await this._subGraph.init(options);
        if (this.engine.mainOut) {
          if (!this._connect(this.engine.mainOut)) {
            throw new Error("Connect failed");
          }
        }
        this.engine._addMainBus(this);
      }
      /** @internal */
      dispose() {
        super.dispose();
        this.engine._removeMainBus(this);
      }
      /** @internal */
      get _inNode() {
        return this._subGraph._inNode;
      }
      /** @internal */
      get _outNode() {
        return this._subGraph._outNode;
      }
      _connect(node) {
        var _a;
        const connected = super._connect(node);
        if (!connected) {
          return false;
        }
        if (node._inNode) {
          (_a = this._outNode) == null ? void 0 : _a.connect(node._inNode);
        }
        return true;
      }
      _disconnect(node) {
        var _a;
        const disconnected = super._disconnect(node);
        if (!disconnected) {
          return false;
        }
        if (node._inNode) {
          (_a = this._outNode) == null ? void 0 : _a.disconnect(node._inNode);
        }
        return true;
      }
      /** @internal */
      getClassName() {
        return "_WebAudioMainBus";
      }
    };
    _WebAudioMainBus._SubGraph = class extends _WebAudioBaseSubGraph {
      get _downstreamNodes() {
        return this._owner._downstreamNodes ?? null;
      }
    };
  }
});

export {
  MainAudioBus,
  init_mainAudioBus,
  _WebAudioMainBus,
  init_webAudioMainBus
};
//# sourceMappingURL=chunk-CONR6HMD.js.map
