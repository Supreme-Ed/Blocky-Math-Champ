{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/dds.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Clamp } from \"../Maths/math.scalar.functions\";\r\nimport type { SphericalPolynomial } from \"../Maths/sphericalPolynomial\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { CubeMapToSphericalPolynomialTools } from \"../Misc/HighDynamicRange/cubemapToSphericalPolynomial\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { FromHalfFloat, ToHalfFloat } from \"./textureTools\";\r\n\r\nimport \"../Engines/AbstractEngine/abstractEngine.cubeTexture\";\r\n\r\n// Based on demo done by Brandon Jones - http://media.tojicode.com/webgl-samples/dds.html\r\n// All values and structures referenced from:\r\n// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\nconst DDS_MAGIC = 0x20534444;\r\n\r\nconst //DDSD_CAPS = 0x1,\r\n    //DDSD_HEIGHT = 0x2,\r\n    //DDSD_WIDTH = 0x4,\r\n    //DDSD_PITCH = 0x8,\r\n    //DDSD_PIXELFORMAT = 0x1000,\r\n    DDSD_MIPMAPCOUNT = 0x20000;\r\n//DDSD_LINEARSIZE = 0x80000,\r\n//DDSD_DEPTH = 0x800000;\r\n\r\n// var DDSCAPS_COMPLEX = 0x8,\r\n//     DDSCAPS_MIPMAP = 0x400000,\r\n//     DDSCAPS_TEXTURE = 0x1000;\r\n\r\nconst DDSCAPS2_CUBEMAP = 0x200;\r\n// DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\r\n// DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\r\n// DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\r\n// DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\r\n// DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\r\n// DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\r\n// DDSCAPS2_VOLUME = 0x200000;\r\n\r\nconst //DDPF_ALPHAPIXELS = 0x1,\r\n    //DDPF_ALPHA = 0x2,\r\n    DDPF_FOURCC = 0x4,\r\n    DDPF_RGB = 0x40,\r\n    //DDPF_YUV = 0x200,\r\n    DDPF_LUMINANCE = 0x20000;\r\n\r\nfunction FourCCToInt32(value: string) {\r\n    return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\r\n}\r\n\r\nfunction Int32ToFourCC(value: number) {\r\n    return String.fromCharCode(value & 0xff, (value >> 8) & 0xff, (value >> 16) & 0xff, (value >> 24) & 0xff);\r\n}\r\n\r\nconst FOURCC_DXT1 = FourCCToInt32(\"DXT1\");\r\nconst FOURCC_DXT3 = FourCCToInt32(\"DXT3\");\r\nconst FOURCC_DXT5 = FourCCToInt32(\"DXT5\");\r\nconst FOURCC_DX10 = FourCCToInt32(\"DX10\");\r\nconst FOURCC_D3DFMT_R16G16B16A16F = 113;\r\nconst FOURCC_D3DFMT_R32G32B32A32F = 116;\r\n\r\nconst DXGI_FORMAT_R32G32B32A32_FLOAT = 2;\r\nconst DXGI_FORMAT_R16G16B16A16_FLOAT = 10;\r\nconst DXGI_FORMAT_B8G8R8X8_UNORM = 88;\r\n\r\nconst headerLengthInt = 31; // The header length in 32 bit ints\r\n\r\n// Offsets into the header array\r\nconst off_magic = 0;\r\n\r\nconst off_size = 1;\r\nconst off_flags = 2;\r\nconst off_height = 3;\r\nconst off_width = 4;\r\n\r\nconst off_mipmapCount = 7;\r\n\r\nconst off_pfFlags = 20;\r\nconst off_pfFourCC = 21;\r\nconst off_RGBbpp = 22;\r\nconst off_RMask = 23;\r\nconst off_GMask = 24;\r\nconst off_BMask = 25;\r\nconst off_AMask = 26;\r\n// var off_caps1 = 27;\r\nconst off_caps2 = 28;\r\n// var off_caps3 = 29;\r\n// var off_caps4 = 30;\r\nconst off_dxgiFormat = 32;\r\n\r\n/**\r\n * Direct draw surface info\r\n * @see https://docs.microsoft.com/en-us/windows/desktop/direct3ddds/dx-graphics-dds-pguide\r\n */\r\nexport interface DDSInfo {\r\n    /**\r\n     * Width of the texture\r\n     */\r\n    width: number;\r\n    /**\r\n     * Width of the texture\r\n     */\r\n    height: number;\r\n    /**\r\n     * Number of Mipmaps for the texture\r\n     * @see https://en.wikipedia.org/wiki/Mipmap\r\n     */\r\n    mipmapCount: number;\r\n    /**\r\n     * If the textures format is a known fourCC format\r\n     * @see https://www.fourcc.org/\r\n     */\r\n    isFourCC: boolean;\r\n    /**\r\n     * If the texture is an RGB format eg. DXGI_FORMAT_B8G8R8X8_UNORM format\r\n     */\r\n    isRGB: boolean;\r\n    /**\r\n     * If the texture is a lumincance format\r\n     */\r\n    isLuminance: boolean;\r\n    /**\r\n     * If this is a cube texture\r\n     * @see https://docs.microsoft.com/en-us/windows/desktop/direct3ddds/dds-file-layout-for-cubic-environment-maps\r\n     */\r\n    isCube: boolean;\r\n    /**\r\n     * If the texture is a compressed format eg. FOURCC_DXT1\r\n     */\r\n    isCompressed: boolean;\r\n    /**\r\n     * The dxgiFormat of the texture\r\n     * @see https://docs.microsoft.com/en-us/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format\r\n     */\r\n    dxgiFormat: number;\r\n    /**\r\n     * Texture type eg. Engine.TEXTURETYPE_UNSIGNED_BYTE, Engine.TEXTURETYPE_FLOAT\r\n     */\r\n    textureType: number;\r\n    /**\r\n     * Sphericle polynomial created for the dds texture\r\n     */\r\n    sphericalPolynomial?: SphericalPolynomial;\r\n}\r\n\r\n/**\r\n * Class used to provide DDS decompression tools\r\n */\r\nexport class DDSTools {\r\n    /**\r\n     * Gets or sets a boolean indicating that LOD info is stored in alpha channel (false by default)\r\n     */\r\n    public static StoreLODInAlphaChannel = false;\r\n\r\n    /**\r\n     * Gets DDS information from an array buffer\r\n     * @param data defines the array buffer view to read data from\r\n     * @returns the DDS information\r\n     */\r\n    public static GetDDSInfo(data: ArrayBufferView): DDSInfo {\r\n        const header = new Int32Array(data.buffer, data.byteOffset, headerLengthInt);\r\n        const extendedHeader = new Int32Array(data.buffer, data.byteOffset, headerLengthInt + 4);\r\n\r\n        let mipmapCount = 1;\r\n        if (header[off_flags] & DDSD_MIPMAPCOUNT) {\r\n            mipmapCount = Math.max(1, header[off_mipmapCount]);\r\n        }\r\n\r\n        const fourCC = header[off_pfFourCC];\r\n        const dxgiFormat = fourCC === FOURCC_DX10 ? extendedHeader[off_dxgiFormat] : 0;\r\n        let textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n        switch (fourCC) {\r\n            case FOURCC_D3DFMT_R16G16B16A16F:\r\n                textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n                break;\r\n            case FOURCC_D3DFMT_R32G32B32A32F:\r\n                textureType = Constants.TEXTURETYPE_FLOAT;\r\n                break;\r\n            case FOURCC_DX10:\r\n                if (dxgiFormat === DXGI_FORMAT_R16G16B16A16_FLOAT) {\r\n                    textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n                    break;\r\n                }\r\n                if (dxgiFormat === DXGI_FORMAT_R32G32B32A32_FLOAT) {\r\n                    textureType = Constants.TEXTURETYPE_FLOAT;\r\n                    break;\r\n                }\r\n        }\r\n\r\n        return {\r\n            width: header[off_width],\r\n            height: header[off_height],\r\n            mipmapCount: mipmapCount,\r\n            isFourCC: (header[off_pfFlags] & DDPF_FOURCC) === DDPF_FOURCC,\r\n            isRGB: (header[off_pfFlags] & DDPF_RGB) === DDPF_RGB,\r\n            isLuminance: (header[off_pfFlags] & DDPF_LUMINANCE) === DDPF_LUMINANCE,\r\n            isCube: (header[off_caps2] & DDSCAPS2_CUBEMAP) === DDSCAPS2_CUBEMAP,\r\n            isCompressed: fourCC === FOURCC_DXT1 || fourCC === FOURCC_DXT3 || fourCC === FOURCC_DXT5,\r\n            dxgiFormat: dxgiFormat,\r\n            textureType: textureType,\r\n        };\r\n    }\r\n\r\n    private static _GetHalfFloatAsFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Float32Array {\r\n        const destArray = new Float32Array(dataLength);\r\n        const srcData = new Uint16Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n                destArray[index] = FromHalfFloat(srcData[srcPos]);\r\n                destArray[index + 1] = FromHalfFloat(srcData[srcPos + 1]);\r\n                destArray[index + 2] = FromHalfFloat(srcData[srcPos + 2]);\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = lod;\r\n                } else {\r\n                    destArray[index + 3] = FromHalfFloat(srcData[srcPos + 3]);\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetHalfFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint16Array {\r\n        if (DDSTools.StoreLODInAlphaChannel) {\r\n            const destArray = new Uint16Array(dataLength);\r\n            const srcData = new Uint16Array(arrayBuffer, dataOffset);\r\n            let index = 0;\r\n            for (let y = 0; y < height; y++) {\r\n                for (let x = 0; x < width; x++) {\r\n                    const srcPos = (x + y * width) * 4;\r\n                    destArray[index] = srcData[srcPos];\r\n                    destArray[index + 1] = srcData[srcPos + 1];\r\n                    destArray[index + 2] = srcData[srcPos + 2];\r\n                    destArray[index + 3] = ToHalfFloat(lod);\r\n                    index += 4;\r\n                }\r\n            }\r\n\r\n            return destArray;\r\n        }\r\n\r\n        return new Uint16Array(arrayBuffer, dataOffset, dataLength);\r\n    }\r\n\r\n    private static _GetFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Float32Array {\r\n        if (DDSTools.StoreLODInAlphaChannel) {\r\n            const destArray = new Float32Array(dataLength);\r\n            const srcData = new Float32Array(arrayBuffer, dataOffset);\r\n            let index = 0;\r\n            for (let y = 0; y < height; y++) {\r\n                for (let x = 0; x < width; x++) {\r\n                    const srcPos = (x + y * width) * 4;\r\n                    destArray[index] = srcData[srcPos];\r\n                    destArray[index + 1] = srcData[srcPos + 1];\r\n                    destArray[index + 2] = srcData[srcPos + 2];\r\n                    destArray[index + 3] = lod;\r\n                    index += 4;\r\n                }\r\n            }\r\n\r\n            return destArray;\r\n        }\r\n        return new Float32Array(arrayBuffer, dataOffset, dataLength);\r\n    }\r\n\r\n    private static _GetFloatAsHalfFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint16Array {\r\n        const destArray = new Uint16Array(dataLength);\r\n        const srcData = new Float32Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                destArray[index] = ToHalfFloat(srcData[index]);\r\n                destArray[index + 1] = ToHalfFloat(srcData[index + 1]);\r\n                destArray[index + 2] = ToHalfFloat(srcData[index + 2]);\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = ToHalfFloat(lod);\r\n                } else {\r\n                    destArray[index + 3] = ToHalfFloat(srcData[index + 3]);\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetFloatAsUIntRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint8Array {\r\n        const destArray = new Uint8Array(dataLength);\r\n        const srcData = new Float32Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n                destArray[index] = Clamp(srcData[srcPos]) * 255;\r\n                destArray[index + 1] = Clamp(srcData[srcPos + 1]) * 255;\r\n                destArray[index + 2] = Clamp(srcData[srcPos + 2]) * 255;\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = lod;\r\n                } else {\r\n                    destArray[index + 3] = Clamp(srcData[srcPos + 3]) * 255;\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetHalfFloatAsUIntRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint8Array {\r\n        const destArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint16Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n                destArray[index] = Clamp(FromHalfFloat(srcData[srcPos])) * 255;\r\n                destArray[index + 1] = Clamp(FromHalfFloat(srcData[srcPos + 1])) * 255;\r\n                destArray[index + 2] = Clamp(FromHalfFloat(srcData[srcPos + 2])) * 255;\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = lod;\r\n                } else {\r\n                    destArray[index + 3] = Clamp(FromHalfFloat(srcData[srcPos + 3])) * 255;\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetRGBAArrayBuffer(\r\n        width: number,\r\n        height: number,\r\n        dataOffset: number,\r\n        dataLength: number,\r\n        arrayBuffer: ArrayBuffer,\r\n        rOffset: number,\r\n        gOffset: number,\r\n        bOffset: number,\r\n        aOffset: number\r\n    ): Uint8Array {\r\n        const byteArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint8Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n\r\n                byteArray[index] = srcData[srcPos + rOffset];\r\n                byteArray[index + 1] = srcData[srcPos + gOffset];\r\n                byteArray[index + 2] = srcData[srcPos + bOffset];\r\n                byteArray[index + 3] = srcData[srcPos + aOffset];\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return byteArray;\r\n    }\r\n\r\n    private static _ExtractLongWordOrder(value: number): number {\r\n        if (value === 0 || value === 255 || value === -16777216) {\r\n            return 0;\r\n        }\r\n\r\n        return 1 + DDSTools._ExtractLongWordOrder(value >> 8);\r\n    }\r\n\r\n    private static _GetRGBArrayBuffer(\r\n        width: number,\r\n        height: number,\r\n        dataOffset: number,\r\n        dataLength: number,\r\n        arrayBuffer: ArrayBuffer,\r\n        rOffset: number,\r\n        gOffset: number,\r\n        bOffset: number\r\n    ): Uint8Array {\r\n        const byteArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint8Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 3;\r\n\r\n                byteArray[index] = srcData[srcPos + rOffset];\r\n                byteArray[index + 1] = srcData[srcPos + gOffset];\r\n                byteArray[index + 2] = srcData[srcPos + bOffset];\r\n                index += 3;\r\n            }\r\n        }\r\n\r\n        return byteArray;\r\n    }\r\n\r\n    private static _GetLuminanceArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer): Uint8Array {\r\n        const byteArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint8Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = x + y * width;\r\n                byteArray[index] = srcData[srcPos];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return byteArray;\r\n    }\r\n\r\n    /**\r\n     * Uploads DDS Levels to a Babylon Texture\r\n     * @internal\r\n     */\r\n    public static UploadDDSLevels(\r\n        engine: AbstractEngine,\r\n        texture: InternalTexture,\r\n        data: ArrayBufferView,\r\n        info: DDSInfo,\r\n        loadMipmaps: boolean,\r\n        faces: number,\r\n        lodIndex = -1,\r\n        currentFace?: number,\r\n        destTypeMustBeFilterable = true\r\n    ) {\r\n        let sphericalPolynomialFaces: Nullable<Array<ArrayBufferView>> = null;\r\n        if (info.sphericalPolynomial) {\r\n            sphericalPolynomialFaces = [] as ArrayBufferView[];\r\n        }\r\n        const ext = !!engine.getCaps().s3tc;\r\n\r\n        // TODO WEBGPU Once generateMipMaps is split into generateMipMaps + hasMipMaps in InternalTexture this line can be removed\r\n        texture.generateMipMaps = loadMipmaps;\r\n\r\n        const header = new Int32Array(data.buffer, data.byteOffset, headerLengthInt);\r\n        let fourCC: number,\r\n            width: number,\r\n            height: number,\r\n            dataLength: number = 0,\r\n            dataOffset: number;\r\n        let byteArray: Uint8Array, mipmapCount: number, mip: number;\r\n        let internalCompressedFormat = 0;\r\n        let blockBytes = 1;\r\n\r\n        if (header[off_magic] !== DDS_MAGIC) {\r\n            Logger.Error(\"Invalid magic number in DDS header\");\r\n            return;\r\n        }\r\n\r\n        if (!info.isFourCC && !info.isRGB && !info.isLuminance) {\r\n            Logger.Error(\"Unsupported format, must contain a FourCC, RGB or LUMINANCE code\");\r\n            return;\r\n        }\r\n\r\n        if (info.isCompressed && !ext) {\r\n            Logger.Error(\"Compressed textures are not supported on this platform.\");\r\n            return;\r\n        }\r\n\r\n        let bpp = header[off_RGBbpp];\r\n        dataOffset = header[off_size] + 4;\r\n\r\n        let computeFormats = false;\r\n\r\n        if (info.isFourCC) {\r\n            fourCC = header[off_pfFourCC];\r\n            switch (fourCC) {\r\n                case FOURCC_DXT1:\r\n                    blockBytes = 8;\r\n                    internalCompressedFormat = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT1;\r\n                    break;\r\n                case FOURCC_DXT3:\r\n                    blockBytes = 16;\r\n                    internalCompressedFormat = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3;\r\n                    break;\r\n                case FOURCC_DXT5:\r\n                    blockBytes = 16;\r\n                    internalCompressedFormat = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5;\r\n                    break;\r\n                case FOURCC_D3DFMT_R16G16B16A16F:\r\n                    computeFormats = true;\r\n                    bpp = 64;\r\n                    break;\r\n                case FOURCC_D3DFMT_R32G32B32A32F:\r\n                    computeFormats = true;\r\n                    bpp = 128;\r\n                    break;\r\n                case FOURCC_DX10: {\r\n                    // There is an additionnal header so dataOffset need to be changed\r\n                    dataOffset += 5 * 4; // 5 uints\r\n\r\n                    let supported = false;\r\n                    switch (info.dxgiFormat) {\r\n                        case DXGI_FORMAT_R16G16B16A16_FLOAT:\r\n                            computeFormats = true;\r\n                            bpp = 64;\r\n                            supported = true;\r\n                            break;\r\n                        case DXGI_FORMAT_R32G32B32A32_FLOAT:\r\n                            computeFormats = true;\r\n                            bpp = 128;\r\n                            supported = true;\r\n                            break;\r\n                        case DXGI_FORMAT_B8G8R8X8_UNORM:\r\n                            info.isRGB = true;\r\n                            info.isFourCC = false;\r\n                            bpp = 32;\r\n                            supported = true;\r\n                            break;\r\n                    }\r\n\r\n                    if (supported) {\r\n                        break;\r\n                    }\r\n                }\r\n                // eslint-disable-next-line no-fallthrough\r\n                default:\r\n                    Logger.Error([\"Unsupported FourCC code:\", Int32ToFourCC(fourCC)]);\r\n                    return;\r\n            }\r\n        }\r\n\r\n        const rOffset = DDSTools._ExtractLongWordOrder(header[off_RMask]);\r\n        const gOffset = DDSTools._ExtractLongWordOrder(header[off_GMask]);\r\n        const bOffset = DDSTools._ExtractLongWordOrder(header[off_BMask]);\r\n        const aOffset = DDSTools._ExtractLongWordOrder(header[off_AMask]);\r\n\r\n        if (computeFormats) {\r\n            internalCompressedFormat = engine._getRGBABufferInternalSizedFormat(info.textureType);\r\n        }\r\n\r\n        mipmapCount = 1;\r\n        if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\r\n            mipmapCount = Math.max(1, header[off_mipmapCount]);\r\n        }\r\n\r\n        const startFace = currentFace || 0;\r\n        const caps = engine.getCaps();\r\n        for (let face = startFace; face < faces; face++) {\r\n            width = header[off_width];\r\n            height = header[off_height];\r\n\r\n            for (mip = 0; mip < mipmapCount; ++mip) {\r\n                if (lodIndex === -1 || lodIndex === mip) {\r\n                    // In case of fixed LOD, if the lod has just been uploaded, early exit.\r\n                    const i = lodIndex === -1 ? mip : 0;\r\n\r\n                    if (!info.isCompressed && info.isFourCC) {\r\n                        texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n                        dataLength = width * height * 4;\r\n                        let floatArray: Nullable<ArrayBufferView> = null;\r\n\r\n                        if (engine._badOS || engine._badDesktopOS || (!caps.textureHalfFloat && !caps.textureFloat)) {\r\n                            // Required because iOS has many issues with float and half float generation\r\n                            if (bpp === 128) {\r\n                                floatArray = DDSTools._GetFloatAsUIntRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i);\r\n                                if (sphericalPolynomialFaces && i == 0) {\r\n                                    sphericalPolynomialFaces.push(DDSTools._GetFloatRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i));\r\n                                }\r\n                            } else if (bpp === 64) {\r\n                                floatArray = DDSTools._GetHalfFloatAsUIntRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i);\r\n                                if (sphericalPolynomialFaces && i == 0) {\r\n                                    sphericalPolynomialFaces.push(\r\n                                        DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i)\r\n                                    );\r\n                                }\r\n                            }\r\n\r\n                            texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                        } else {\r\n                            const floatAvailable = caps.textureFloat && ((destTypeMustBeFilterable && caps.textureFloatLinearFiltering) || !destTypeMustBeFilterable);\r\n                            const halfFloatAvailable = caps.textureHalfFloat && ((destTypeMustBeFilterable && caps.textureHalfFloatLinearFiltering) || !destTypeMustBeFilterable);\r\n\r\n                            const destType =\r\n                                (bpp === 128 || (bpp === 64 && !halfFloatAvailable)) && floatAvailable\r\n                                    ? Constants.TEXTURETYPE_FLOAT\r\n                                    : (bpp === 64 || (bpp === 128 && !floatAvailable)) && halfFloatAvailable\r\n                                      ? Constants.TEXTURETYPE_HALF_FLOAT\r\n                                      : Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n                            let dataGetter: (width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number) => ArrayBufferView;\r\n                            let dataGetterPolynomial: Nullable<\r\n                                (width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number) => ArrayBufferView\r\n                            > = null;\r\n\r\n                            switch (bpp) {\r\n                                case 128: {\r\n                                    switch (destType) {\r\n                                        case Constants.TEXTURETYPE_FLOAT:\r\n                                            dataGetter = DDSTools._GetFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = null;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                                            dataGetter = DDSTools._GetFloatAsHalfFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                                            dataGetter = DDSTools._GetFloatAsUIntRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                                }\r\n                                default: {\r\n                                    // 64 bpp\r\n                                    switch (destType) {\r\n                                        case Constants.TEXTURETYPE_FLOAT:\r\n                                            dataGetter = DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = null;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                                            dataGetter = DDSTools._GetHalfFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                                            dataGetter = DDSTools._GetHalfFloatAsUIntRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            texture.type = destType;\r\n\r\n                            floatArray = dataGetter(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i);\r\n\r\n                            if (sphericalPolynomialFaces && i == 0) {\r\n                                sphericalPolynomialFaces.push(\r\n                                    dataGetterPolynomial ? dataGetterPolynomial(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i) : floatArray\r\n                                );\r\n                            }\r\n                        }\r\n\r\n                        if (floatArray) {\r\n                            engine._uploadDataToTextureDirectly(texture, floatArray, face, i);\r\n                        }\r\n                    } else if (info.isRGB) {\r\n                        texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                        if (bpp === 24) {\r\n                            texture.format = Constants.TEXTUREFORMAT_RGB;\r\n                            dataLength = width * height * 3;\r\n                            byteArray = DDSTools._GetRGBArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, rOffset, gOffset, bOffset);\r\n                            engine._uploadDataToTextureDirectly(texture, byteArray, face, i);\r\n                        } else {\r\n                            // 32\r\n                            texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n                            dataLength = width * height * 4;\r\n                            byteArray = DDSTools._GetRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, rOffset, gOffset, bOffset, aOffset);\r\n                            engine._uploadDataToTextureDirectly(texture, byteArray, face, i);\r\n                        }\r\n                    } else if (info.isLuminance) {\r\n                        const unpackAlignment = engine._getUnpackAlignement();\r\n                        const unpaddedRowSize = width;\r\n                        const paddedRowSize = Math.floor((width + unpackAlignment - 1) / unpackAlignment) * unpackAlignment;\r\n                        dataLength = paddedRowSize * (height - 1) + unpaddedRowSize;\r\n\r\n                        byteArray = DDSTools._GetLuminanceArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer);\r\n                        texture.format = Constants.TEXTUREFORMAT_LUMINANCE;\r\n                        texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n                        engine._uploadDataToTextureDirectly(texture, byteArray, face, i);\r\n                    } else {\r\n                        dataLength = (((Math.max(4, width) / 4) * Math.max(4, height)) / 4) * blockBytes;\r\n                        byteArray = new Uint8Array(data.buffer, data.byteOffset + dataOffset, dataLength);\r\n\r\n                        texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                        engine._uploadCompressedDataToTextureDirectly(texture, internalCompressedFormat, width, height, byteArray, face, i);\r\n                    }\r\n                }\r\n                dataOffset += bpp ? width * height * (bpp / 8) : dataLength;\r\n                width *= 0.5;\r\n                height *= 0.5;\r\n\r\n                width = Math.max(1.0, width);\r\n                height = Math.max(1.0, height);\r\n            }\r\n\r\n            if (currentFace !== undefined) {\r\n                // Loading a single face\r\n                break;\r\n            }\r\n        }\r\n        if (sphericalPolynomialFaces && sphericalPolynomialFaces.length > 0) {\r\n            info.sphericalPolynomial = CubeMapToSphericalPolynomialTools.ConvertCubeMapToSphericalPolynomial({\r\n                size: header[off_width],\r\n                right: sphericalPolynomialFaces[0],\r\n                left: sphericalPolynomialFaces[1],\r\n                up: sphericalPolynomialFaces[2],\r\n                down: sphericalPolynomialFaces[3],\r\n                front: sphericalPolynomialFaces[4],\r\n                back: sphericalPolynomialFaces[5],\r\n                format: Constants.TEXTUREFORMAT_RGBA,\r\n                type: Constants.TEXTURETYPE_FLOAT,\r\n                gammaSpace: false,\r\n            });\r\n        } else {\r\n            info.sphericalPolynomial = undefined;\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
