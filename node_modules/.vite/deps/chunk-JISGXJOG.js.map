{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/urlTools.ts", "../../../dev/core/src/Engines/AbstractEngine/abstractEngine.cubeTexture.ts"],
  "sourcesContent": ["/**\r\n * Gets the file extension from a URL.\r\n * @param url The URL to get the file extension from.\r\n * @returns The file extension, or an empty string if no extension is found.\r\n */\r\nexport function GetExtensionFromUrl(url: string) {\r\n    const urlWithoutUriParams = url.split(\"?\")[0];\r\n    const lastDot = urlWithoutUriParams.lastIndexOf(\".\");\r\n    const extension = lastDot > -1 ? urlWithoutUriParams.substring(lastDot).toLowerCase() : \"\";\r\n    return extension;\r\n}\r\n", "import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { LoadImage } from \"../../Misc/fileTools\";\r\nimport { RandomGUID } from \"../../Misc/guid\";\r\nimport type { IWebRequest } from \"../../Misc/interfaces/iWebRequest\";\r\nimport { AbstractEngine } from \"../abstractEngine\";\r\nimport { _GetCompatibleTextureLoader } from \"core/Materials/Textures/Loaders/textureLoaderManager\";\r\nimport { GetExtensionFromUrl } from \"core/Misc/urlTools\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /** @internal */\r\n        createCubeTextureBase(\r\n            rootUrl: string,\r\n            scene: Nullable<Scene>,\r\n            files: Nullable<string[]>,\r\n            noMipmap: boolean,\r\n            onLoad: Nullable<(data?: any) => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            format: number | undefined,\r\n            forcedExtension: any,\r\n            createPolynomials: boolean,\r\n            lodScale: number,\r\n            lodOffset: number,\r\n            fallback: Nullable<InternalTexture>,\r\n            beforeLoadCubeDataCallback: Nullable<(texture: InternalTexture, data: ArrayBufferView | ArrayBufferView[]) => void>,\r\n            imageHandler: Nullable<(texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            useSRGBBuffer: boolean,\r\n            buffer: Nullable<ArrayBufferView>\r\n        ): InternalTexture;\r\n\r\n        /** @internal */\r\n        _partialLoadFile(\r\n            url: string,\r\n            index: number,\r\n            loadedFiles: ArrayBuffer[],\r\n            onfinish: (files: ArrayBuffer[]) => void,\r\n            onErrorCallBack: Nullable<(message?: string, exception?: any) => void>\r\n        ): void;\r\n\r\n        /** @internal */\r\n        _cascadeLoadFiles(scene: Nullable<Scene>, onfinish: (images: ArrayBuffer[]) => void, files: string[], onError: Nullable<(message?: string, exception?: any) => void>): void;\r\n\r\n        /** @internal */\r\n        _cascadeLoadImgs(\r\n            scene: Nullable<Scene>,\r\n            texture: InternalTexture,\r\n            onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            files: string[],\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            mimeType?: string\r\n        ): void;\r\n\r\n        /** @internal */\r\n        _partialLoadImg(\r\n            url: string,\r\n            index: number,\r\n            loadedImages: HTMLImageElement[] | ImageBitmap[],\r\n            scene: Nullable<Scene>,\r\n            texture: InternalTexture,\r\n            onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            onErrorCallBack: Nullable<(message?: string, exception?: any) => void>,\r\n            mimeType?: string\r\n        ): void;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype._partialLoadFile = function (\r\n    url: string,\r\n    index: number,\r\n    loadedFiles: ArrayBuffer[],\r\n    onfinish: (files: ArrayBuffer[]) => void,\r\n    onErrorCallBack: Nullable<(message?: string, exception?: any) => void> = null\r\n): void {\r\n    const onload = (data: ArrayBuffer) => {\r\n        loadedFiles[index] = data;\r\n        (<any>loadedFiles)._internalCount++;\r\n\r\n        if ((<any>loadedFiles)._internalCount === 6) {\r\n            onfinish(loadedFiles);\r\n        }\r\n    };\r\n\r\n    const onerror = (request?: IWebRequest, exception?: any) => {\r\n        if (onErrorCallBack && request) {\r\n            onErrorCallBack(request.status + \" \" + request.statusText, exception);\r\n        }\r\n    };\r\n\r\n    this._loadFile(url, onload as (data: string | ArrayBuffer) => void, undefined, undefined, true, onerror);\r\n};\r\n\r\nAbstractEngine.prototype._cascadeLoadFiles = function (\r\n    scene: Nullable<Scene>,\r\n    onfinish: (images: ArrayBuffer[]) => void,\r\n    files: string[],\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null\r\n): void {\r\n    const loadedFiles: ArrayBuffer[] = [];\r\n    (<any>loadedFiles)._internalCount = 0;\r\n\r\n    for (let index = 0; index < 6; index++) {\r\n        this._partialLoadFile(files[index], index, loadedFiles, onfinish, onError);\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype._cascadeLoadImgs = function (\r\n    scene: Nullable<Scene>,\r\n    texture: InternalTexture,\r\n    onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n    files: string[],\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    mimeType?: string\r\n) {\r\n    const loadedImages: HTMLImageElement[] | ImageBitmap[] = [];\r\n    (<any>loadedImages)._internalCount = 0;\r\n\r\n    for (let index = 0; index < 6; index++) {\r\n        this._partialLoadImg(files[index], index, loadedImages, scene, texture, onfinish, onError, mimeType);\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype._partialLoadImg = function (\r\n    url: string,\r\n    index: number,\r\n    loadedImages: HTMLImageElement[] | ImageBitmap[],\r\n    scene: Nullable<Scene>,\r\n    texture: InternalTexture,\r\n    onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n    onErrorCallBack: Nullable<(message?: string, exception?: any) => void> = null,\r\n    mimeType?: string\r\n) {\r\n    const tokenPendingData = RandomGUID();\r\n\r\n    const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n        loadedImages[index] = img;\r\n        (<any>loadedImages)._internalCount++;\r\n\r\n        if (scene) {\r\n            scene.removePendingData(tokenPendingData);\r\n        }\r\n\r\n        if ((<any>loadedImages)._internalCount === 6 && onfinish) {\r\n            onfinish(texture, loadedImages);\r\n        }\r\n    };\r\n\r\n    const onerror = (message?: string, exception?: any) => {\r\n        if (scene) {\r\n            scene.removePendingData(tokenPendingData);\r\n        }\r\n\r\n        if (onErrorCallBack) {\r\n            onErrorCallBack(message, exception);\r\n        }\r\n    };\r\n\r\n    LoadImage(url, onload, onerror, scene ? scene.offlineProvider : null, mimeType);\r\n    if (scene) {\r\n        scene.addPendingData(tokenPendingData);\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype.createCubeTextureBase = function (\r\n    rootUrl: string,\r\n    scene: Nullable<Scene>,\r\n    files: Nullable<string[]>,\r\n    noMipmap?: boolean,\r\n    onLoad: Nullable<(data?: any) => void> = null,\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    format?: number,\r\n    forcedExtension: any = null,\r\n    createPolynomials: boolean = false,\r\n    lodScale: number = 0,\r\n    lodOffset: number = 0,\r\n    fallback: Nullable<InternalTexture> = null,\r\n    beforeLoadCubeDataCallback: Nullable<(texture: InternalTexture, data: ArrayBufferView | ArrayBufferView[]) => void> = null,\r\n    imageHandler: Nullable<(texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => void> = null,\r\n    useSRGBBuffer = false,\r\n    buffer: Nullable<ArrayBufferView> = null\r\n): InternalTexture {\r\n    const texture = fallback ? fallback : new InternalTexture(this, InternalTextureSource.Cube);\r\n    texture.isCube = true;\r\n    texture.url = rootUrl;\r\n    texture.generateMipMaps = !noMipmap;\r\n    texture._lodGenerationScale = lodScale;\r\n    texture._lodGenerationOffset = lodOffset;\r\n    texture._useSRGBBuffer = !!useSRGBBuffer && this._caps.supportSRGBBuffers && (this.version > 1 || this.isWebGPU || !!noMipmap);\r\n    if (texture !== fallback) {\r\n        texture.label = rootUrl.substring(0, 60); // default label, can be overriden by the caller\r\n    }\r\n\r\n    if (!this._doNotHandleContextLost) {\r\n        texture._extension = forcedExtension;\r\n        texture._files = files;\r\n        texture._buffer = buffer;\r\n    }\r\n\r\n    const originalRootUrl = rootUrl;\r\n    if (this._transformTextureUrl && !fallback) {\r\n        rootUrl = this._transformTextureUrl(rootUrl);\r\n    }\r\n\r\n    const extension = forcedExtension ?? GetExtensionFromUrl(rootUrl);\r\n\r\n    const loaderPromise = _GetCompatibleTextureLoader(extension);\r\n\r\n    const onInternalError = (request?: IWebRequest, exception?: any) => {\r\n        if (rootUrl === originalRootUrl) {\r\n            if (onError && request) {\r\n                onError(request.status + \" \" + request.statusText, exception);\r\n            }\r\n        } else {\r\n            // fall back to the original url if the transformed url fails to load\r\n            Logger.Warn(`Failed to load ${rootUrl}, falling back to the ${originalRootUrl}`);\r\n            this.createCubeTextureBase(\r\n                originalRootUrl,\r\n                scene,\r\n                files,\r\n                !!noMipmap,\r\n                onLoad,\r\n                onError,\r\n                format,\r\n                forcedExtension,\r\n                createPolynomials,\r\n                lodScale,\r\n                lodOffset,\r\n                texture,\r\n                beforeLoadCubeDataCallback,\r\n                imageHandler,\r\n                useSRGBBuffer,\r\n                buffer\r\n            );\r\n        }\r\n    };\r\n\r\n    if (loaderPromise) {\r\n        loaderPromise.then((loader) => {\r\n            const onloaddata = (data: ArrayBufferView | ArrayBufferView[]) => {\r\n                if (beforeLoadCubeDataCallback) {\r\n                    beforeLoadCubeDataCallback(texture, data);\r\n                }\r\n                loader.loadCubeData(data, texture, createPolynomials, onLoad, onError);\r\n            };\r\n            if (buffer) {\r\n                onloaddata(buffer);\r\n            } else if (files && files.length === 6) {\r\n                if (loader.supportCascades) {\r\n                    this._cascadeLoadFiles(scene, (images) => onloaddata(images.map((image) => new Uint8Array(image))), files, onError);\r\n                } else {\r\n                    if (onError) {\r\n                        onError(\"Textures type does not support cascades.\");\r\n                    } else {\r\n                        Logger.Warn(\"Texture loader does not support cascades.\");\r\n                    }\r\n                }\r\n            } else {\r\n                this._loadFile(rootUrl, (data) => onloaddata(new Uint8Array(data as ArrayBuffer)), undefined, undefined, true, onInternalError);\r\n            }\r\n        });\r\n    } else {\r\n        if (!files || files.length === 0) {\r\n            throw new Error(\"Cannot load cubemap because files were not defined, or the correct loader was not found.\");\r\n        }\r\n\r\n        this._cascadeLoadImgs(\r\n            scene,\r\n            texture,\r\n            (texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => {\r\n                if (imageHandler) {\r\n                    imageHandler(texture, imgs);\r\n                }\r\n            },\r\n            files,\r\n            onError\r\n        );\r\n    }\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n"],
  "mappings": "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",
  "names": ["texture"]
}
