{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/uniformBuffer.ts"],
  "sourcesContent": ["import { Logger } from \"../Misc/logger\";\r\nimport type { Nullable, FloatArray } from \"../types\";\r\nimport type { IMatrixLike, IVector3Like, IVector4Like, IColor3Like, IColor4Like } from \"../Maths/math.like\";\r\nimport type { Effect } from \"./effect\";\r\nimport type { ThinTexture } from \"../Materials/Textures/thinTexture\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport type { InternalTexture } from \"./Textures/internalTexture\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * Uniform buffer objects.\r\n *\r\n * Handles blocks of uniform on the GPU.\r\n *\r\n * If WebGL 2 is not available, this class falls back on traditional setUniformXXX calls.\r\n *\r\n * For more information, please refer to :\r\n * https://www.khronos.org/opengl/wiki/Uniform_Buffer_Object\r\n */\r\nexport class UniformBuffer {\r\n    /** @internal */\r\n    public static _UpdatedUbosInFrame: { [name: string]: number } = {};\r\n\r\n    private _engine: AbstractEngine;\r\n    private _buffer: Nullable<DataBuffer>;\r\n    private _buffers: Array<[DataBuffer, Float32Array | undefined]>;\r\n    private _bufferIndex: number;\r\n    private _createBufferOnWrite: boolean;\r\n    private _data: number[];\r\n    private _bufferData: Float32Array;\r\n    private _dynamic?: boolean;\r\n    private _uniformLocations: { [key: string]: number };\r\n    private _uniformSizes: { [key: string]: number };\r\n    private _uniformArraySizes: { [key: string]: { strideSize: number; arraySize: number } };\r\n    private _uniformLocationPointer: number;\r\n    private _needSync: boolean;\r\n    private _noUBO: boolean;\r\n    private _currentEffect: Effect;\r\n    private _currentEffectName: string;\r\n    private _name: string;\r\n    private _currentFrameId: number;\r\n\r\n    // Pool for avoiding memory leaks\r\n    private static _MAX_UNIFORM_SIZE = 256;\r\n    private static _TempBuffer = new Float32Array(UniformBuffer._MAX_UNIFORM_SIZE);\r\n    private static _TempBufferInt32View = new Int32Array(UniformBuffer._TempBuffer.buffer);\r\n    private static _TempBufferUInt32View = new Uint32Array(UniformBuffer._TempBuffer.buffer);\r\n\r\n    /**\r\n     * Lambda to Update a 3x3 Matrix in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateMatrix3x3: (name: string, matrix: Float32Array) => void;\r\n\r\n    /**\r\n     * Lambda to Update a 2x2 Matrix in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateMatrix2x2: (name: string, matrix: Float32Array) => void;\r\n\r\n    /**\r\n     * Lambda to Update a single float in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateFloat: (name: string, x: number) => void;\r\n\r\n    /**\r\n     * Lambda to Update a vec2 of float in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateFloat2: (name: string, x: number, y: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a vec3 of float in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateFloat3: (name: string, x: number, y: number, z: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a vec4 of float in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateFloat4: (name: string, x: number, y: number, z: number, w: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update an array of float in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateFloatArray: (name: string, array: Float32Array) => void;\r\n\r\n    /**\r\n     * Lambda to Update an array of number in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateArray: (name: string, array: number[]) => void;\r\n\r\n    /**\r\n     * Lambda to Update an array of number in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateIntArray: (name: string, array: Int32Array) => void;\r\n\r\n    /**\r\n     * Lambda to Update an array of number in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateUIntArray: (name: string, array: Uint32Array) => void;\r\n\r\n    /**\r\n     * Lambda to Update a 4x4 Matrix in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateMatrix: (name: string, mat: IMatrixLike) => void;\r\n\r\n    /**\r\n     * Lambda to Update an array of 4x4 Matrix in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateMatrices: (name: string, mat: Float32Array) => void;\r\n\r\n    /**\r\n     * Lambda to Update vec3 of float from a Vector in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateVector3: (name: string, vector: IVector3Like) => void;\r\n\r\n    /**\r\n     * Lambda to Update vec4 of float from a Vector in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateVector4: (name: string, vector: IVector4Like) => void;\r\n\r\n    /**\r\n     * Lambda to Update vec3 of float from a Color in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateColor3: (name: string, color: IColor3Like, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update vec4 of float from a Color in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateColor4: (name: string, color: IColor3Like, alpha: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update vec4 of float from a Color in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateDirectColor4: (name: string, color: IColor4Like, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a int a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateInt: (name: string, x: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a vec2 of int in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateInt2: (name: string, x: number, y: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a vec3 of int in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateInt3: (name: string, x: number, y: number, z: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a vec4 of int in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateInt4: (name: string, x: number, y: number, z: number, w: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a unsigned int a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateUInt: (name: string, x: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a vec2 of unsigned int in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateUInt2: (name: string, x: number, y: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a vec3 of unsigned int in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateUInt3: (name: string, x: number, y: number, z: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Lambda to Update a vec4 of unsigned int in a uniform buffer.\r\n     * This is dynamic to allow compat with webgl 1 and 2.\r\n     * You will need to pass the name of the uniform as well as the value.\r\n     */\r\n    public updateUInt4: (name: string, x: number, y: number, z: number, w: number, suffix?: string) => void;\r\n\r\n    /**\r\n     * Instantiates a new Uniform buffer objects.\r\n     *\r\n     * Handles blocks of uniform on the GPU.\r\n     *\r\n     * If WebGL 2 is not available, this class falls back on traditional setUniformXXX calls.\r\n     *\r\n     * For more information, please refer to :\r\n     * @see https://www.khronos.org/opengl/wiki/Uniform_Buffer_Object\r\n     * @param engine Define the engine the buffer is associated with\r\n     * @param data Define the data contained in the buffer\r\n     * @param dynamic Define if the buffer is updatable\r\n     * @param name to assign to the buffer (debugging purpose)\r\n     * @param forceNoUniformBuffer define that this object must not rely on UBO objects\r\n     */\r\n    constructor(engine: AbstractEngine, data?: number[], dynamic?: boolean, name?: string, forceNoUniformBuffer = false) {\r\n        this._engine = engine;\r\n        this._noUBO = !engine.supportsUniformBuffers || forceNoUniformBuffer;\r\n        this._dynamic = dynamic;\r\n        this._name = name ?? \"no-name\";\r\n\r\n        this._data = data || [];\r\n\r\n        this._uniformLocations = {};\r\n        this._uniformSizes = {};\r\n        this._uniformArraySizes = {};\r\n        this._uniformLocationPointer = 0;\r\n        this._needSync = false;\r\n\r\n        if (this._engine._features.trackUbosInFrame) {\r\n            this._buffers = [];\r\n            this._bufferIndex = -1;\r\n            this._createBufferOnWrite = false;\r\n            this._currentFrameId = 0;\r\n        }\r\n\r\n        if (this._noUBO) {\r\n            this.updateMatrix3x3 = this._updateMatrix3x3ForEffect;\r\n            this.updateMatrix2x2 = this._updateMatrix2x2ForEffect;\r\n            this.updateFloat = this._updateFloatForEffect;\r\n            this.updateFloat2 = this._updateFloat2ForEffect;\r\n            this.updateFloat3 = this._updateFloat3ForEffect;\r\n            this.updateFloat4 = this._updateFloat4ForEffect;\r\n            this.updateFloatArray = this._updateFloatArrayForEffect;\r\n            this.updateArray = this._updateArrayForEffect;\r\n            this.updateIntArray = this._updateIntArrayForEffect;\r\n            this.updateUIntArray = this._updateUIntArrayForEffect;\r\n            this.updateMatrix = this._updateMatrixForEffect;\r\n            this.updateMatrices = this._updateMatricesForEffect;\r\n            this.updateVector3 = this._updateVector3ForEffect;\r\n            this.updateVector4 = this._updateVector4ForEffect;\r\n            this.updateColor3 = this._updateColor3ForEffect;\r\n            this.updateColor4 = this._updateColor4ForEffect;\r\n            this.updateDirectColor4 = this._updateDirectColor4ForEffect;\r\n            this.updateInt = this._updateIntForEffect;\r\n            this.updateInt2 = this._updateInt2ForEffect;\r\n            this.updateInt3 = this._updateInt3ForEffect;\r\n            this.updateInt4 = this._updateInt4ForEffect;\r\n            this.updateUInt = this._updateUIntForEffect;\r\n            this.updateUInt2 = this._updateUInt2ForEffect;\r\n            this.updateUInt3 = this._updateUInt3ForEffect;\r\n            this.updateUInt4 = this._updateUInt4ForEffect;\r\n        } else {\r\n            this._engine._uniformBuffers.push(this);\r\n\r\n            this.updateMatrix3x3 = this._updateMatrix3x3ForUniform;\r\n            this.updateMatrix2x2 = this._updateMatrix2x2ForUniform;\r\n            this.updateFloat = this._updateFloatForUniform;\r\n            this.updateFloat2 = this._updateFloat2ForUniform;\r\n            this.updateFloat3 = this._updateFloat3ForUniform;\r\n            this.updateFloat4 = this._updateFloat4ForUniform;\r\n            this.updateFloatArray = this._updateFloatArrayForUniform;\r\n            this.updateArray = this._updateArrayForUniform;\r\n            this.updateIntArray = this._updateIntArrayForUniform;\r\n            this.updateUIntArray = this._updateUIntArrayForUniform;\r\n            this.updateMatrix = this._updateMatrixForUniform;\r\n            this.updateMatrices = this._updateMatricesForUniform;\r\n            this.updateVector3 = this._updateVector3ForUniform;\r\n            this.updateVector4 = this._updateVector4ForUniform;\r\n            this.updateColor3 = this._updateColor3ForUniform;\r\n            this.updateColor4 = this._updateColor4ForUniform;\r\n            this.updateDirectColor4 = this._updateDirectColor4ForUniform;\r\n            this.updateInt = this._updateIntForUniform;\r\n            this.updateInt2 = this._updateInt2ForUniform;\r\n            this.updateInt3 = this._updateInt3ForUniform;\r\n            this.updateInt4 = this._updateInt4ForUniform;\r\n            this.updateUInt = this._updateUIntForUniform;\r\n            this.updateUInt2 = this._updateUInt2ForUniform;\r\n            this.updateUInt3 = this._updateUInt3ForUniform;\r\n            this.updateUInt4 = this._updateUInt4ForUniform;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if the buffer is using the WebGL2 UBO implementation,\r\n     * or just falling back on setUniformXXX calls.\r\n     */\r\n    public get useUbo(): boolean {\r\n        return !this._noUBO;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the WebGL underlying uniform buffer is in sync\r\n     * with the javascript cache data.\r\n     */\r\n    public get isSync(): boolean {\r\n        return !this._needSync;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the WebGL underlying uniform buffer is dynamic.\r\n     * Also, a dynamic UniformBuffer will disable cache verification and always\r\n     * update the underlying WebGL uniform buffer to the GPU.\r\n     * @returns if Dynamic, otherwise false\r\n     */\r\n    public isDynamic(): boolean {\r\n        return this._dynamic !== undefined;\r\n    }\r\n\r\n    /**\r\n     * The data cache on JS side.\r\n     * @returns the underlying data as a float array\r\n     */\r\n    public getData(): Float32Array {\r\n        return this._bufferData;\r\n    }\r\n\r\n    /**\r\n     * The underlying WebGL Uniform buffer.\r\n     * @returns the webgl buffer\r\n     */\r\n    public getBuffer(): Nullable<DataBuffer> {\r\n        return this._buffer;\r\n    }\r\n\r\n    /**\r\n     * std140 layout specifies how to align data within an UBO structure.\r\n     * See https://khronos.org/registry/OpenGL/specs/gl/glspec45.core.pdf#page=159\r\n     * for specs.\r\n     * @param size\r\n     */\r\n    private _fillAlignment(size: number) {\r\n        // This code has been simplified because we only use floats, vectors of 1, 2, 3, 4 components\r\n        // and 4x4 matrices\r\n        // TODO : change if other types are used\r\n\r\n        let alignment;\r\n        if (size <= 2) {\r\n            alignment = size;\r\n        } else {\r\n            alignment = 4;\r\n        }\r\n\r\n        if (this._uniformLocationPointer % alignment !== 0) {\r\n            const oldPointer = this._uniformLocationPointer;\r\n            this._uniformLocationPointer += alignment - (this._uniformLocationPointer % alignment);\r\n            const diff = this._uniformLocationPointer - oldPointer;\r\n\r\n            for (let i = 0; i < diff; i++) {\r\n                this._data.push(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an uniform in the buffer.\r\n     * Warning : the subsequents calls of this function must be in the same order as declared in the shader\r\n     * for the layout to be correct ! The addUniform function only handles types like float, vec2, vec3, vec4, mat4,\r\n     * meaning size=1,2,3,4 or 16. It does not handle struct types.\r\n     * @param name Name of the uniform, as used in the uniform block in the shader.\r\n     * @param size Data size, or data directly.\r\n     * @param arraySize The number of elements in the array, 0 if not an array.\r\n     */\r\n    public addUniform(name: string, size: number | number[], arraySize = 0) {\r\n        if (this._noUBO) {\r\n            return;\r\n        }\r\n\r\n        if (this._uniformLocations[name] !== undefined) {\r\n            // Already existing uniform\r\n            return;\r\n        }\r\n        // This function must be called in the order of the shader layout !\r\n        // size can be the size of the uniform, or data directly\r\n        let data;\r\n\r\n        // std140 FTW...\r\n        if (arraySize > 0) {\r\n            if (size instanceof Array) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"addUniform should not be use with Array in UBO: \" + name;\r\n            }\r\n\r\n            this._fillAlignment(4);\r\n\r\n            this._uniformArraySizes[name] = { strideSize: size, arraySize };\r\n            if (size == 16) {\r\n                size = size * arraySize;\r\n            } else {\r\n                const perElementPadding = 4 - size;\r\n                const totalPadding = perElementPadding * arraySize;\r\n                size = size * arraySize + totalPadding;\r\n            }\r\n\r\n            data = [];\r\n            // Fill with zeros\r\n            for (let i = 0; i < size; i++) {\r\n                data.push(0);\r\n            }\r\n        } else {\r\n            if (size instanceof Array) {\r\n                data = size;\r\n                size = data.length;\r\n            } else {\r\n                size = <number>size;\r\n                data = [];\r\n\r\n                // Fill with zeros\r\n                for (let i = 0; i < size; i++) {\r\n                    data.push(0);\r\n                }\r\n            }\r\n            this._fillAlignment(<number>size);\r\n        }\r\n\r\n        this._uniformSizes[name] = <number>size;\r\n        this._uniformLocations[name] = this._uniformLocationPointer;\r\n        this._uniformLocationPointer += <number>size;\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            this._data.push(data[i]);\r\n        }\r\n\r\n        this._needSync = true;\r\n    }\r\n\r\n    /**\r\n     * Adds a Matrix 4x4 to the uniform buffer.\r\n     * @param name Name of the uniform, as used in the uniform block in the shader.\r\n     * @param mat A 4x4 matrix.\r\n     */\r\n    public addMatrix(name: string, mat: IMatrixLike) {\r\n        this.addUniform(name, Array.prototype.slice.call(mat.asArray()));\r\n    }\r\n\r\n    /**\r\n     * Adds a vec2 to the uniform buffer.\r\n     * @param name Name of the uniform, as used in the uniform block in the shader.\r\n     * @param x Define the x component value of the vec2\r\n     * @param y Define the y component value of the vec2\r\n     */\r\n    public addFloat2(name: string, x: number, y: number) {\r\n        const temp = [x, y];\r\n        this.addUniform(name, temp);\r\n    }\r\n\r\n    /**\r\n     * Adds a vec3 to the uniform buffer.\r\n     * @param name Name of the uniform, as used in the uniform block in the shader.\r\n     * @param x Define the x component value of the vec3\r\n     * @param y Define the y component value of the vec3\r\n     * @param z Define the z component value of the vec3\r\n     */\r\n    public addFloat3(name: string, x: number, y: number, z: number) {\r\n        const temp = [x, y, z];\r\n        this.addUniform(name, temp);\r\n    }\r\n\r\n    /**\r\n     * Adds a vec3 to the uniform buffer.\r\n     * @param name Name of the uniform, as used in the uniform block in the shader.\r\n     * @param color Define the vec3 from a Color\r\n     */\r\n    public addColor3(name: string, color: IColor3Like) {\r\n        const temp = [color.r, color.g, color.b];\r\n        this.addUniform(name, temp);\r\n    }\r\n\r\n    /**\r\n     * Adds a vec4 to the uniform buffer.\r\n     * @param name Name of the uniform, as used in the uniform block in the shader.\r\n     * @param color Define the rgb components from a Color\r\n     * @param alpha Define the a component of the vec4\r\n     */\r\n    public addColor4(name: string, color: IColor3Like, alpha: number) {\r\n        const temp = [color.r, color.g, color.b, alpha];\r\n        this.addUniform(name, temp);\r\n    }\r\n\r\n    /**\r\n     * Adds a vec3 to the uniform buffer.\r\n     * @param name Name of the uniform, as used in the uniform block in the shader.\r\n     * @param vector Define the vec3 components from a Vector\r\n     */\r\n    public addVector3(name: string, vector: IVector3Like) {\r\n        const temp = [vector.x, vector.y, vector.z];\r\n        this.addUniform(name, temp);\r\n    }\r\n\r\n    /**\r\n     * Adds a Matrix 3x3 to the uniform buffer.\r\n     * @param name Name of the uniform, as used in the uniform block in the shader.\r\n     */\r\n    public addMatrix3x3(name: string) {\r\n        this.addUniform(name, 12);\r\n    }\r\n\r\n    /**\r\n     * Adds a Matrix 2x2 to the uniform buffer.\r\n     * @param name Name of the uniform, as used in the uniform block in the shader.\r\n     */\r\n    public addMatrix2x2(name: string) {\r\n        this.addUniform(name, 8);\r\n    }\r\n\r\n    /**\r\n     * Effectively creates the WebGL Uniform Buffer, once layout is completed with `addUniform`.\r\n     */\r\n    public create(): void {\r\n        if (this._noUBO) {\r\n            return;\r\n        }\r\n        if (this._buffer) {\r\n            return; // nothing to do\r\n        }\r\n\r\n        // See spec, alignment must be filled as a vec4\r\n        this._fillAlignment(4);\r\n        this._bufferData = new Float32Array(this._data);\r\n\r\n        this._rebuild();\r\n\r\n        this._needSync = true;\r\n    }\r\n\r\n    // The result of this method is used for debugging purpose, as part of the buffer name\r\n    // It is meant to more easily know what this buffer is about when debugging\r\n    // Some buffers can have a lot of uniforms (several dozens), so the method only returns the first 10 of them\r\n    // (should be enough to understand what the buffer is for)\r\n    private _getNames() {\r\n        const names = [];\r\n        let i = 0;\r\n        for (const name in this._uniformLocations) {\r\n            names.push(name);\r\n            if (++i === 10) {\r\n                break;\r\n            }\r\n        }\r\n        return names.join(\",\");\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        if (this._noUBO || !this._bufferData) {\r\n            return;\r\n        }\r\n\r\n        if (this._dynamic) {\r\n            this._buffer = this._engine.createDynamicUniformBuffer(this._bufferData, this._name + \"_UniformList:\" + this._getNames());\r\n        } else {\r\n            this._buffer = this._engine.createUniformBuffer(this._bufferData, this._name + \"_UniformList:\" + this._getNames());\r\n        }\r\n\r\n        if (this._engine._features.trackUbosInFrame) {\r\n            this._buffers.push([this._buffer, this._engine._features.checkUbosContentBeforeUpload ? this._bufferData.slice() : undefined]);\r\n            this._bufferIndex = this._buffers.length - 1;\r\n            this._createBufferOnWrite = false;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuildAfterContextLost(): void {\r\n        if (this._engine._features.trackUbosInFrame) {\r\n            this._buffers = [];\r\n            this._currentFrameId = 0;\r\n        }\r\n        this._rebuild();\r\n    }\r\n\r\n    /** @internal */\r\n    public get _numBuffers(): number {\r\n        return this._buffers.length;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _indexBuffer(): number {\r\n        return this._bufferIndex;\r\n    }\r\n\r\n    /** Gets the name of this buffer */\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /** Gets the current effect */\r\n    public get currentEffect(): Nullable<Effect> {\r\n        return this._currentEffect;\r\n    }\r\n\r\n    private _buffersEqual(buf1: Float32Array, buf2: Float32Array): boolean {\r\n        for (let i = 0; i < buf1.length; ++i) {\r\n            if (buf1[i] !== buf2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private _copyBuffer(src: Float32Array, dst: Float32Array): void {\r\n        for (let i = 0; i < src.length; ++i) {\r\n            dst[i] = src[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the WebGL Uniform Buffer on the GPU.\r\n     * If the `dynamic` flag is set to true, no cache comparison is done.\r\n     * Otherwise, the buffer will be updated only if the cache differs.\r\n     */\r\n    public update(): void {\r\n        if (this._noUBO) {\r\n            return;\r\n        }\r\n\r\n        this.bindUniformBuffer();\r\n\r\n        if (!this._buffer) {\r\n            this.create();\r\n            return;\r\n        }\r\n\r\n        if (!this._dynamic && !this._needSync) {\r\n            this._createBufferOnWrite = this._engine._features.trackUbosInFrame;\r\n            return;\r\n        }\r\n\r\n        if (this._buffers && this._buffers.length > 1 && this._buffers[this._bufferIndex][1]) {\r\n            if (this._buffersEqual(this._bufferData, this._buffers[this._bufferIndex][1]!)) {\r\n                this._needSync = false;\r\n                this._createBufferOnWrite = this._engine._features.trackUbosInFrame;\r\n                return;\r\n            } else {\r\n                this._copyBuffer(this._bufferData, this._buffers[this._bufferIndex][1]!);\r\n            }\r\n        }\r\n\r\n        this._engine.updateUniformBuffer(this._buffer, this._bufferData);\r\n\r\n        if (this._engine._features._collectUbosUpdatedInFrame) {\r\n            if (!UniformBuffer._UpdatedUbosInFrame[this._name]) {\r\n                UniformBuffer._UpdatedUbosInFrame[this._name] = 0;\r\n            }\r\n            UniformBuffer._UpdatedUbosInFrame[this._name]++;\r\n        }\r\n\r\n        this._needSync = false;\r\n        this._createBufferOnWrite = this._engine._features.trackUbosInFrame;\r\n    }\r\n\r\n    private _createNewBuffer() {\r\n        if (this._bufferIndex + 1 < this._buffers.length) {\r\n            this._bufferIndex++;\r\n            this._buffer = this._buffers[this._bufferIndex][0];\r\n            this._createBufferOnWrite = false;\r\n            this._needSync = true;\r\n        } else {\r\n            this._rebuild();\r\n        }\r\n    }\r\n\r\n    private _checkNewFrame(): void {\r\n        if (this._engine._features.trackUbosInFrame && this._currentFrameId !== this._engine.frameId) {\r\n            this._currentFrameId = this._engine.frameId;\r\n            this._createBufferOnWrite = false;\r\n            if (this._buffers && this._buffers.length > 0) {\r\n                this._needSync = this._bufferIndex !== 0;\r\n                this._bufferIndex = 0;\r\n                this._buffer = this._buffers[this._bufferIndex][0];\r\n            } else {\r\n                this._bufferIndex = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the value of an uniform. The `update` method must be called afterwards to make it effective in the GPU.\r\n     * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.\r\n     * @param data Define the flattened data\r\n     * @param size Define the size of the data.\r\n     */\r\n    public updateUniform(uniformName: string, data: FloatArray, size: number) {\r\n        this._checkNewFrame();\r\n\r\n        let location = this._uniformLocations[uniformName];\r\n        if (location === undefined) {\r\n            if (this._buffer) {\r\n                // Cannot add an uniform if the buffer is already created\r\n                Logger.Error(\"Cannot add an uniform after UBO has been created. uniformName=\" + uniformName);\r\n                return;\r\n            }\r\n            this.addUniform(uniformName, size);\r\n            location = this._uniformLocations[uniformName];\r\n        }\r\n\r\n        if (!this._buffer) {\r\n            this.create();\r\n        }\r\n\r\n        if (!this._dynamic) {\r\n            // Cache for static uniform buffers\r\n            let changed = false;\r\n\r\n            for (let i = 0; i < size; i++) {\r\n                // We are checking the matrix cache before calling updateUniform so we do not need to check it here\r\n                // Hence the test for size === 16 to simply commit the matrix values\r\n                if ((size === 16 && !this._engine._features.uniformBufferHardCheckMatrix) || this._bufferData[location + i] !== Math.fround(data[i])) {\r\n                    changed = true;\r\n                    if (this._createBufferOnWrite) {\r\n                        this._createNewBuffer();\r\n                    }\r\n                    this._bufferData[location + i] = data[i];\r\n                }\r\n            }\r\n\r\n            this._needSync = this._needSync || changed;\r\n        } else {\r\n            // No cache for dynamic\r\n            for (let i = 0; i < size; i++) {\r\n                this._bufferData[location + i] = data[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the value of an uniform. The `update` method must be called afterwards to make it effective in the GPU.\r\n     * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.\r\n     * @param data Define the flattened data\r\n     * @param size Define the size of the data.\r\n     */\r\n    public updateUniformArray(uniformName: string, data: FloatArray, size: number) {\r\n        this._checkNewFrame();\r\n\r\n        const location = this._uniformLocations[uniformName];\r\n        if (location === undefined) {\r\n            Logger.Error(\"Cannot add an uniform Array dynamically. Please, add it using addUniform and make sure that uniform buffers are supported by the current engine.\");\r\n            return;\r\n        }\r\n\r\n        if (!this._buffer) {\r\n            this.create();\r\n        }\r\n\r\n        const arraySizes = this._uniformArraySizes[uniformName];\r\n\r\n        if (!this._dynamic) {\r\n            // Cache for static uniform buffers\r\n            let changed = false;\r\n            let countToFour = 0;\r\n            let baseStride = 0;\r\n            for (let i = 0; i < size; i++) {\r\n                if (this._bufferData[location + baseStride * 4 + countToFour] !== Tools.FloatRound(data[i])) {\r\n                    changed = true;\r\n                    if (this._createBufferOnWrite) {\r\n                        this._createNewBuffer();\r\n                    }\r\n                    this._bufferData[location + baseStride * 4 + countToFour] = data[i];\r\n                }\r\n                countToFour++;\r\n                if (countToFour === arraySizes.strideSize) {\r\n                    for (; countToFour < 4; countToFour++) {\r\n                        this._bufferData[location + baseStride * 4 + countToFour] = 0;\r\n                    }\r\n                    countToFour = 0;\r\n                    baseStride++;\r\n                }\r\n            }\r\n\r\n            this._needSync = this._needSync || changed;\r\n        } else {\r\n            // No cache for dynamic\r\n            for (let i = 0; i < size; i++) {\r\n                this._bufferData[location + i] = data[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Matrix cache\r\n    private _valueCache: { [key: string]: number } = {};\r\n    private _cacheMatrix(name: string, matrix: IMatrixLike): boolean {\r\n        this._checkNewFrame();\r\n\r\n        const cache = this._valueCache[name];\r\n        const flag = matrix.updateFlag;\r\n        if (cache !== undefined && cache === flag) {\r\n            return false;\r\n        }\r\n\r\n        this._valueCache[name] = flag;\r\n        return true;\r\n    }\r\n\r\n    // Update methods\r\n\r\n    private _updateMatrix3x3ForUniform(name: string, matrix: Float32Array): void {\r\n        // To match std140, matrix must be realigned\r\n        for (let i = 0; i < 3; i++) {\r\n            UniformBuffer._TempBuffer[i * 4] = matrix[i * 3];\r\n            UniformBuffer._TempBuffer[i * 4 + 1] = matrix[i * 3 + 1];\r\n            UniformBuffer._TempBuffer[i * 4 + 2] = matrix[i * 3 + 2];\r\n            UniformBuffer._TempBuffer[i * 4 + 3] = 0.0;\r\n        }\r\n\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 12);\r\n    }\r\n\r\n    private _updateMatrix3x3ForEffect(name: string, matrix: Float32Array): void {\r\n        this._currentEffect.setMatrix3x3(name, matrix);\r\n    }\r\n\r\n    private _updateMatrix2x2ForEffect(name: string, matrix: Float32Array): void {\r\n        this._currentEffect.setMatrix2x2(name, matrix);\r\n    }\r\n\r\n    private _updateMatrix2x2ForUniform(name: string, matrix: Float32Array): void {\r\n        // To match std140, matrix must be realigned\r\n        for (let i = 0; i < 2; i++) {\r\n            UniformBuffer._TempBuffer[i * 4] = matrix[i * 2];\r\n            UniformBuffer._TempBuffer[i * 4 + 1] = matrix[i * 2 + 1];\r\n            UniformBuffer._TempBuffer[i * 4 + 2] = 0.0;\r\n            UniformBuffer._TempBuffer[i * 4 + 3] = 0.0;\r\n        }\r\n\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 8);\r\n    }\r\n\r\n    private _updateFloatForEffect(name: string, x: number) {\r\n        this._currentEffect.setFloat(name, x);\r\n    }\r\n\r\n    private _updateFloatForUniform(name: string, x: number) {\r\n        UniformBuffer._TempBuffer[0] = x;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 1);\r\n    }\r\n\r\n    private _updateFloat2ForEffect(name: string, x: number, y: number, suffix = \"\") {\r\n        this._currentEffect.setFloat2(name + suffix, x, y);\r\n    }\r\n\r\n    private _updateFloat2ForUniform(name: string, x: number, y: number) {\r\n        UniformBuffer._TempBuffer[0] = x;\r\n        UniformBuffer._TempBuffer[1] = y;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 2);\r\n    }\r\n\r\n    private _updateFloat3ForEffect(name: string, x: number, y: number, z: number, suffix = \"\") {\r\n        this._currentEffect.setFloat3(name + suffix, x, y, z);\r\n    }\r\n\r\n    private _updateFloat3ForUniform(name: string, x: number, y: number, z: number) {\r\n        UniformBuffer._TempBuffer[0] = x;\r\n        UniformBuffer._TempBuffer[1] = y;\r\n        UniformBuffer._TempBuffer[2] = z;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\r\n    }\r\n\r\n    private _updateFloat4ForEffect(name: string, x: number, y: number, z: number, w: number, suffix = \"\") {\r\n        this._currentEffect.setFloat4(name + suffix, x, y, z, w);\r\n    }\r\n\r\n    private _updateFloat4ForUniform(name: string, x: number, y: number, z: number, w: number) {\r\n        UniformBuffer._TempBuffer[0] = x;\r\n        UniformBuffer._TempBuffer[1] = y;\r\n        UniformBuffer._TempBuffer[2] = z;\r\n        UniformBuffer._TempBuffer[3] = w;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\r\n    }\r\n\r\n    private _updateFloatArrayForEffect(name: string, array: Float32Array) {\r\n        this._currentEffect.setFloatArray(name, array);\r\n    }\r\n\r\n    private _updateFloatArrayForUniform(name: string, array: Float32Array) {\r\n        this.updateUniformArray(name, array, array.length);\r\n    }\r\n\r\n    private _updateArrayForEffect(name: string, array: number[]) {\r\n        this._currentEffect.setArray(name, array);\r\n    }\r\n\r\n    private _updateArrayForUniform(name: string, array: number[]) {\r\n        this.updateUniformArray(name, array, array.length);\r\n    }\r\n\r\n    private _updateIntArrayForEffect(name: string, array: Int32Array) {\r\n        this._currentEffect.setIntArray(name, array);\r\n    }\r\n\r\n    private _updateIntArrayForUniform(name: string, array: Int32Array) {\r\n        UniformBuffer._TempBufferInt32View.set(array);\r\n        this.updateUniformArray(name, UniformBuffer._TempBuffer, array.length);\r\n    }\r\n\r\n    private _updateUIntArrayForEffect(name: string, array: Uint32Array) {\r\n        this._currentEffect.setUIntArray(name, array);\r\n    }\r\n\r\n    private _updateUIntArrayForUniform(name: string, array: Uint32Array) {\r\n        UniformBuffer._TempBufferUInt32View.set(array);\r\n        this.updateUniformArray(name, UniformBuffer._TempBuffer, array.length);\r\n    }\r\n\r\n    private _updateMatrixForEffect(name: string, mat: IMatrixLike) {\r\n        this._currentEffect.setMatrix(name, mat);\r\n    }\r\n\r\n    private _updateMatrixForUniform(name: string, mat: IMatrixLike) {\r\n        if (this._cacheMatrix(name, mat)) {\r\n            this.updateUniform(name, <any>mat.asArray(), 16);\r\n        }\r\n    }\r\n\r\n    private _updateMatricesForEffect(name: string, mat: Float32Array) {\r\n        this._currentEffect.setMatrices(name, mat);\r\n    }\r\n\r\n    private _updateMatricesForUniform(name: string, mat: Float32Array) {\r\n        this.updateUniform(name, mat, mat.length);\r\n    }\r\n\r\n    private _updateVector3ForEffect(name: string, vector: IVector3Like) {\r\n        this._currentEffect.setVector3(name, vector);\r\n    }\r\n\r\n    private _updateVector3ForUniform(name: string, vector: IVector3Like) {\r\n        UniformBuffer._TempBuffer[0] = vector.x;\r\n        UniformBuffer._TempBuffer[1] = vector.y;\r\n        UniformBuffer._TempBuffer[2] = vector.z;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\r\n    }\r\n\r\n    private _updateVector4ForEffect(name: string, vector: IVector4Like) {\r\n        this._currentEffect.setVector4(name, vector);\r\n    }\r\n\r\n    private _updateVector4ForUniform(name: string, vector: IVector4Like) {\r\n        UniformBuffer._TempBuffer[0] = vector.x;\r\n        UniformBuffer._TempBuffer[1] = vector.y;\r\n        UniformBuffer._TempBuffer[2] = vector.z;\r\n        UniformBuffer._TempBuffer[3] = vector.w;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\r\n    }\r\n\r\n    private _updateColor3ForEffect(name: string, color: IColor3Like, suffix = \"\") {\r\n        this._currentEffect.setColor3(name + suffix, color);\r\n    }\r\n\r\n    private _updateColor3ForUniform(name: string, color: IColor3Like) {\r\n        UniformBuffer._TempBuffer[0] = color.r;\r\n        UniformBuffer._TempBuffer[1] = color.g;\r\n        UniformBuffer._TempBuffer[2] = color.b;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\r\n    }\r\n\r\n    private _updateColor4ForEffect(name: string, color: IColor3Like, alpha: number, suffix = \"\") {\r\n        this._currentEffect.setColor4(name + suffix, color, alpha);\r\n    }\r\n\r\n    private _updateDirectColor4ForEffect(name: string, color: IColor4Like, suffix = \"\") {\r\n        this._currentEffect.setDirectColor4(name + suffix, color);\r\n    }\r\n\r\n    private _updateColor4ForUniform(name: string, color: IColor3Like, alpha: number) {\r\n        UniformBuffer._TempBuffer[0] = color.r;\r\n        UniformBuffer._TempBuffer[1] = color.g;\r\n        UniformBuffer._TempBuffer[2] = color.b;\r\n        UniformBuffer._TempBuffer[3] = alpha;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\r\n    }\r\n\r\n    private _updateDirectColor4ForUniform(name: string, color: IColor4Like) {\r\n        UniformBuffer._TempBuffer[0] = color.r;\r\n        UniformBuffer._TempBuffer[1] = color.g;\r\n        UniformBuffer._TempBuffer[2] = color.b;\r\n        UniformBuffer._TempBuffer[3] = color.a;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\r\n    }\r\n\r\n    private _updateIntForEffect(name: string, x: number, suffix = \"\") {\r\n        this._currentEffect.setInt(name + suffix, x);\r\n    }\r\n\r\n    private _updateIntForUniform(name: string, x: number) {\r\n        UniformBuffer._TempBufferInt32View[0] = x;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 1);\r\n    }\r\n\r\n    private _updateInt2ForEffect(name: string, x: number, y: number, suffix = \"\") {\r\n        this._currentEffect.setInt2(name + suffix, x, y);\r\n    }\r\n\r\n    private _updateInt2ForUniform(name: string, x: number, y: number) {\r\n        UniformBuffer._TempBufferInt32View[0] = x;\r\n        UniformBuffer._TempBufferInt32View[1] = y;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 2);\r\n    }\r\n\r\n    private _updateInt3ForEffect(name: string, x: number, y: number, z: number, suffix = \"\") {\r\n        this._currentEffect.setInt3(name + suffix, x, y, z);\r\n    }\r\n\r\n    private _updateInt3ForUniform(name: string, x: number, y: number, z: number) {\r\n        UniformBuffer._TempBufferInt32View[0] = x;\r\n        UniformBuffer._TempBufferInt32View[1] = y;\r\n        UniformBuffer._TempBufferInt32View[2] = z;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\r\n    }\r\n\r\n    private _updateInt4ForEffect(name: string, x: number, y: number, z: number, w: number, suffix = \"\") {\r\n        this._currentEffect.setInt4(name + suffix, x, y, z, w);\r\n    }\r\n\r\n    private _updateInt4ForUniform(name: string, x: number, y: number, z: number, w: number) {\r\n        UniformBuffer._TempBufferInt32View[0] = x;\r\n        UniformBuffer._TempBufferInt32View[1] = y;\r\n        UniformBuffer._TempBufferInt32View[2] = z;\r\n        UniformBuffer._TempBufferInt32View[3] = w;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\r\n    }\r\n\r\n    private _updateUIntForEffect(name: string, x: number, suffix = \"\") {\r\n        this._currentEffect.setUInt(name + suffix, x);\r\n    }\r\n\r\n    private _updateUIntForUniform(name: string, x: number) {\r\n        UniformBuffer._TempBufferUInt32View[0] = x;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 1);\r\n    }\r\n\r\n    private _updateUInt2ForEffect(name: string, x: number, y: number, suffix = \"\") {\r\n        this._currentEffect.setUInt2(name + suffix, x, y);\r\n    }\r\n\r\n    private _updateUInt2ForUniform(name: string, x: number, y: number) {\r\n        UniformBuffer._TempBufferUInt32View[0] = x;\r\n        UniformBuffer._TempBufferUInt32View[1] = y;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 2);\r\n    }\r\n\r\n    private _updateUInt3ForEffect(name: string, x: number, y: number, z: number, suffix = \"\") {\r\n        this._currentEffect.setUInt3(name + suffix, x, y, z);\r\n    }\r\n\r\n    private _updateUInt3ForUniform(name: string, x: number, y: number, z: number) {\r\n        UniformBuffer._TempBufferUInt32View[0] = x;\r\n        UniformBuffer._TempBufferUInt32View[1] = y;\r\n        UniformBuffer._TempBufferUInt32View[2] = z;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\r\n    }\r\n\r\n    private _updateUInt4ForEffect(name: string, x: number, y: number, z: number, w: number, suffix = \"\") {\r\n        this._currentEffect.setUInt4(name + suffix, x, y, z, w);\r\n    }\r\n\r\n    private _updateUInt4ForUniform(name: string, x: number, y: number, z: number, w: number) {\r\n        UniformBuffer._TempBufferUInt32View[0] = x;\r\n        UniformBuffer._TempBufferUInt32View[1] = y;\r\n        UniformBuffer._TempBufferUInt32View[2] = z;\r\n        UniformBuffer._TempBufferUInt32View[3] = w;\r\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\r\n    }\r\n\r\n    /**\r\n     * Sets a sampler uniform on the effect.\r\n     * @param name Define the name of the sampler.\r\n     * @param texture Define the texture to set in the sampler\r\n     */\r\n    public setTexture(name: string, texture: Nullable<ThinTexture>) {\r\n        this._currentEffect.setTexture(name, texture);\r\n    }\r\n\r\n    /**\r\n     * Sets an array of sampler uniforms on the effect.\r\n     * @param name Define the name of uniform.\r\n     * @param textures Define the textures to set in the array of samplers\r\n     */\r\n    public setTextureArray(name: string, textures: ThinTexture[]) {\r\n        this._currentEffect.setTextureArray(name, textures);\r\n    }\r\n    /**\r\n     * Sets a sampler uniform on the effect.\r\n     * @param name Define the name of the sampler.\r\n     * @param texture Define the (internal) texture to set in the sampler\r\n     */\r\n    public bindTexture(name: string, texture: Nullable<InternalTexture>) {\r\n        this._currentEffect._bindTexture(name, texture);\r\n    }\r\n\r\n    /**\r\n     * Directly updates the value of the uniform in the cache AND on the GPU.\r\n     * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.\r\n     * @param data Define the flattened data\r\n     */\r\n    public updateUniformDirectly(uniformName: string, data: FloatArray) {\r\n        this.updateUniform(uniformName, data, data.length);\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Associates an effect to this uniform buffer\r\n     * @param effect Define the effect to associate the buffer to\r\n     * @param name Name of the uniform block in the shader.\r\n     */\r\n    public bindToEffect(effect: Effect, name: string): void {\r\n        this._currentEffect = effect;\r\n        this._currentEffectName = name;\r\n    }\r\n\r\n    /**\r\n     * Binds the current (GPU) buffer to the effect\r\n     */\r\n    public bindUniformBuffer(): void {\r\n        if (!this._noUBO && this._buffer && this._currentEffect) {\r\n            this._currentEffect.bindUniformBuffer(this._buffer, this._currentEffectName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dissociates the current effect from this uniform buffer\r\n     */\r\n    public unbindEffect(): void {\r\n        this._currentEffect = undefined as any;\r\n        this._currentEffectName = undefined as any;\r\n    }\r\n\r\n    /**\r\n     * Sets the current state of the class (_bufferIndex, _buffer) to point to the data buffer passed in parameter if this buffer is one of the buffers handled by the class (meaning if it can be found in the _buffers array)\r\n     * This method is meant to be able to update a buffer at any time: just call setDataBuffer to set the class in the right state, call some updateXXX methods and then call udpate() => that will update the GPU buffer on the graphic card\r\n     * @param dataBuffer buffer to look for\r\n     * @returns true if the buffer has been found and the class internal state points to it, else false\r\n     */\r\n    public setDataBuffer(dataBuffer: DataBuffer): boolean {\r\n        if (!this._buffers) {\r\n            return this._buffer === dataBuffer;\r\n        }\r\n\r\n        for (let b = 0; b < this._buffers.length; ++b) {\r\n            const buffer = this._buffers[b];\r\n            if (buffer[0] === dataBuffer) {\r\n                this._bufferIndex = b;\r\n                this._buffer = dataBuffer;\r\n                this._createBufferOnWrite = false;\r\n                this._currentEffect = undefined as any;\r\n                // The following line prevents the current buffer (_buffer / _bufferIndex) from being updated during subsequent calls to updateXXX() due to a call to _checkNewFrame()\r\n                // If we called setDataBuffer, it means that we want to update the buffer we just defined and not another one (_checkNewFrame() can modify the current buffer).\r\n                this._currentFrameId = this._engine.frameId;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the uniform buffer.\r\n     */\r\n    public dispose(): void {\r\n        if (this._noUBO) {\r\n            return;\r\n        }\r\n\r\n        const uniformBuffers = this._engine._uniformBuffers;\r\n        const index = uniformBuffers.indexOf(this);\r\n\r\n        if (index !== -1) {\r\n            uniformBuffers[index] = uniformBuffers[uniformBuffers.length - 1];\r\n            uniformBuffers.pop();\r\n        }\r\n\r\n        if (this._engine._features.trackUbosInFrame && this._buffers) {\r\n            for (let i = 0; i < this._buffers.length; ++i) {\r\n                const buffer = this._buffers[i][0];\r\n                this._engine._releaseBuffer(buffer!);\r\n            }\r\n        } else if (this._buffer && this._engine._releaseBuffer(this._buffer)) {\r\n            this._buffer = null;\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
