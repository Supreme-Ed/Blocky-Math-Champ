import {
  init_imageProcessingDeclaration
} from "./chunk-DZTKG5EM.js";
import {
  init_imageProcessingFunctions
} from "./chunk-B2L22N5N.js";
import {
  init_logDepthFragment
} from "./chunk-OJENSRJA.js";
import {
  init_fogFragment
} from "./chunk-L7XMVAYQ.js";
import {
  init_clipPlaneFragment
} from "./chunk-34ARFYNC.js";
import {
  init_clipPlaneFragmentDeclaration
} from "./chunk-7IS4JLSR.js";
import {
  init_fogFragmentDeclaration
} from "./chunk-5UXNSIA4.js";
import {
  init_logDepthDeclaration
} from "./chunk-K3XAGB54.js";
import {
  init_helperFunctions
} from "./chunk-W4QLV37H.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/ShadersWGSL/particles.fragment.js
var name, shader, particlesPixelShaderWGSL;
var init_particles_fragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/particles.fragment.js"() {
    init_shaderStore();
    init_clipPlaneFragmentDeclaration();
    init_imageProcessingDeclaration();
    init_logDepthDeclaration();
    init_helperFunctions();
    init_imageProcessingFunctions();
    init_fogFragmentDeclaration();
    init_clipPlaneFragment();
    init_logDepthFragment();
    init_fogFragment();
    name = "particlesPixelShader";
    shader = `varying vUV: vec2f;varying vColor: vec4f;uniform textureMask: vec4f;var diffuseSamplerSampler: sampler;var diffuseSampler: texture_2d<f32>;
#include<clipPlaneFragmentDeclaration>
#include<imageProcessingDeclaration>
#include<logDepthDeclaration>
#include<helperFunctions>
#include<imageProcessingFunctions>
#ifdef RAMPGRADIENT
varying remapRanges: vec4f;var rampSamplerSampler: sampler;var rampSampler: texture_2d<f32>;
#endif
#include<fogFragmentDeclaration>
#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs)->FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
#include<clipPlaneFragment>
var textureColor: vec4f=textureSample(diffuseSampler,diffuseSamplerSampler,input.vUV);var baseColor: vec4f=(textureColor*uniforms.textureMask+( vec4f(1.,1.,1.,1.)-uniforms.textureMask))*input.vColor;
#ifdef RAMPGRADIENT
var alpha: f32=baseColor.a;var remappedColorIndex: f32=clamp((alpha-input.remapRanges.x)/input.remapRanges.y,0.0,1.0);var rampColor: vec4f=textureSample(rampSampler,rampSamplerSampler,vec2f(1.0-remappedColorIndex,0.));baseColor=vec4f(baseColor.rgb*rampColor.rgb,baseColor.a);var finalAlpha: f32=baseColor.a;baseColor.a=clamp((alpha*rampColor.a-input.remapRanges.z)/input.remapRanges.w,0.0,1.0);
#endif
#ifdef BLENDMULTIPLYMODE
var sourceAlpha: f32=input.vColor.a*textureColor.a;baseColor=vec4f(baseColor.rgb*sourceAlpha+ vec3f(1.0)*(1.0-sourceAlpha),baseColor.a);
#endif
#include<logDepthFragment>
#include<fogFragment>(color,baseColor)
#ifdef IMAGEPROCESSINGPOSTPROCESS
baseColor=vec4f(toLinearSpaceVec3(baseColor.rgb),baseColor.a);
#else
#ifdef IMAGEPROCESSING
baseColor=vec4f(toLinearSpaceVec3(baseColor.rgb),baseColor.a);baseColor=applyImageProcessing(baseColor);
#endif
#endif
fragmentOutputs.color=baseColor;
#define CUSTOM_FRAGMENT_MAIN_END
}`;
    if (!ShaderStore.ShadersStoreWGSL[name]) {
      ShaderStore.ShadersStoreWGSL[name] = shader;
    }
    particlesPixelShaderWGSL = { name, shader };
  }
});

export {
  particlesPixelShaderWGSL,
  init_particles_fragment
};
//# sourceMappingURL=chunk-YYUEGPNL.js.map
