import {
  FlowGraphBlock,
  RichTypeAny,
  RichTypeBoolean,
  init_flowGraphBlock,
  init_flowGraphRichTypes
} from "./chunk-I4L6YYX4.js";
import {
  RegisterClass,
  init_typeStore
} from "./chunk-D6A73UHJ.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/flowGraphConditionalDataBlock.js
var FlowGraphConditionalDataBlock;
var init_flowGraphConditionalDataBlock = __esm({
  "node_modules/@babylonjs/core/FlowGraph/Blocks/Data/flowGraphConditionalDataBlock.js"() {
    init_flowGraphBlock();
    init_flowGraphRichTypes();
    init_typeStore();
    FlowGraphConditionalDataBlock = class extends FlowGraphBlock {
      /**
       * Creates a new instance of the block
       * @param config optional configuration for this block
       */
      constructor(config) {
        super(config);
        this.condition = this.registerDataInput("condition", RichTypeBoolean);
        this.onTrue = this.registerDataInput("onTrue", RichTypeAny);
        this.onFalse = this.registerDataInput("onFalse", RichTypeAny);
        this.output = this.registerDataOutput("output", RichTypeAny);
      }
      /**
       * @internal
       */
      _updateOutputs(context) {
        const condition = this.condition.getValue(context);
        this.output.setValue(condition ? this.onTrue.getValue(context) : this.onFalse.getValue(context), context);
      }
      /**
       * Gets the class name of this block
       * @returns the class name
       */
      getClassName() {
        return "FlowGraphConditionalBlock";
      }
    };
    RegisterClass("FlowGraphConditionalBlock", FlowGraphConditionalDataBlock);
  }
});

export {
  FlowGraphConditionalDataBlock,
  init_flowGraphConditionalDataBlock
};
//# sourceMappingURL=chunk-XOTRDWVV.js.map
