import {
  FlowGraphBlock,
  FlowGraphInteger,
  RichTypeAny,
  RichTypeFlowGraphInteger,
  init_flowGraphBlock,
  init_flowGraphInteger,
  init_flowGraphRichTypes
} from "./chunk-I4L6YYX4.js";
import {
  RegisterClass,
  init_typeStore
} from "./chunk-D6A73UHJ.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/Utils/flowGraphIndexOfBlock.js
var FlowGraphIndexOfBlock;
var init_flowGraphIndexOfBlock = __esm({
  "node_modules/@babylonjs/core/FlowGraph/Blocks/Data/Utils/flowGraphIndexOfBlock.js"() {
    init_flowGraphBlock();
    init_flowGraphRichTypes();
    init_typeStore();
    init_flowGraphInteger();
    FlowGraphIndexOfBlock = class extends FlowGraphBlock {
      /**
       * Construct a FlowGraphIndexOfBlock.
       * @param config construction parameters
       */
      constructor(config) {
        super(config);
        this.config = config;
        this.object = this.registerDataInput("object", RichTypeAny);
        this.array = this.registerDataInput("array", RichTypeAny);
        this.index = this.registerDataOutput("index", RichTypeFlowGraphInteger, new FlowGraphInteger(-1));
      }
      /**
       * @internal
       */
      _updateOutputs(context) {
        const object = this.object.getValue(context);
        const array = this.array.getValue(context);
        if (array) {
          this.index.setValue(new FlowGraphInteger(array.indexOf(object)), context);
        }
      }
      /**
       * Serializes this block
       * @param serializationObject the object to serialize to
       */
      serialize(serializationObject) {
        super.serialize(serializationObject);
      }
      getClassName() {
        return "FlowGraphIndexOfBlock";
      }
    };
    RegisterClass("FlowGraphIndexOfBlock", FlowGraphIndexOfBlock);
  }
});

export {
  FlowGraphIndexOfBlock,
  init_flowGraphIndexOfBlock
};
//# sourceMappingURL=chunk-VMUNQSRA.js.map
