{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphMathCombineExtractBlocks.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport { FlowGraphCachedOperationBlock } from \"../flowGraphCachedOperationBlock\";\nimport {\n    RichTypeMatrix,\n    RichTypeMatrix2D,\n    RichTypeMatrix3D,\n    RichTypeNumber,\n    RichTypeVector2,\n    RichTypeVector3,\n    RichTypeVector4,\n    type RichType,\n} from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlock, type IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { Matrix, Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\nimport type { Nullable } from \"core/types\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"core/FlowGraph/CustomTypes/flowGraphMatrix\";\n\nabstract class FlowGraphMathCombineBlock<ResultT> extends FlowGraphCachedOperationBlock<ResultT> {\n    /**\n     * Base class for blocks that combine multiple numeric inputs into a single result.\n     * Handles registering data inputs and managing cached outputs.\n     * @param numberOfInputs The number of input values to combine.\n     * @param type The type of the result.\n     * @param config The block configuration.\n     */\n    constructor(numberOfInputs: number, type: RichType<ResultT>, config?: IFlowGraphBlockConfiguration) {\n        super(type, config);\n        for (let i = 0; i < numberOfInputs; i++) {\n            this.registerDataInput(`input_${i}`, RichTypeNumber, 0);\n        }\n    }\n}\n\n/**\n * Abstract class representing a flow graph block that extracts multiple outputs from a single input.\n */\nabstract class FlowGraphMathExtractBlock<InputT> extends FlowGraphBlock {\n    /**\n     * Creates an instance of FlowGraphMathExtractBlock.\n     *\n     * @param numberOfOutputs - The number of outputs to be extracted from the input.\n     * @param type - The type of the input data.\n     * @param config - Optional configuration for the flow graph block.\n     */\n    constructor(numberOfOutputs: number, type: RichType<InputT>, config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.registerDataInput(\"input\", type);\n        for (let i = 0; i < numberOfOutputs; i++) {\n            this.registerDataOutput(`output_${i}`, RichTypeNumber, 0);\n        }\n    }\n}\n/**\n * Combines two floats into a new Vector2\n */\nexport class FlowGraphCombineVector2Block extends FlowGraphMathCombineBlock<Vector2> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(2, RichTypeVector2, config);\n    }\n\n    /**\n     * @internal\n     * Combines two floats into a new Vector2\n     */\n    public override _doOperation(context: FlowGraphContext): Vector2 {\n        if (!context._hasExecutionVariable(this, \"cachedVector\")) {\n            context._setExecutionVariable(this, \"cachedVector\", new Vector2());\n        }\n        const vector = context._getExecutionVariable<Nullable<Vector2>>(this, \"cachedVector\", null) as Vector2;\n        vector.set(this.getDataInput(\"input_0\")!.getValue(context), this.getDataInput(\"input_1\")!.getValue(context));\n        return vector;\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CombineVector2;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.CombineVector2, FlowGraphCombineVector2Block);\n\n/**\n * Combines three floats into a new Vector3\n */\nexport class FlowGraphCombineVector3Block extends FlowGraphMathCombineBlock<Vector3> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(3, RichTypeVector3, config);\n    }\n\n    public override _doOperation(context: FlowGraphContext): Vector3 {\n        if (!context._hasExecutionVariable(this, \"cachedVector\")) {\n            context._setExecutionVariable(this, \"cachedVector\", new Vector3());\n        }\n        const vector = context._getExecutionVariable<Nullable<Vector3>>(this, \"cachedVector\", null) as Vector3;\n        vector.set(this.getDataInput(\"input_0\")!.getValue(context), this.getDataInput(\"input_1\")!.getValue(context), this.getDataInput(\"input_2\")!.getValue(context));\n        return vector;\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CombineVector3;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.CombineVector3, FlowGraphCombineVector3Block);\n\n/**\n * Combines four floats into a new Vector4\n */\nexport class FlowGraphCombineVector4Block extends FlowGraphMathCombineBlock<Vector4> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(4, RichTypeVector4, config);\n    }\n\n    public override _doOperation(context: FlowGraphContext): Vector4 {\n        if (!context._hasExecutionVariable(this, \"cachedVector\")) {\n            context._setExecutionVariable(this, \"cachedVector\", new Vector4());\n        }\n        const vector = context._getExecutionVariable<Nullable<Vector4>>(this, \"cachedVector\", null) as Vector4;\n        vector.set(\n            this.getDataInput(\"input_0\")!.getValue(context),\n            this.getDataInput(\"input_1\")!.getValue(context),\n            this.getDataInput(\"input_2\")!.getValue(context),\n            this.getDataInput(\"input_3\")!.getValue(context)\n        );\n        return vector;\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CombineVector4;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.CombineVector4, FlowGraphCombineVector4Block);\n\n/**\n * Configuration for the matrix combine blocks.\n */\nexport interface IFlowGraphCombineMatrixBlockConfiguration extends IFlowGraphBlockConfiguration {\n    /**\n     * Whether the input is in column-major order. Default is false.\n     * Note - Babylon's matrix is the same as WebGL's. So unless your matrix requires transformation, you should leave this as false.\n     */\n    inputIsColumnMajor?: boolean;\n}\n\n/**\n * Combines 16 floats into a new Matrix\n *\n * Note that glTF interactivity's combine4x4 uses column-major order, while Babylon.js uses row-major order.\n */\nexport class FlowGraphCombineMatrixBlock extends FlowGraphMathCombineBlock<Matrix> {\n    constructor(config?: IFlowGraphCombineMatrixBlockConfiguration) {\n        super(16, RichTypeMatrix, config);\n    }\n\n    public override _doOperation(context: FlowGraphContext): Matrix {\n        if (!context._hasExecutionVariable(this, \"cachedMatrix\")) {\n            context._setExecutionVariable(this, \"cachedMatrix\", new Matrix());\n        }\n        const matrix = context._getExecutionVariable<Nullable<Matrix>>(this, \"cachedMatrix\", null) as Matrix;\n        if (this.config?.inputIsColumnMajor) {\n            matrix.set(\n                this.getDataInput(\"input_0\")!.getValue(context),\n                this.getDataInput(\"input_4\")!.getValue(context),\n                this.getDataInput(\"input_8\")!.getValue(context),\n                this.getDataInput(\"input_12\")!.getValue(context),\n                this.getDataInput(\"input_1\")!.getValue(context),\n                this.getDataInput(\"input_5\")!.getValue(context),\n                this.getDataInput(\"input_9\")!.getValue(context),\n                this.getDataInput(\"input_13\")!.getValue(context),\n                this.getDataInput(\"input_2\")!.getValue(context),\n                this.getDataInput(\"input_6\")!.getValue(context),\n                this.getDataInput(\"input_10\")!.getValue(context),\n                this.getDataInput(\"input_14\")!.getValue(context),\n                this.getDataInput(\"input_3\")!.getValue(context),\n                this.getDataInput(\"input_7\")!.getValue(context),\n                this.getDataInput(\"input_11\")!.getValue(context),\n                this.getDataInput(\"input_15\")!.getValue(context)\n            );\n        } else {\n            matrix.set(\n                this.getDataInput(\"input_0\")!.getValue(context),\n                this.getDataInput(\"input_1\")!.getValue(context),\n                this.getDataInput(\"input_2\")!.getValue(context),\n                this.getDataInput(\"input_3\")!.getValue(context),\n                this.getDataInput(\"input_4\")!.getValue(context),\n                this.getDataInput(\"input_5\")!.getValue(context),\n                this.getDataInput(\"input_6\")!.getValue(context),\n                this.getDataInput(\"input_7\")!.getValue(context),\n                this.getDataInput(\"input_8\")!.getValue(context),\n                this.getDataInput(\"input_9\")!.getValue(context),\n                this.getDataInput(\"input_10\")!.getValue(context),\n                this.getDataInput(\"input_11\")!.getValue(context),\n                this.getDataInput(\"input_12\")!.getValue(context),\n                this.getDataInput(\"input_13\")!.getValue(context),\n                this.getDataInput(\"input_14\")!.getValue(context),\n                this.getDataInput(\"input_15\")!.getValue(context)\n            );\n        }\n        return matrix;\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CombineMatrix;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.CombineMatrix, FlowGraphCombineMatrixBlock);\n\n/**\n * Combines 4 floats into a new Matrix\n */\nexport class FlowGraphCombineMatrix2DBlock extends FlowGraphMathCombineBlock<FlowGraphMatrix2D> {\n    constructor(config?: IFlowGraphCombineMatrixBlockConfiguration) {\n        super(4, RichTypeMatrix2D, config);\n    }\n\n    public override _doOperation(context: FlowGraphContext): FlowGraphMatrix2D {\n        if (!context._hasExecutionVariable(this, \"cachedMatrix\")) {\n            context._setExecutionVariable(this, \"cachedMatrix\", new FlowGraphMatrix2D());\n        }\n        const matrix = context._getExecutionVariable<Nullable<FlowGraphMatrix2D>>(this, \"cachedMatrix\", null) as FlowGraphMatrix2D;\n        const array = this.config?.inputIsColumnMajor\n            ? [\n                  // column to row-major\n                  this.getDataInput(\"input_0\")!.getValue(context),\n                  this.getDataInput(\"input_2\")!.getValue(context),\n                  this.getDataInput(\"input_1\")!.getValue(context),\n                  this.getDataInput(\"input_3\")!.getValue(context),\n              ]\n            : [\n                  this.getDataInput(\"input_0\")!.getValue(context),\n                  this.getDataInput(\"input_1\")!.getValue(context),\n                  this.getDataInput(\"input_2\")!.getValue(context),\n                  this.getDataInput(\"input_3\")!.getValue(context),\n              ];\n        matrix.fromArray(array);\n        return matrix;\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CombineMatrix2D;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.CombineMatrix2D, FlowGraphCombineMatrix2DBlock);\n\n/**\n * Combines 9 floats into a new Matrix3D\n */\nexport class FlowGraphCombineMatrix3DBlock extends FlowGraphMathCombineBlock<FlowGraphMatrix3D> {\n    constructor(config?: IFlowGraphCombineMatrixBlockConfiguration) {\n        super(9, RichTypeMatrix3D, config);\n    }\n\n    public override _doOperation(context: FlowGraphContext): FlowGraphMatrix3D {\n        if (!context._hasExecutionVariable(this, \"cachedMatrix\")) {\n            context._setExecutionVariable(this, \"cachedMatrix\", new FlowGraphMatrix3D());\n        }\n        const matrix = context._getExecutionVariable<Nullable<FlowGraphMatrix3D>>(this, \"cachedMatrix\", null) as FlowGraphMatrix3D;\n        const array = this.config?.inputIsColumnMajor\n            ? [\n                  // column to row major\n                  this.getDataInput(\"input_0\")!.getValue(context),\n                  this.getDataInput(\"input_3\")!.getValue(context),\n                  this.getDataInput(\"input_6\")!.getValue(context),\n                  this.getDataInput(\"input_1\")!.getValue(context),\n                  this.getDataInput(\"input_4\")!.getValue(context),\n                  this.getDataInput(\"input_7\")!.getValue(context),\n                  this.getDataInput(\"input_2\")!.getValue(context),\n                  this.getDataInput(\"input_5\")!.getValue(context),\n                  this.getDataInput(\"input_8\")!.getValue(context),\n              ]\n            : [\n                  this.getDataInput(\"input_0\")!.getValue(context),\n                  this.getDataInput(\"input_1\")!.getValue(context),\n                  this.getDataInput(\"input_2\")!.getValue(context),\n                  this.getDataInput(\"input_3\")!.getValue(context),\n                  this.getDataInput(\"input_4\")!.getValue(context),\n                  this.getDataInput(\"input_5\")!.getValue(context),\n                  this.getDataInput(\"input_6\")!.getValue(context),\n                  this.getDataInput(\"input_7\")!.getValue(context),\n                  this.getDataInput(\"input_8\")!.getValue(context),\n              ];\n        matrix.fromArray(array);\n        return matrix;\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CombineMatrix3D;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.CombineMatrix3D, FlowGraphCombineMatrix3DBlock);\n\n/**\n * Extracts two floats from a Vector2\n */\nexport class FlowGraphExtractVector2Block extends FlowGraphMathExtractBlock<Vector2> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(2, RichTypeVector2, config);\n    }\n\n    public override _updateOutputs(context: FlowGraphContext): void {\n        let input = this.getDataInput(\"input\")?.getValue(context) as Vector2;\n        if (!input) {\n            input = Vector2.Zero();\n            this.getDataInput(\"input\")!.setValue(input, context);\n        }\n        this.getDataOutput(\"output_0\")!.setValue(input.x, context);\n        this.getDataOutput(\"output_1\")!.setValue(input.y, context);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.ExtractVector2;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.ExtractVector2, FlowGraphExtractVector2Block);\n\n/**\n * Extracts three floats from a Vector3\n */\nexport class FlowGraphExtractVector3Block extends FlowGraphMathExtractBlock<Vector3> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(3, RichTypeVector3, config);\n    }\n    public override _updateOutputs(context: FlowGraphContext): void {\n        let input = this.getDataInput(\"input\")?.getValue(context) as Vector3;\n        if (!input) {\n            input = Vector3.Zero();\n            this.getDataInput(\"input\")!.setValue(input, context);\n        }\n        this.getDataOutput(\"output_0\")!.setValue(input.x, context);\n        this.getDataOutput(\"output_1\")!.setValue(input.y, context);\n        this.getDataOutput(\"output_2\")!.setValue(input.z, context);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.ExtractVector3;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.ExtractVector3, FlowGraphExtractVector3Block);\n\n/**\n * Extracts four floats from a Vector4\n */\nexport class FlowGraphExtractVector4Block extends FlowGraphMathExtractBlock<Vector4> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(4, RichTypeVector4, config);\n    }\n    public override _updateOutputs(context: FlowGraphContext): void {\n        let input = this.getDataInput(\"input\")?.getValue(context) as Vector4;\n        if (!input) {\n            input = Vector4.Zero();\n            this.getDataInput(\"input\")!.setValue(input, context);\n        }\n        this.getDataOutput(\"output_0\")!.setValue(input.x, context);\n        this.getDataOutput(\"output_1\")!.setValue(input.y, context);\n        this.getDataOutput(\"output_2\")!.setValue(input.z, context);\n        this.getDataOutput(\"output_3\")!.setValue(input.w, context);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.ExtractVector4;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.ExtractVector4, FlowGraphExtractVector4Block);\n\n/**\n * Extracts 16 floats from a Matrix\n */\nexport class FlowGraphExtractMatrixBlock extends FlowGraphMathExtractBlock<Matrix> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(16, RichTypeMatrix, config);\n    }\n    public override _updateOutputs(context: FlowGraphContext): void {\n        let input = this.getDataInput(\"input\")?.getValue(context) as Matrix;\n        if (!input) {\n            input = Matrix.Identity();\n            this.getDataInput(\"input\")!.setValue(input, context);\n        }\n        for (let i = 0; i < 16; i++) {\n            this.getDataOutput(`output_${i}`)!.setValue(input.m[i], context);\n        }\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.ExtractMatrix;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.ExtractMatrix, FlowGraphExtractMatrixBlock);\n\n/**\n * Extracts 4 floats from a Matrix2D\n */\nexport class FlowGraphExtractMatrix2DBlock extends FlowGraphMathExtractBlock<FlowGraphMatrix2D> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(4, RichTypeMatrix2D, config);\n    }\n    public override _updateOutputs(context: FlowGraphContext): void {\n        let input = this.getDataInput(\"input\")?.getValue(context) as FlowGraphMatrix2D;\n        if (!input) {\n            input = new FlowGraphMatrix2D();\n            this.getDataInput(\"input\")!.setValue(input, context);\n        }\n        for (let i = 0; i < 4; i++) {\n            this.getDataOutput(`output_${i}`)!.setValue(input.m[i], context);\n        }\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.ExtractMatrix2D;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.ExtractMatrix2D, FlowGraphExtractMatrix2DBlock);\n\n/**\n * Extracts 4 floats from a Matrix2D\n */\nexport class FlowGraphExtractMatrix3DBlock extends FlowGraphMathExtractBlock<FlowGraphMatrix3D> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(9, RichTypeMatrix3D, config);\n    }\n    public override _updateOutputs(context: FlowGraphContext): void {\n        let input = this.getDataInput(\"input\")?.getValue(context) as FlowGraphMatrix3D;\n        if (!input) {\n            input = new FlowGraphMatrix3D();\n            this.getDataInput(\"input\")!.setValue(input, context);\n        }\n        for (let i = 0; i < 9; i++) {\n            this.getDataOutput(`output_${i}`)!.setValue(input.m[i], context);\n        }\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.ExtractMatrix3D;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.ExtractMatrix3D, FlowGraphExtractMatrix3DBlock);\n"],
  "mappings": "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",
  "names": []
}
