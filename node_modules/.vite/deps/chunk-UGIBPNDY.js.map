{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/prePassConfiguration.ts", "../../../dev/core/src/Materials/materialDefines.ts", "../../../dev/core/src/Materials/pushMaterial.ts", "../../../dev/core/src/Materials/materialFlags.ts", "../../../dev/core/src/Materials/materialPluginManager.ts", "../../../dev/core/src/Materials/materialPluginBase.ts", "../../../dev/core/src/Materials/material.detailMapConfiguration.ts", "../../../dev/core/src/Materials/materialHelper.geometryrendering.ts", "../../../dev/core/src/Materials/standardMaterial.ts"],
  "sourcesContent": ["import type { Matrix } from \"../Maths/math.vector\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Configuration needed for prepass-capable materials\r\n */\r\nexport class PrePassConfiguration {\r\n    /**\r\n     * Previous world matrices of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousWorldMatrices: { [index: number]: Matrix } = {};\r\n    /**\r\n     * Previous view project matrix\r\n     * Used for computing velocity\r\n     */\r\n    public previousViewProjection: Matrix;\r\n    /**\r\n     * Current view projection matrix\r\n     * Used for computing velocity\r\n     */\r\n    public currentViewProjection: Matrix;\r\n    /**\r\n     * Previous bones of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousBones: { [index: number]: Float32Array } = {};\r\n\r\n    private _lastUpdateFrameId: number;\r\n\r\n    /**\r\n     * Add the required uniforms to the current list.\r\n     * @param uniforms defines the current uniform list.\r\n     */\r\n    public static AddUniforms(uniforms: string[]): void {\r\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\r\n    }\r\n\r\n    /**\r\n     * Add the required samplers to the current list.\r\n     * @param samplers defines the current sampler list.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static AddSamplers(samplers: string[]): void {\r\n        // pass\r\n    }\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param effect defines the effect to update\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param mesh The mesh\r\n     * @param world World matrix of this mesh\r\n     * @param isFrozen Is the material frozen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindForSubMesh(effect: Effect, scene: Scene, mesh: Mesh, world: Matrix, isFrozen: boolean): void {\r\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\r\n            if (\r\n                scene.prePassRenderer.getIndex(Constants.PREPASS_VELOCITY_TEXTURE_TYPE) !== -1 ||\r\n                scene.prePassRenderer.getIndex(Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE) !== -1\r\n            ) {\r\n                if (!this.previousWorldMatrices[mesh.uniqueId]) {\r\n                    this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n                }\r\n\r\n                if (!this.previousViewProjection) {\r\n                    this.previousViewProjection = scene.getTransformMatrix().clone();\r\n                    this.currentViewProjection = scene.getTransformMatrix().clone();\r\n                }\r\n\r\n                const engine = scene.getEngine();\r\n\r\n                if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\r\n                    // First update of the prepass configuration for this rendering pass\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                    this.currentViewProjection.copyFrom(scene.getTransformMatrix());\r\n                } else if (this._lastUpdateFrameId !== engine.frameId) {\r\n                    // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                }\r\n\r\n                effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\r\n                effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\r\n\r\n                this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n            }\r\n        }\r\n    }\r\n}\r\n", "/**\r\n * Manages the defines for the Material\r\n */\r\nexport class MaterialDefines {\r\n    /** @internal */\r\n    protected _keys: string[] = [];\r\n    private _isDirty = true;\r\n    /** @internal */\r\n    public _renderId: number;\r\n\r\n    /** @internal */\r\n    public _areLightsDirty = true;\r\n    /** @internal */\r\n    public _areLightsDisposed = false;\r\n    /** @internal */\r\n    public _areAttributesDirty = true;\r\n    /** @internal */\r\n    public _areTexturesDirty = true;\r\n    /** @internal */\r\n    public _areFresnelDirty = true;\r\n    /** @internal */\r\n    public _areMiscDirty = true;\r\n    /** @internal */\r\n    public _arePrePassDirty = true;\r\n    /** @internal */\r\n    public _areImageProcessingDirty = true;\r\n\r\n    /** @internal */\r\n    public _normals = false;\r\n    /** @internal */\r\n    public _uvs = false;\r\n\r\n    /** @internal */\r\n    public _needNormals = false;\r\n    /** @internal */\r\n    public _needUVs = false;\r\n\r\n    protected _externalProperties?: { [name: string]: { type: string; default: any } };\r\n\r\n    [id: string]: any;\r\n\r\n    /**\r\n     * Creates a new instance\r\n     * @param externalProperties list of external properties to inject into the object\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        this._externalProperties = externalProperties;\r\n\r\n        // Initialize External Properties\r\n        if (externalProperties) {\r\n            for (const prop in externalProperties) {\r\n                if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\r\n                    this._setDefaultValue(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material needs to be re-calculated\r\n     */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it has been re-calculated\r\n     */\r\n    public markAsProcessed() {\r\n        this._isDirty = false;\r\n        this._areAttributesDirty = false;\r\n        this._areTexturesDirty = false;\r\n        this._areFresnelDirty = false;\r\n        this._areLightsDirty = false;\r\n        this._areLightsDisposed = false;\r\n        this._areMiscDirty = false;\r\n        this._arePrePassDirty = false;\r\n        this._areImageProcessingDirty = false;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     */\r\n    public markAsUnprocessed() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate all of its defines need to be re-calculated\r\n     */\r\n    public markAllAsDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._areAttributesDirty = true;\r\n        this._areLightsDirty = true;\r\n        this._areFresnelDirty = true;\r\n        this._areMiscDirty = true;\r\n        this._arePrePassDirty = true;\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that image processing needs to be re-calculated\r\n     */\r\n    public markAsImageProcessingDirty() {\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate the lights need to be re-calculated\r\n     * @param disposed Defines whether the light is dirty due to dispose or not\r\n     */\r\n    public markAsLightDirty(disposed = false) {\r\n        this._areLightsDirty = true;\r\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the attribute state as changed\r\n     */\r\n    public markAsAttributesDirty() {\r\n        this._areAttributesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the texture state as changed\r\n     */\r\n    public markAsTexturesDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the fresnel state as changed\r\n     */\r\n    public markAsFresnelDirty() {\r\n        this._areFresnelDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the misc state as changed\r\n     */\r\n    public markAsMiscDirty() {\r\n        this._areMiscDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass state as changed\r\n     */\r\n    public markAsPrePassDirty() {\r\n        this._arePrePassDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the material defines\r\n     */\r\n    public rebuild() {\r\n        this._keys.length = 0;\r\n\r\n        for (const key of Object.keys(this)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            this._keys.push(key);\r\n        }\r\n\r\n        if (this._externalProperties) {\r\n            for (const name in this._externalProperties) {\r\n                if (this._keys.indexOf(name) === -1) {\r\n                    this._keys.push(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if two material defines are equal\r\n     * @param other - A material define instance to compare to\r\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\r\n     */\r\n    public isEqual(other: MaterialDefines): boolean {\r\n        if (this._keys.length !== other._keys.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            if ((<any>this)[prop] !== (<any>other)[prop]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones this instance's defines to another instance\r\n     * @param other - material defines to clone values to\r\n     */\r\n    public cloneTo(other: MaterialDefines): void {\r\n        if (this._keys.length !== other._keys.length) {\r\n            other._keys = this._keys.slice(0);\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            (<any>other)[prop] = (<any>this)[prop];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the material define values\r\n     */\r\n    public reset(): void {\r\n        this._keys.forEach((prop) => this._setDefaultValue(prop));\r\n    }\r\n\r\n    private _setDefaultValue(prop: string): void {\r\n        const type = this._externalProperties?.[prop]?.type ?? typeof (<any>this)[prop];\r\n        const defValue = this._externalProperties?.[prop]?.default;\r\n\r\n        switch (type) {\r\n            case \"number\":\r\n                (<any>this)[prop] = defValue ?? 0;\r\n                break;\r\n            case \"string\":\r\n                (<any>this)[prop] = defValue ?? \"\";\r\n                break;\r\n            default:\r\n                (<any>this)[prop] = defValue ?? false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the material define values to a string\r\n     * @returns - String of material define information\r\n     */\r\n    public toString(): string {\r\n        let result = \"\";\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n            const value = (<any>this)[prop];\r\n            const type = typeof value;\r\n\r\n            switch (type) {\r\n                case \"number\":\r\n                case \"string\":\r\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\r\n                    break;\r\n                default:\r\n                    if (value) {\r\n                        result += \"#define \" + prop + \"\\n\";\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { Material } from \"../Materials/material\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\n/**\r\n * Base class of materials working in push mode in babylon JS\r\n * @internal\r\n */\r\nexport class PushMaterial extends Material {\r\n    protected _activeEffect?: Effect;\r\n\r\n    protected _normalMatrix: Matrix = new Matrix();\r\n\r\n    constructor(name: string, scene?: Scene, storeEffectOnSubMeshes = true, forceGLSL = false) {\r\n        super(name, scene, undefined, forceGLSL);\r\n        this._storeEffectOnSubMeshes = storeEffectOnSubMeshes;\r\n    }\r\n\r\n    public override getEffect(): Effect {\r\n        return this._storeEffectOnSubMeshes ? this._activeEffect! : super.getEffect()!;\r\n    }\r\n\r\n    public override isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        if (!mesh) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._storeEffectOnSubMeshes) {\r\n            return true;\r\n        }\r\n\r\n        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\r\n    }\r\n\r\n    protected _isReadyForSubMesh(subMesh: SubMesh) {\r\n        const defines = subMesh.materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {\r\n            if (defines._renderId === this.getScene().getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Binds the given world matrix to the active effect\r\n     *\r\n     * @param world the matrix to bind\r\n     */\r\n    public override bindOnlyWorldMatrix(world: Matrix): void {\r\n        this._activeEffect!.setMatrix(\"world\", world);\r\n    }\r\n\r\n    /**\r\n     * Binds the given normal matrix to the active effect\r\n     *\r\n     * @param normalMatrix the matrix to bind\r\n     */\r\n    public bindOnlyNormalMatrix(normalMatrix: Matrix): void {\r\n        this._activeEffect!.setMatrix(\"normalMatrix\", normalMatrix);\r\n    }\r\n\r\n    public override bind(world: Matrix, mesh?: Mesh): void {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\r\n    }\r\n\r\n    protected override _afterBind(mesh?: AbstractMesh, effect: Nullable<Effect> = null, subMesh?: SubMesh): void {\r\n        super._afterBind(mesh, effect, subMesh);\r\n        this.getScene()._cachedEffect = effect;\r\n        if (subMesh) {\r\n            subMesh._drawWrapper._forceRebindOnNextCall = false;\r\n        } else {\r\n            this._drawWrapper._forceRebindOnNextCall = false;\r\n        }\r\n    }\r\n\r\n    protected _mustRebind(scene: Scene, effect: Effect, subMesh: SubMesh, visibility = 1): boolean {\r\n        return subMesh._drawWrapper._forceRebindOnNextCall || scene.isCachedMaterialInvalid(this, effect, visibility);\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean) {\r\n        this._activeEffect = undefined;\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n}\r\n", "import { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * This groups all the flags used to control the materials channel.\r\n */\r\nexport class MaterialFlags {\r\n    // Flags used to enable or disable a type of texture for all Standard Materials\r\n    private static _DiffuseTextureEnabled = true;\r\n    /**\r\n     * Are diffuse textures enabled in the application.\r\n     */\r\n    public static get DiffuseTextureEnabled(): boolean {\r\n        return this._DiffuseTextureEnabled;\r\n    }\r\n    public static set DiffuseTextureEnabled(value: boolean) {\r\n        if (this._DiffuseTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DiffuseTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _BaseWeightTextureEnabled = true;\r\n    /**\r\n     * Is the OpenPBR Base Weight texture enabled in the application.\r\n     */\r\n    public static get BaseWeightTextureEnabled(): boolean {\r\n        return this._BaseWeightTextureEnabled;\r\n    }\r\n    public static set BaseWeightTextureEnabled(value: boolean) {\r\n        if (this._BaseWeightTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._BaseWeightTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _DetailTextureEnabled = true;\r\n    /**\r\n     * Are detail textures enabled in the application.\r\n     */\r\n    public static get DetailTextureEnabled(): boolean {\r\n        return this._DetailTextureEnabled;\r\n    }\r\n    public static set DetailTextureEnabled(value: boolean) {\r\n        if (this._DetailTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DetailTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _DecalMapEnabled = true;\r\n    /**\r\n     * Are decal maps enabled in the application.\r\n     */\r\n    public static get DecalMapEnabled(): boolean {\r\n        return this._DecalMapEnabled;\r\n    }\r\n    public static set DecalMapEnabled(value: boolean) {\r\n        if (this._DecalMapEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DecalMapEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _AmbientTextureEnabled = true;\r\n    /**\r\n     * Are ambient textures enabled in the application.\r\n     */\r\n    public static get AmbientTextureEnabled(): boolean {\r\n        return this._AmbientTextureEnabled;\r\n    }\r\n    public static set AmbientTextureEnabled(value: boolean) {\r\n        if (this._AmbientTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._AmbientTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _OpacityTextureEnabled = true;\r\n    /**\r\n     * Are opacity textures enabled in the application.\r\n     */\r\n    public static get OpacityTextureEnabled(): boolean {\r\n        return this._OpacityTextureEnabled;\r\n    }\r\n    public static set OpacityTextureEnabled(value: boolean) {\r\n        if (this._OpacityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._OpacityTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ReflectionTextureEnabled = true;\r\n    /**\r\n     * Are reflection textures enabled in the application.\r\n     */\r\n    public static get ReflectionTextureEnabled(): boolean {\r\n        return this._ReflectionTextureEnabled;\r\n    }\r\n    public static set ReflectionTextureEnabled(value: boolean) {\r\n        if (this._ReflectionTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ReflectionTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _EmissiveTextureEnabled = true;\r\n    /**\r\n     * Are emissive textures enabled in the application.\r\n     */\r\n    public static get EmissiveTextureEnabled(): boolean {\r\n        return this._EmissiveTextureEnabled;\r\n    }\r\n    public static set EmissiveTextureEnabled(value: boolean) {\r\n        if (this._EmissiveTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._EmissiveTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _SpecularTextureEnabled = true;\r\n    /**\r\n     * Are specular textures enabled in the application.\r\n     */\r\n    public static get SpecularTextureEnabled(): boolean {\r\n        return this._SpecularTextureEnabled;\r\n    }\r\n    public static set SpecularTextureEnabled(value: boolean) {\r\n        if (this._SpecularTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._SpecularTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _BumpTextureEnabled = true;\r\n    /**\r\n     * Are bump textures enabled in the application.\r\n     */\r\n    public static get BumpTextureEnabled(): boolean {\r\n        return this._BumpTextureEnabled;\r\n    }\r\n    public static set BumpTextureEnabled(value: boolean) {\r\n        if (this._BumpTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._BumpTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _LightmapTextureEnabled = true;\r\n    /**\r\n     * Are lightmap textures enabled in the application.\r\n     */\r\n    public static get LightmapTextureEnabled(): boolean {\r\n        return this._LightmapTextureEnabled;\r\n    }\r\n    public static set LightmapTextureEnabled(value: boolean) {\r\n        if (this._LightmapTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._LightmapTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _RefractionTextureEnabled = true;\r\n    /**\r\n     * Are refraction textures enabled in the application.\r\n     */\r\n    public static get RefractionTextureEnabled(): boolean {\r\n        return this._RefractionTextureEnabled;\r\n    }\r\n    public static set RefractionTextureEnabled(value: boolean) {\r\n        if (this._RefractionTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._RefractionTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ColorGradingTextureEnabled = true;\r\n    /**\r\n     * Are color grading textures enabled in the application.\r\n     */\r\n    public static get ColorGradingTextureEnabled(): boolean {\r\n        return this._ColorGradingTextureEnabled;\r\n    }\r\n    public static set ColorGradingTextureEnabled(value: boolean) {\r\n        if (this._ColorGradingTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ColorGradingTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _FresnelEnabled = true;\r\n    /**\r\n     * Are fresnels enabled in the application.\r\n     */\r\n    public static get FresnelEnabled(): boolean {\r\n        return this._FresnelEnabled;\r\n    }\r\n    public static set FresnelEnabled(value: boolean) {\r\n        if (this._FresnelEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._FresnelEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_FresnelDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatTextureEnabled = true;\r\n    /**\r\n     * Are clear coat textures enabled in the application.\r\n     */\r\n    public static get ClearCoatTextureEnabled(): boolean {\r\n        return this._ClearCoatTextureEnabled;\r\n    }\r\n    public static set ClearCoatTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatBumpTextureEnabled = true;\r\n    /**\r\n     * Are clear coat bump textures enabled in the application.\r\n     */\r\n    public static get ClearCoatBumpTextureEnabled(): boolean {\r\n        return this._ClearCoatBumpTextureEnabled;\r\n    }\r\n    public static set ClearCoatBumpTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatBumpTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatBumpTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatTintTextureEnabled = true;\r\n    /**\r\n     * Are clear coat tint textures enabled in the application.\r\n     */\r\n    public static get ClearCoatTintTextureEnabled(): boolean {\r\n        return this._ClearCoatTintTextureEnabled;\r\n    }\r\n    public static set ClearCoatTintTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatTintTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatTintTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _SheenTextureEnabled = true;\r\n    /**\r\n     * Are sheen textures enabled in the application.\r\n     */\r\n    public static get SheenTextureEnabled(): boolean {\r\n        return this._SheenTextureEnabled;\r\n    }\r\n    public static set SheenTextureEnabled(value: boolean) {\r\n        if (this._SheenTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._SheenTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _AnisotropicTextureEnabled = true;\r\n    /**\r\n     * Are anisotropic textures enabled in the application.\r\n     */\r\n    public static get AnisotropicTextureEnabled(): boolean {\r\n        return this._AnisotropicTextureEnabled;\r\n    }\r\n    public static set AnisotropicTextureEnabled(value: boolean) {\r\n        if (this._AnisotropicTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._AnisotropicTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ThicknessTextureEnabled = true;\r\n    /**\r\n     * Are thickness textures enabled in the application.\r\n     */\r\n    public static get ThicknessTextureEnabled(): boolean {\r\n        return this._ThicknessTextureEnabled;\r\n    }\r\n    public static set ThicknessTextureEnabled(value: boolean) {\r\n        if (this._ThicknessTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ThicknessTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _RefractionIntensityTextureEnabled = true;\r\n    /**\r\n     * Are refraction intensity textures enabled in the application.\r\n     */\r\n    public static get RefractionIntensityTextureEnabled(): boolean {\r\n        return this._ThicknessTextureEnabled;\r\n    }\r\n    public static set RefractionIntensityTextureEnabled(value: boolean) {\r\n        if (this._RefractionIntensityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._RefractionIntensityTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _TranslucencyIntensityTextureEnabled = true;\r\n    /**\r\n     * Are translucency intensity textures enabled in the application.\r\n     */\r\n    public static get TranslucencyIntensityTextureEnabled(): boolean {\r\n        return this._TranslucencyIntensityTextureEnabled;\r\n    }\r\n    public static set TranslucencyIntensityTextureEnabled(value: boolean) {\r\n        if (this._TranslucencyIntensityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._TranslucencyIntensityTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _TranslucencyColorTextureEnabled = true;\r\n    /**\r\n     * Are translucency tint textures enabled in the application.\r\n     */\r\n    public static get TranslucencyColorTextureEnabled(): boolean {\r\n        return this._TranslucencyColorTextureEnabled;\r\n    }\r\n    public static set TranslucencyColorTextureEnabled(value: boolean) {\r\n        if (this._TranslucencyColorTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._TranslucencyColorTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _IridescenceTextureEnabled = true;\r\n    /**\r\n     * Are translucency intensity textures enabled in the application.\r\n     */\r\n    public static get IridescenceTextureEnabled(): boolean {\r\n        return this._IridescenceTextureEnabled;\r\n    }\r\n    public static set IridescenceTextureEnabled(value: boolean) {\r\n        if (this._IridescenceTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._IridescenceTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n}\r\n", "import type { ProcessingOptions, ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport type {\r\n    MaterialPluginPrepareEffect,\r\n    MaterialPluginBindForSubMesh,\r\n    MaterialPluginDisposed,\r\n    MaterialPluginGetActiveTextures,\r\n    MaterialPluginGetAnimatables,\r\n    MaterialPluginGetDefineNames,\r\n    MaterialPluginHasTexture,\r\n    MaterialPluginIsReadyForSubMesh,\r\n    MaterialPluginPrepareDefines,\r\n    MaterialPluginPrepareUniformBuffer,\r\n    MaterialPluginHardBindForSubMesh,\r\n    MaterialPluginHasRenderTargetTextures,\r\n    MaterialPluginFillRenderTargetTextures,\r\n} from \"./materialPluginEvent\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { _ProcessIncludes } from \"../Engines/Processors/shaderProcessor\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\nimport { ShaderStore } from \"../Engines/shaderStore\";\r\n\r\ndeclare module \"./material\" {\r\n    export interface Material {\r\n        /**\r\n         * Plugin manager for this material\r\n         */\r\n        pluginManager?: MaterialPluginManager;\r\n    }\r\n}\r\n\r\nconst rxOption = new RegExp(\"^([gimus]+)!\");\r\n\r\n/**\r\n * Class that manages the plugins of a material\r\n * @since 5.0\r\n */\r\nexport class MaterialPluginManager {\r\n    /** Map a plugin class name to a #define name (used in the vertex/fragment shaders as a marker of the plugin usage) */\r\n    private static _MaterialPluginClassToMainDefine: { [name: string]: string } = {};\r\n    private static _MaterialPluginCounter: number = 0;\r\n\r\n    protected _material: Material;\r\n    protected _scene: Scene;\r\n    protected _engine: AbstractEngine;\r\n    /** @internal */\r\n    public _plugins: MaterialPluginBase[] = [];\r\n    protected _activePlugins: MaterialPluginBase[] = [];\r\n    protected _activePluginsForExtraEvents: MaterialPluginBase[] = [];\r\n    protected _codeInjectionPoints: { [shaderType: string]: { [codeName: string]: boolean } };\r\n    protected _defineNamesFromPlugins?: { [name: string]: { type: string; default: any } };\r\n    protected _uboDeclaration: string;\r\n    protected _vertexDeclaration: string;\r\n    protected _fragmentDeclaration: string;\r\n    protected _uniformList: string[];\r\n    protected _samplerList: string[];\r\n    protected _uboList: string[];\r\n\r\n    static {\r\n        EngineStore.OnEnginesDisposedObservable.add(() => {\r\n            UnregisterAllMaterialPlugins();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the plugin manager\r\n     * @param material material that this manager will manage the plugins for\r\n     */\r\n    constructor(material: Material) {\r\n        this._material = material;\r\n        this._scene = material.getScene();\r\n        this._engine = this._scene.getEngine();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _addPlugin(plugin: MaterialPluginBase): boolean {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === plugin.name) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this._material._uniformBufferLayoutBuilt) {\r\n            this._material.resetDrawCache();\r\n            this._material._createUniformBuffer();\r\n        }\r\n\r\n        if (!plugin.isCompatible(this._material.shaderLanguage)) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `The plugin \"${plugin.name}\" can't be added to the material \"${this._material.name}\" because the plugin is not compatible with the shader language of the material.`;\r\n        }\r\n\r\n        const pluginClassName = plugin.getClassName();\r\n        if (!MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]) {\r\n            MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName] = \"MATERIALPLUGIN_\" + ++MaterialPluginManager._MaterialPluginCounter;\r\n        }\r\n\r\n        this._material._callbackPluginEventGeneric = (id, info) => this._handlePluginEvent(id, info);\r\n\r\n        this._plugins.push(plugin);\r\n        this._plugins.sort((a, b) => a.priority - b.priority);\r\n\r\n        this._codeInjectionPoints = {};\r\n\r\n        const defineNamesFromPlugins: { [name: string]: { type: string; default: any } } = {};\r\n        defineNamesFromPlugins[MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]] = {\r\n            type: \"boolean\",\r\n            default: true,\r\n        };\r\n\r\n        for (const plugin of this._plugins) {\r\n            plugin.collectDefines(defineNamesFromPlugins);\r\n            this._collectPointNames(\"vertex\", plugin.getCustomCode(\"vertex\", this._material.shaderLanguage));\r\n            this._collectPointNames(\"fragment\", plugin.getCustomCode(\"fragment\", this._material.shaderLanguage));\r\n        }\r\n\r\n        this._defineNamesFromPlugins = defineNamesFromPlugins;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _activatePlugin(plugin: MaterialPluginBase): void {\r\n        if (this._activePlugins.indexOf(plugin) === -1) {\r\n            this._activePlugins.push(plugin);\r\n            this._activePlugins.sort((a, b) => a.priority - b.priority);\r\n\r\n            this._material._callbackPluginEventIsReadyForSubMesh = this._handlePluginEventIsReadyForSubMesh.bind(this);\r\n            this._material._callbackPluginEventPrepareDefinesBeforeAttributes = this._handlePluginEventPrepareDefinesBeforeAttributes.bind(this);\r\n            this._material._callbackPluginEventPrepareDefines = this._handlePluginEventPrepareDefines.bind(this);\r\n            this._material._callbackPluginEventBindForSubMesh = this._handlePluginEventBindForSubMesh.bind(this);\r\n\r\n            if (plugin.registerForExtraEvents) {\r\n                this._activePluginsForExtraEvents.push(plugin);\r\n                this._activePluginsForExtraEvents.sort((a, b) => a.priority - b.priority);\r\n                this._material._callbackPluginEventHasRenderTargetTextures = this._handlePluginEventHasRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventFillRenderTargetTextures = this._handlePluginEventFillRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventHardBindForSubMesh = this._handlePluginEventHardBindForSubMesh.bind(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a plugin from the list of plugins managed by this manager\r\n     * @param name name of the plugin\r\n     * @returns the plugin if found, else null\r\n     */\r\n    public getPlugin<T = MaterialPluginBase>(name: string): Nullable<T> {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === name) {\r\n                return this._plugins[i] as T;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected _handlePluginEventIsReadyForSubMesh(eventData: MaterialPluginIsReadyForSubMesh): void {\r\n        let isReady = true;\r\n        for (const plugin of this._activePlugins) {\r\n            isReady = isReady && plugin.isReadyForSubMesh(eventData.defines, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n        eventData.isReadyForSubMesh = isReady;\r\n    }\r\n\r\n    protected _handlePluginEventPrepareDefinesBeforeAttributes(eventData: MaterialPluginPrepareDefines): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.prepareDefinesBeforeAttributes(eventData.defines, this._scene, eventData.mesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventPrepareDefines(eventData: MaterialPluginPrepareDefines): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.prepareDefines(eventData.defines, this._scene, eventData.mesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHardBindForSubMesh(eventData: MaterialPluginHardBindForSubMesh): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.hardBindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventBindForSubMesh(eventData: MaterialPluginBindForSubMesh): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.bindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHasRenderTargetTextures(eventData: MaterialPluginHasRenderTargetTextures): void {\r\n        let hasRenderTargetTextures = false;\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            hasRenderTargetTextures = plugin.hasRenderTargetTextures();\r\n            if (hasRenderTargetTextures) {\r\n                break;\r\n            }\r\n        }\r\n        eventData.hasRenderTargetTextures = hasRenderTargetTextures;\r\n    }\r\n\r\n    protected _handlePluginEventFillRenderTargetTextures(eventData: MaterialPluginFillRenderTargetTextures): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.fillRenderTargetTextures(eventData.renderTargets);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEvent(\r\n        id: number,\r\n        info:\r\n            | MaterialPluginGetActiveTextures\r\n            | MaterialPluginGetAnimatables\r\n            | MaterialPluginHasTexture\r\n            | MaterialPluginDisposed\r\n            | MaterialPluginGetDefineNames\r\n            | MaterialPluginPrepareEffect\r\n            | MaterialPluginPrepareUniformBuffer\r\n    ): void {\r\n        switch (id) {\r\n            case MaterialPluginEvent.GetActiveTextures: {\r\n                const eventData = info as MaterialPluginGetActiveTextures;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getActiveTextures(eventData.activeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetAnimatables: {\r\n                const eventData = info as MaterialPluginGetAnimatables;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getAnimatables(eventData.animatables);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.HasTexture: {\r\n                const eventData = info as MaterialPluginHasTexture;\r\n                let hasTexture = false;\r\n                for (const plugin of this._activePlugins) {\r\n                    hasTexture = plugin.hasTexture(eventData.texture);\r\n                    if (hasTexture) {\r\n                        break;\r\n                    }\r\n                }\r\n                eventData.hasTexture = hasTexture;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.Disposed: {\r\n                const eventData = info as MaterialPluginDisposed;\r\n                for (const plugin of this._plugins) {\r\n                    plugin.dispose(eventData.forceDisposeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetDefineNames: {\r\n                const eventData = info as MaterialPluginGetDefineNames;\r\n                eventData.defineNames = this._defineNamesFromPlugins;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareEffect: {\r\n                const eventData = info as MaterialPluginPrepareEffect;\r\n                for (const plugin of this._activePlugins) {\r\n                    eventData.fallbackRank = plugin.addFallbacks(eventData.defines, eventData.fallbacks, eventData.fallbackRank);\r\n                    plugin.getAttributes(eventData.attributes, this._scene, eventData.mesh);\r\n                }\r\n                if (this._uniformList.length > 0) {\r\n                    eventData.uniforms.push(...this._uniformList);\r\n                }\r\n                if (this._samplerList.length > 0) {\r\n                    eventData.samplers.push(...this._samplerList);\r\n                }\r\n                if (this._uboList.length > 0) {\r\n                    eventData.uniformBuffersNames.push(...this._uboList);\r\n                }\r\n                eventData.customCode = this._injectCustomCode(eventData, eventData.customCode);\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareUniformBuffer: {\r\n                const eventData = info as MaterialPluginPrepareUniformBuffer;\r\n                this._uboDeclaration = \"\";\r\n                this._vertexDeclaration = \"\";\r\n                this._fragmentDeclaration = \"\";\r\n                this._uniformList = [];\r\n                this._samplerList = [];\r\n                this._uboList = [];\r\n                const isWebGPU = this._material.shaderLanguage === ShaderLanguage.WGSL;\r\n                for (const plugin of this._plugins) {\r\n                    const uniforms = plugin.getUniforms(this._material.shaderLanguage);\r\n                    if (uniforms) {\r\n                        if (uniforms.ubo) {\r\n                            for (const uniform of uniforms.ubo) {\r\n                                if (uniform.size && uniform.type) {\r\n                                    const arraySize = uniform.arraySize ?? 0;\r\n                                    eventData.ubo.addUniform(uniform.name, uniform.size, arraySize);\r\n                                    if (isWebGPU) {\r\n                                        let type: string;\r\n                                        switch (uniform.type) {\r\n                                            case \"mat4\":\r\n                                                type = \"mat4x4f\";\r\n                                                break;\r\n                                            case \"float\":\r\n                                                type = \"f32\";\r\n                                                break;\r\n                                            default:\r\n                                                type = `${uniform.type}f`;\r\n                                                break;\r\n                                        }\r\n\r\n                                        this._uboDeclaration += `uniform ${uniform.name}: ${type}${arraySize > 0 ? `[${arraySize}]` : \"\"};\\n`;\r\n                                    } else {\r\n                                        this._uboDeclaration += `${uniform.type} ${uniform.name}${arraySize > 0 ? `[${arraySize}]` : \"\"};\\n`;\r\n                                    }\r\n                                }\r\n                                this._uniformList.push(uniform.name);\r\n                            }\r\n                        }\r\n                        if (uniforms.vertex) {\r\n                            this._vertexDeclaration += uniforms.vertex + \"\\n\";\r\n                        }\r\n                        if (uniforms.fragment) {\r\n                            this._fragmentDeclaration += uniforms.fragment + \"\\n\";\r\n                        }\r\n                    }\r\n                    plugin.getSamplers(this._samplerList);\r\n                    plugin.getUniformBuffersNames(this._uboList);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _collectPointNames(shaderType: string, customCode: Nullable<{ [pointName: string]: string }> | undefined): void {\r\n        if (!customCode) {\r\n            return;\r\n        }\r\n        for (const pointName in customCode) {\r\n            if (!this._codeInjectionPoints[shaderType]) {\r\n                this._codeInjectionPoints[shaderType] = {};\r\n            }\r\n            this._codeInjectionPoints[shaderType][pointName] = true;\r\n        }\r\n    }\r\n\r\n    protected _injectCustomCode(eventData: MaterialPluginPrepareEffect, existingCallback?: (shaderType: string, code: string) => string): ShaderCustomProcessingFunction {\r\n        return (shaderType: string, code: string) => {\r\n            if (existingCallback) {\r\n                code = existingCallback(shaderType, code);\r\n            }\r\n            if (this._uboDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_UBO_DECLARATION\", this._uboDeclaration);\r\n            }\r\n            if (this._vertexDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_VERTEX_DECLARATION\", this._vertexDeclaration);\r\n            }\r\n            if (this._fragmentDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_FRAGMENT_DECLARATION\", this._fragmentDeclaration);\r\n            }\r\n            const points = this._codeInjectionPoints?.[shaderType];\r\n            if (!points) {\r\n                return code;\r\n            }\r\n            let processorOptions: Nullable<ProcessingOptions> = null;\r\n            for (let pointName in points) {\r\n                let injectedCode = \"\";\r\n                for (const plugin of this._activePlugins) {\r\n                    let customCode = plugin.getCustomCode(shaderType, this._material.shaderLanguage)?.[pointName];\r\n                    if (!customCode) {\r\n                        continue;\r\n                    }\r\n                    if (plugin.resolveIncludes) {\r\n                        if (processorOptions === null) {\r\n                            const shaderLanguage = ShaderLanguage.GLSL;\r\n                            processorOptions = {\r\n                                defines: [], // not used by _ProcessIncludes\r\n                                indexParameters: eventData.indexParameters,\r\n                                isFragment: false,\r\n                                shouldUseHighPrecisionShader: this._engine._shouldUseHighPrecisionShader,\r\n                                processor: undefined as any, // not used by _ProcessIncludes\r\n                                supportsUniformBuffers: this._engine.supportsUniformBuffers,\r\n                                shadersRepository: ShaderStore.GetShadersRepository(shaderLanguage),\r\n                                includesShadersStore: ShaderStore.GetIncludesShadersStore(shaderLanguage),\r\n                                version: undefined as any, // not used by _ProcessIncludes\r\n                                platformName: this._engine.shaderPlatformName,\r\n                                processingContext: undefined as any, // not used by _ProcessIncludes\r\n                                isNDCHalfZRange: this._engine.isNDCHalfZRange,\r\n                                useReverseDepthBuffer: this._engine.useReverseDepthBuffer,\r\n                                processCodeAfterIncludes: undefined as any, // not used by _ProcessIncludes\r\n                            };\r\n                        }\r\n                        processorOptions.isFragment = shaderType === \"fragment\";\r\n                        _ProcessIncludes(customCode, processorOptions, (code) => (customCode = code));\r\n                    }\r\n                    injectedCode += customCode + \"\\n\";\r\n                }\r\n                if (injectedCode.length > 0) {\r\n                    if (pointName.charAt(0) === \"!\") {\r\n                        // pointName is a regular expression\r\n                        pointName = pointName.substring(1);\r\n\r\n                        let regexFlags = \"g\";\r\n                        if (pointName.charAt(0) === \"!\") {\r\n                            // no flags\r\n                            regexFlags = \"\";\r\n                            pointName = pointName.substring(1);\r\n                        } else {\r\n                            // get the flag(s)\r\n                            const matchOption = rxOption.exec(pointName);\r\n                            if (matchOption && matchOption.length >= 2) {\r\n                                regexFlags = matchOption[1];\r\n                                pointName = pointName.substring(regexFlags.length + 1);\r\n                            }\r\n                        }\r\n\r\n                        if (regexFlags.indexOf(\"g\") < 0) {\r\n                            // we force the \"g\" flag so that the regexp object is stateful!\r\n                            regexFlags += \"g\";\r\n                        }\r\n\r\n                        const sourceCode = code;\r\n                        const rx = new RegExp(pointName, regexFlags);\r\n                        let match = rx.exec(sourceCode);\r\n                        while (match !== null) {\r\n                            let newCode = injectedCode;\r\n                            for (let i = 0; i < match.length; ++i) {\r\n                                newCode = newCode.replace(\"$\" + i, match[i]);\r\n                            }\r\n                            code = code.replace(match[0], newCode);\r\n                            match = rx.exec(sourceCode);\r\n                        }\r\n                    } else {\r\n                        const fullPointName = \"#define \" + pointName;\r\n                        code = code.replace(fullPointName, \"\\n\" + injectedCode + \"\\n\" + fullPointName);\r\n                    }\r\n                }\r\n            }\r\n            return code;\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Type for plugin material factories.\r\n */\r\nexport type PluginMaterialFactory = (material: Material) => Nullable<MaterialPluginBase>;\r\n\r\nconst plugins: Array<[string, PluginMaterialFactory]> = [];\r\nlet inited = false;\r\nlet observer: Nullable<Observer<Material>> = null;\r\n\r\n/**\r\n * Registers a new material plugin through a factory, or updates it. This makes the plugin available to all materials instantiated after its registration.\r\n * @param pluginName The plugin name\r\n * @param factory The factory function which allows to create the plugin\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function RegisterMaterialPlugin(pluginName: string, factory: PluginMaterialFactory): void {\r\n    if (!inited) {\r\n        observer = Material.OnEventObservable.add((material: Material) => {\r\n            for (const [, factory] of plugins) {\r\n                factory(material);\r\n            }\r\n        }, MaterialPluginEvent.Created);\r\n        inited = true;\r\n    }\r\n    const existing = plugins.filter(([name, _factory]) => name === pluginName);\r\n    if (existing.length > 0) {\r\n        existing[0][1] = factory;\r\n    } else {\r\n        plugins.push([pluginName, factory]);\r\n    }\r\n}\r\n\r\n/**\r\n * Removes a material plugin from the list of global plugins.\r\n * @param pluginName The plugin name\r\n * @returns true if the plugin has been removed, else false\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterMaterialPlugin(pluginName: string): boolean {\r\n    for (let i = 0; i < plugins.length; ++i) {\r\n        if (plugins[i][0] === pluginName) {\r\n            plugins.splice(i, 1);\r\n            if (plugins.length === 0) {\r\n                UnregisterAllMaterialPlugins();\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Clear the list of global material plugins\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterAllMaterialPlugins(): void {\r\n    plugins.length = 0;\r\n    inited = false;\r\n    Material.OnEventObservable.remove(observer);\r\n    observer = null;\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport { MaterialPluginManager } from \"./materialPluginManager\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { EffectFallbacks } from \"./effectFallbacks\";\r\nimport type { MaterialDefines } from \"./materialDefines\";\r\nimport type { Material } from \"./material\";\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { RenderTargetTexture } from \"./Textures/renderTargetTexture\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\n\r\n/**\r\n * Base class for material plugins.\r\n * @since 5.0\r\n */\r\nexport class MaterialPluginBase {\r\n    /**\r\n     * Defines the name of the plugin\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Defines the priority of the plugin. Lower numbers run first.\r\n     */\r\n    @serialize()\r\n    public priority: number = 500;\r\n\r\n    /**\r\n     * Indicates that any #include directive in the plugin code must be replaced by the corresponding code.\r\n     */\r\n    @serialize()\r\n    public resolveIncludes: boolean = false;\r\n\r\n    /**\r\n     * Indicates that this plugin should be notified for the extra events (HasRenderTargetTextures / FillRenderTargetTextures / HardBindForSubMesh)\r\n     */\r\n    @serialize()\r\n    public registerForExtraEvents: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the material plugin should be serialized, `true` to skip serialization\r\n     */\r\n    public doNotSerialize = false;\r\n\r\n    protected _material: Material;\r\n    protected _pluginManager: MaterialPluginManager;\r\n    protected _pluginDefineNames?: { [name: string]: any };\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @param shaderLanguage The shader language to use.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public isCompatible(shaderLanguage: ShaderLanguage): boolean {\r\n        switch (shaderLanguage) {\r\n            case ShaderLanguage.GLSL:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    protected _enable(enable: boolean) {\r\n        if (enable) {\r\n            this._pluginManager._activatePlugin(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to mark defines as being dirty.\r\n     */\r\n    public readonly markAllDefinesAsDirty: () => void;\r\n\r\n    /**\r\n     * Creates a new material plugin\r\n     * @param material parent material of the plugin\r\n     * @param name name of the plugin\r\n     * @param priority priority of the plugin\r\n     * @param defines list of defines used by the plugin. The value of the property is the default value for this property\r\n     * @param addToPluginList true to add the plugin to the list of plugins managed by the material plugin manager of the material (default: true)\r\n     * @param enable true to enable the plugin (it is handy if the plugin does not handle properties to switch its current activation)\r\n     * @param resolveIncludes Indicates that any #include directive in the plugin code must be replaced by the corresponding code (default: false)\r\n     */\r\n    constructor(material: Material, name: string, priority: number, defines?: { [key: string]: any }, addToPluginList = true, enable = false, resolveIncludes = false) {\r\n        this._material = material;\r\n        this.name = name;\r\n        this.priority = priority;\r\n        this.resolveIncludes = resolveIncludes;\r\n\r\n        if (!material.pluginManager) {\r\n            material.pluginManager = new MaterialPluginManager(material);\r\n            material.onDisposeObservable.add(() => {\r\n                material.pluginManager = undefined;\r\n            });\r\n        }\r\n\r\n        this._pluginDefineNames = defines;\r\n        this._pluginManager = material.pluginManager;\r\n\r\n        if (addToPluginList) {\r\n            this._pluginManager._addPlugin(this);\r\n        }\r\n\r\n        if (enable) {\r\n            this._enable(true);\r\n        }\r\n\r\n        this.markAllDefinesAsDirty = material._dirtyCallbacks[Constants.MATERIAL_AllDirtyFlag];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name useful for serialization or dynamic coding.\r\n     * @returns The class name.\r\n     */\r\n    public getClassName(): string {\r\n        return \"MaterialPluginBase\";\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used.\r\n     * @param _defines the list of \"defines\" to update.\r\n     * @param _scene defines the scene the material belongs to.\r\n     * @param _engine the engine this scene belongs to.\r\n     * @param _subMesh the submesh to check for readiness\r\n     * @returns - boolean indicating that the submesh is ready or not.\r\n     */\r\n    public isReadyForSubMesh(_defines: MaterialDefines, _scene: Scene, _engine: AbstractEngine, _subMesh: SubMesh): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the material data (this function is called even if mustRebind() returns false)\r\n     * @param _uniformBuffer defines the Uniform buffer to fill in.\r\n     * @param _scene defines the scene the material belongs to.\r\n     * @param _engine defines the engine the material belongs to.\r\n     * @param _subMesh the submesh to bind data for\r\n     */\r\n    public hardBindForSubMesh(_uniformBuffer: UniformBuffer, _scene: Scene, _engine: AbstractEngine, _subMesh: SubMesh): void {}\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param _uniformBuffer defines the Uniform buffer to fill in.\r\n     * @param _scene defines the scene the material belongs to.\r\n     * @param _engine the engine this scene belongs to.\r\n     * @param _subMesh the submesh to bind data for\r\n     */\r\n    public bindForSubMesh(_uniformBuffer: UniformBuffer, _scene: Scene, _engine: AbstractEngine, _subMesh: SubMesh): void {}\r\n\r\n    /**\r\n     * Disposes the resources of the material.\r\n     * @param _forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    public dispose(_forceDisposeTextures?: boolean): void {}\r\n\r\n    /**\r\n     * Returns a list of custom shader code fragments to customize the shader.\r\n     * @param _shaderType \"vertex\" or \"fragment\"\r\n     * @param _shaderLanguage The shader language to use.\r\n     * @returns null if no code to be added, or a list of pointName =\\> code.\r\n     * Note that `pointName` can also be a regular expression if it starts with a `!`.\r\n     * In that case, the string found by the regular expression (if any) will be\r\n     * replaced by the code provided.\r\n     */\r\n    public getCustomCode(_shaderType: string, _shaderLanguage = ShaderLanguage.GLSL): Nullable<{ [pointName: string]: string }> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Collects all defines.\r\n     * @param defines The object to append to.\r\n     */\r\n    public collectDefines(defines: { [name: string]: { type: string; default: any } }): void {\r\n        if (!this._pluginDefineNames) {\r\n            return;\r\n        }\r\n        for (const key of Object.keys(this._pluginDefineNames)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            const type = typeof this._pluginDefineNames[key];\r\n            defines[key] = {\r\n                type: type === \"number\" ? \"number\" : type === \"string\" ? \"string\" : type === \"boolean\" ? \"boolean\" : \"object\",\r\n                default: this._pluginDefineNames[key],\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the defines for the next rendering. Called before PrepareDefinesForAttributes is called.\r\n     * @param _defines the list of \"defines\" to update.\r\n     * @param _scene defines the scene to the material belongs to.\r\n     * @param _mesh the mesh being rendered\r\n     */\r\n    public prepareDefinesBeforeAttributes(_defines: MaterialDefines, _scene: Scene, _mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Sets the defines for the next rendering\r\n     * @param _defines the list of \"defines\" to update.\r\n     * @param _scene defines the scene to the material belongs to.\r\n     * @param _mesh the mesh being rendered\r\n     */\r\n    public prepareDefines(_defines: MaterialDefines, _scene: Scene, _mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param _texture - Base texture to use.\r\n     * @returns - Boolean specifying if a texture is used in the material.\r\n     */\r\n    public hasTexture(_texture: BaseTexture): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     * @returns true if this uses a render target otherwise false.\r\n     */\r\n    public hasRenderTargetTextures(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Fills the list of render target textures.\r\n     * @param _renderTargets the list of render targets to update\r\n     */\r\n    public fillRenderTargetTextures(_renderTargets: SmartArray<RenderTargetTexture>): void {}\r\n\r\n    /**\r\n     * Returns an array of the actively used textures.\r\n     * @param _activeTextures Array of BaseTextures\r\n     */\r\n    public getActiveTextures(_activeTextures: BaseTexture[]): void {}\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * @param _animatables Array of animatable textures.\r\n     */\r\n    public getAnimatables(_animatables: IAnimatable[]): void {}\r\n\r\n    /**\r\n     * Add fallbacks to the effect fallbacks list.\r\n     * @param defines defines the Base texture to use.\r\n     * @param fallbacks defines the current fallback list.\r\n     * @param currentRank defines the current fallback rank.\r\n     * @returns the new fallback rank.\r\n     */\r\n    public addFallbacks(defines: MaterialDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        return currentRank;\r\n    }\r\n\r\n    /**\r\n     * Gets the samplers used by the plugin.\r\n     * @param _samplers list that the sampler names should be added to.\r\n     */\r\n    public getSamplers(_samplers: string[]): void {}\r\n\r\n    /**\r\n     * Gets the attributes used by the plugin.\r\n     * @param _attributes list that the attribute names should be added to.\r\n     * @param _scene the scene that the material belongs to.\r\n     * @param _mesh the mesh being rendered.\r\n     */\r\n    public getAttributes(_attributes: string[], _scene: Scene, _mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Gets the uniform buffers names added by the plugin.\r\n     * @param _ubos list that the ubo names should be added to.\r\n     */\r\n    public getUniformBuffersNames(_ubos: string[]): void {}\r\n\r\n    /**\r\n     * Gets the description of the uniforms to add to the ubo (if engine supports ubos) or to inject directly in the vertex/fragment shaders (if engine does not support ubos)\r\n     * @param _shaderLanguage The shader language to use.\r\n     * @returns the description of the uniforms\r\n     */\r\n    public getUniforms(_shaderLanguage = ShaderLanguage.GLSL): {\r\n        ubo?: Array<{ name: string; size?: number; type?: string; arraySize?: number }>;\r\n        vertex?: string;\r\n        fragment?: string;\r\n    } {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param plugin define the config where to copy the info\r\n     */\r\n    public copyTo(plugin: MaterialPluginBase): void {\r\n        SerializationHelper.Clone(() => plugin, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this plugin configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a plugin configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.MaterialPluginBase\", MaterialPluginBase);\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { MaterialDefines } from \"./materialDefines\";\r\nimport { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { StandardMaterial } from \"./standardMaterial\";\r\nimport type { PBRBaseMaterial } from \"./PBR/pbrBaseMaterial\";\r\nimport { BindTextureMatrix, PrepareDefinesForMergedUV } from \"./materialHelper.functions\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialDetailMapDefines extends MaterialDefines {\r\n    DETAIL = false;\r\n    DETAILDIRECTUV = 0;\r\n    DETAIL_NORMALBLENDMETHOD = 0;\r\n}\r\n\r\n/**\r\n * Plugin that implements the detail map component of a material\r\n *\r\n * Inspired from:\r\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\r\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\r\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\r\n */\r\nexport class DetailMapConfiguration extends MaterialPluginBase {\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The detail texture of the material.\r\n     */\r\n    @serializeAsTexture(\"detailTexture\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\r\n     * Bigger values mean stronger blending\r\n     */\r\n    @serialize()\r\n    public diffuseBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strongly the detail roughness channel is blended with the regular roughness value\r\n     * Bigger values mean stronger blending. Only used with PBR materials\r\n     */\r\n    @serialize()\r\n    public roughnessBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strong the bump effect from the detail map is\r\n     * Bigger values mean stronger effect\r\n     */\r\n    @serialize()\r\n    public bumpLevel = 1;\r\n\r\n    private _normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\r\n    /**\r\n     * The method used to blend the bump and detail normals together\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalBlendMethod: number;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Enable or disable the detail map on this material\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public override isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial | StandardMaterial, addToPluginList = true) {\r\n        super(material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public override isReadyForSubMesh(defines: MaterialDetailMapDefines, scene: Scene, engine: AbstractEngine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty && scene.texturesEnabled) {\r\n            if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                // Detail texture cannot be not blocking.\r\n                if (!this._texture.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public override prepareDefines(defines: MaterialDetailMapDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n\r\n            const engine = scene.getEngine();\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\r\n                    PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\r\n                    defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n                } else {\r\n                    defines.DETAIL = false;\r\n                }\r\n            }\r\n        } else {\r\n            defines.DETAIL = false;\r\n        }\r\n    }\r\n\r\n    public override bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\r\n                BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.setTexture(\"detailSampler\", this._texture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public override getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public override dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n        }\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"DetailMapConfiguration\";\r\n    }\r\n\r\n    public override getSamplers(samplers: string[]): void {\r\n        samplers.push(\"detailSampler\");\r\n    }\r\n\r\n    public override getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vDetailInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"detailMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n", "// eslint-disable-next-line import/no-internal-modules\r\nimport type { MaterialDefines, Effect, Mesh, AbstractMesh, Material } from \"core/index\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Matrix } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Type of clear operation to perform on a geometry texture.\r\n */\r\nexport const enum GeometryRenderingTextureClearType {\r\n    /**\r\n     * Clear the texture with zero.\r\n     */\r\n    Zero = 0,\r\n\r\n    /**\r\n     * Clear the texture with one.\r\n     */\r\n    One = 1,\r\n\r\n    /**\r\n     * Clear the texture with the maximum view Z value.\r\n     */\r\n    MaxViewZ = 2,\r\n}\r\n\r\n/**\r\n * Configuration for geometry rendering.\r\n * A configuration is created for each rendering pass a geometry rendering is used in.\r\n */\r\nexport type GeometryRenderingConfiguration = {\r\n    /**\r\n     * Defines used for the geometry rendering.\r\n     */\r\n    defines: { [name: string]: number };\r\n\r\n    /**\r\n     * Previous world matrices for meshes.\r\n     */\r\n    previousWorldMatrices: { [index: number]: Matrix };\r\n\r\n    /**\r\n     * Previous view projection matrix.\r\n     */\r\n    previousViewProjection: Matrix;\r\n\r\n    /**\r\n     * Current view projection matrix.\r\n     */\r\n    currentViewProjection: Matrix;\r\n\r\n    /**\r\n     * Previous bones for skinned meshes.\r\n     */\r\n    previousBones: { [index: number]: Float32Array };\r\n\r\n    /**\r\n     * Last frame id the configuration was updated.\r\n     */\r\n    lastUpdateFrameId: number;\r\n\r\n    /**\r\n     * List of excluded skinned meshes.\r\n     */\r\n    excludedSkinnedMesh: AbstractMesh[];\r\n\r\n    /**\r\n     * Whether to reverse culling for the geometry rendering (meaning, if back faces should be culled, front faces are culled instead, and the other way around).\r\n     */\r\n    reverseCulling: boolean;\r\n};\r\n\r\n/**\r\n * Helper class to manage geometry rendering.\r\n */\r\nexport class MaterialHelperGeometryRendering {\r\n    /**\r\n     * Descriptions of the geometry textures.\r\n     */\r\n    public static readonly GeometryTextureDescriptions = [\r\n        {\r\n            type: Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\r\n            name: \"Irradiance\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_IRRADIANCE\",\r\n            defineIndex: \"PREPASS_IRRADIANCE_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n            name: \"WorldPosition\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_POSITION\",\r\n            defineIndex: \"PREPASS_POSITION_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\r\n            name: \"Velocity\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_VELOCITY\",\r\n            defineIndex: \"PREPASS_VELOCITY_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\r\n            name: \"Reflectivity\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_REFLECTIVITY\",\r\n            defineIndex: \"PREPASS_REFLECTIVITY_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n            name: \"ViewDepth\",\r\n            clearType: GeometryRenderingTextureClearType.MaxViewZ,\r\n            define: \"PREPASS_DEPTH\",\r\n            defineIndex: \"PREPASS_DEPTH_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\r\n            name: \"ViewNormal\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_NORMAL\",\r\n            defineIndex: \"PREPASS_NORMAL_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\r\n            name: \"AlbedoSqrt\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_ALBEDO_SQRT\",\r\n            defineIndex: \"PREPASS_ALBEDO_SQRT_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_WORLD_NORMAL_TEXTURE_TYPE,\r\n            name: \"WorldNormal\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_WORLD_NORMAL\",\r\n            defineIndex: \"PREPASS_WORLD_NORMAL_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_LOCAL_POSITION_TEXTURE_TYPE,\r\n            name: \"LocalPosition\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_LOCAL_POSITION\",\r\n            defineIndex: \"PREPASS_LOCAL_POSITION_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE,\r\n            name: \"ScreenDepth\",\r\n            clearType: GeometryRenderingTextureClearType.One,\r\n            define: \"PREPASS_SCREENSPACE_DEPTH\",\r\n            defineIndex: \"PREPASS_SCREENSPACE_DEPTH_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE,\r\n            name: \"LinearVelocity\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_VELOCITY_LINEAR\",\r\n            defineIndex: \"PREPASS_VELOCITY_LINEAR_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_ALBEDO_TEXTURE_TYPE,\r\n            name: \"Albedo\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_ALBEDO\",\r\n            defineIndex: \"PREPASS_ALBEDO_INDEX\",\r\n        },\r\n    ];\r\n\r\n    private static _Configurations: { [renderPassId: number]: GeometryRenderingConfiguration } = {};\r\n\r\n    /**\r\n     * Creates a new geometry rendering configuration.\r\n     * @param renderPassId Render pass id the configuration is created for.\r\n     * @returns The created configuration.\r\n     */\r\n    public static CreateConfiguration(renderPassId: number) {\r\n        MaterialHelperGeometryRendering._Configurations[renderPassId] = {\r\n            defines: {},\r\n            previousWorldMatrices: {},\r\n            previousViewProjection: Matrix.Zero(),\r\n            currentViewProjection: Matrix.Zero(),\r\n            previousBones: {},\r\n            lastUpdateFrameId: -1,\r\n            excludedSkinnedMesh: [],\r\n            reverseCulling: false,\r\n        };\r\n        return MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Deletes a geometry rendering configuration.\r\n     * @param renderPassId The render pass id of the configuration to delete.\r\n     */\r\n    public static DeleteConfiguration(renderPassId: number) {\r\n        delete MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Gets a geometry rendering configuration.\r\n     * @param renderPassId The render pass id of the configuration to get.\r\n     * @returns The configuration.\r\n     */\r\n    public static GetConfiguration(renderPassId: number): GeometryRenderingConfiguration {\r\n        return MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Adds uniforms and samplers for geometry rendering.\r\n     * @param uniforms The array of uniforms to add to.\r\n     * @param _samplers The array of samplers to add to.\r\n     */\r\n    public static AddUniformsAndSamplers(uniforms: string[], _samplers: string[]) {\r\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\r\n    }\r\n\r\n    /**\r\n     * Marks a list of meshes as dirty for geometry rendering.\r\n     * @param renderPassId The render pass id the meshes are marked as dirty for.\r\n     * @param meshes The list of meshes to mark as dirty.\r\n     */\r\n    public static MarkAsDirty(renderPassId: number, meshes: AbstractMesh[]) {\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n\r\n            for (const subMesh of mesh.subMeshes) {\r\n                subMesh._removeDrawWrapper(renderPassId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares defines for geometry rendering.\r\n     * @param renderPassId The render pass id the defines are prepared for.\r\n     * @param mesh The mesh the defines are prepared for.\r\n     * @param defines The defines to update according to the geometry rendering configuration.\r\n     */\r\n    public static PrepareDefines(renderPassId: number, mesh: AbstractMesh, defines: MaterialDefines) {\r\n        if (!defines._arePrePassDirty) {\r\n            return;\r\n        }\r\n\r\n        const configuration = MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n        if (!configuration) {\r\n            return;\r\n        }\r\n\r\n        defines[\"PREPASS\"] = true;\r\n        defines[\"PREPASS_COLOR\"] = false;\r\n        defines[\"PREPASS_COLOR_INDEX\"] = -1;\r\n\r\n        let numMRT = 0;\r\n\r\n        for (let i = 0; i < MaterialHelperGeometryRendering.GeometryTextureDescriptions.length; i++) {\r\n            const geometryTextureDescription = MaterialHelperGeometryRendering.GeometryTextureDescriptions[i];\r\n            const defineName = geometryTextureDescription.define;\r\n            const defineIndex = geometryTextureDescription.defineIndex;\r\n            const index = configuration.defines[defineIndex];\r\n\r\n            if (index !== undefined) {\r\n                defines[defineName] = true;\r\n                defines[defineIndex] = index;\r\n                numMRT++;\r\n            } else {\r\n                defines[defineName] = false;\r\n                delete defines[defineIndex];\r\n            }\r\n        }\r\n\r\n        defines[\"SCENE_MRT_COUNT\"] = numMRT;\r\n\r\n        defines[\"BONES_VELOCITY_ENABLED\"] =\r\n            mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton && !mesh.skeleton.isUsingTextureForMatrices && configuration.excludedSkinnedMesh.indexOf(mesh) === -1;\r\n    }\r\n\r\n    /**\r\n     * Binds geometry rendering data for a mesh.\r\n     * @param renderPassId The render pass id the geometry rendering data is bound for.\r\n     * @param effect The effect to bind the geometry rendering data to.\r\n     * @param mesh The mesh to bind the geometry rendering data for.\r\n     * @param world The world matrix of the mesh.\r\n     * @param material The material of the mesh.\r\n     */\r\n    public static Bind(renderPassId: number, effect: Effect, mesh: Mesh, world: Matrix, material: Material) {\r\n        const configuration = MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n        if (!configuration) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if (configuration.reverseCulling) {\r\n            engine.setStateCullFaceType(scene._mirroredCameraPosition ? material.cullBackFaces : !material.cullBackFaces);\r\n        }\r\n\r\n        if (configuration.defines[\"PREPASS_VELOCITY_INDEX\"] !== undefined || configuration.defines[\"PREPASS_VELOCITY_LINEAR_INDEX\"] !== undefined) {\r\n            if (!configuration.previousWorldMatrices[mesh.uniqueId]) {\r\n                configuration.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n            }\r\n\r\n            if (!configuration.previousViewProjection) {\r\n                configuration.previousViewProjection = scene.getTransformMatrix().clone();\r\n                configuration.currentViewProjection = scene.getTransformMatrix().clone();\r\n            }\r\n\r\n            if (configuration.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\r\n                // First update of the prepass configuration for this rendering pass\r\n                configuration.lastUpdateFrameId = engine.frameId;\r\n                configuration.previousViewProjection.copyFrom(configuration.currentViewProjection);\r\n                configuration.currentViewProjection.copyFrom(scene.getTransformMatrix());\r\n            } else if (configuration.lastUpdateFrameId !== engine.frameId) {\r\n                // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\r\n                configuration.lastUpdateFrameId = engine.frameId;\r\n                configuration.previousViewProjection.copyFrom(configuration.currentViewProjection);\r\n            }\r\n\r\n            effect.setMatrix(\"previousWorld\", configuration.previousWorldMatrices[mesh.uniqueId]);\r\n            effect.setMatrix(\"previousViewProjection\", configuration.previousViewProjection);\r\n\r\n            configuration.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n\r\n            if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n                const skeleton = mesh.skeleton;\r\n\r\n                if (!skeleton.isUsingTextureForMatrices || effect.getUniformIndex(\"boneTextureWidth\") === -1) {\r\n                    const matrices = skeleton.getTransformMatrices(mesh);\r\n\r\n                    if (matrices) {\r\n                        if (!configuration.previousBones[mesh.uniqueId]) {\r\n                            configuration.previousBones[mesh.uniqueId] = matrices.slice();\r\n                        }\r\n                        effect.setMatrices(\"mPreviousBones\", configuration.previousBones[mesh.uniqueId]);\r\n                        configuration.previousBones[mesh.uniqueId].set(matrices);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\n\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { PrePassConfiguration } from \"./prePassConfiguration\";\r\n\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration.defines\";\r\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration\";\r\nimport type { ColorCurves } from \"./colorCurves\";\r\nimport type { FresnelParameters } from \"./fresnelParameters\";\r\nimport type { ICustomShaderNameResolveOptions } from \"../Materials/material\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\n\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport type { Effect, IEffectCreationOptions } from \"./effect\";\r\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"./clipPlaneMaterialHelper\";\r\nimport {\r\n    BindBonesParameters,\r\n    BindFogParameters,\r\n    BindLights,\r\n    BindLogDepth,\r\n    BindMorphTargetParameters,\r\n    BindTextureMatrix,\r\n    HandleFallbacksForShadows,\r\n    PrepareAttributesForBakedVertexAnimation,\r\n    PrepareAttributesForBones,\r\n    PrepareAttributesForInstances,\r\n    PrepareAttributesForMorphTargets,\r\n    PrepareDefinesForAttributes,\r\n    PrepareDefinesForFrameBoundValues,\r\n    PrepareDefinesForLights,\r\n    PrepareDefinesForMergedUV,\r\n    PrepareDefinesForMisc,\r\n    PrepareDefinesForMultiview,\r\n    PrepareDefinesForOIT,\r\n    PrepareDefinesForPrePass,\r\n    PrepareUniformsAndSamplersList,\r\n} from \"./materialHelper.functions\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\nimport { MaterialHelperGeometryRendering } from \"./materialHelper.geometryrendering\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/** @internal */\r\nexport class StandardMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public MAINUV1 = false;\r\n    public MAINUV2 = false;\r\n    public MAINUV3 = false;\r\n    public MAINUV4 = false;\r\n    public MAINUV5 = false;\r\n    public MAINUV6 = false;\r\n    public DIFFUSE = false;\r\n    public DIFFUSEDIRECTUV = 0;\r\n    public BAKED_VERTEX_ANIMATION_TEXTURE = false;\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public OPACITY = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public REFLECTION = false;\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    public SPECULAR = false;\r\n    public SPECULARDIRECTUV = 0;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public PARALLAX = false;\r\n    public PARALLAX_RHS = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public SPECULAROVERALPHA = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHAFROMDIFFUSE = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public DIFFUSEFRESNEL = false;\r\n    public OPACITYFRESNEL = false;\r\n    public REFLECTIONFRESNEL = false;\r\n    public REFRACTIONFRESNEL = false;\r\n    public EMISSIVEFRESNEL = false;\r\n    public FRESNEL = false;\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public UV3 = false;\r\n    public UV4 = false;\r\n    public UV5 = false;\r\n    public UV6 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public GLOSSINESS = false;\r\n    public ROUGHNESS = false;\r\n    public EMISSIVEASILLUMINATION = false;\r\n    public LINKEMISSIVEWITHDIFFUSE = false;\r\n    public REFLECTIONFRESNELFROMSPECULAR = false;\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFRACTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public INVERTCUBICMAP = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    public REFRACTION = false;\r\n    public REFRACTIONMAP_3D = false;\r\n    public REFLECTIONOVERALPHA = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_POSITION = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public MORPHTARGETS_UV2 = false;\r\n    public MORPHTARGETS_COLOR = false;\r\n    public MORPHTARGETTEXTURE_HASPOSITIONS = false;\r\n    public MORPHTARGETTEXTURE_HASNORMALS = false;\r\n    public MORPHTARGETTEXTURE_HASTANGENTS = false;\r\n    public MORPHTARGETTEXTURE_HASUVS = false;\r\n    public MORPHTARGETTEXTURE_HASUV2S = false;\r\n    public MORPHTARGETTEXTURE_HASCOLORS = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n    public NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\r\n    public PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\r\n    public ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\r\n    public ALPHABLEND = true;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_COLOR = false;\r\n    public PREPASS_COLOR_INDEX = -1;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO = false;\r\n    public PREPASS_ALBEDO_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_SCREENSPACE_DEPTH = false;\r\n    public PREPASS_SCREENSPACE_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_NORMAL_WORLDSPACE = false;\r\n    public PREPASS_WORLD_NORMAL = false;\r\n    public PREPASS_WORLD_NORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_LOCAL_POSITION = false;\r\n    public PREPASS_LOCAL_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_VELOCITY_LINEAR = false;\r\n    public PREPASS_VELOCITY_LINEAR_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public RGBDLIGHTMAP = false;\r\n    public RGBDREFLECTION = false;\r\n    public RGBDREFRACTION = false;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = 0;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n    public CAMERA_ORTHOGRAPHIC = false;\r\n    public CAMERA_PERSPECTIVE = false;\r\n    public AREALIGHTSUPPORTED = true;\r\n\r\n    /**\r\n     * If the reflection texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFLECTION_LINEAR = false;\r\n    /**\r\n     * If the refraction texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFRACTION_LINEAR = false;\r\n    public EXPOSURE = false;\r\n\r\n    public DECAL_AFTER_DETAIL = false;\r\n\r\n    /**\r\n     * Initializes the Standard Material defines.\r\n     * @param externalProperties The external properties\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n\r\n    public setReflectionMode(modeToEnable: string) {\r\n        const modes = [\r\n            \"REFLECTIONMAP_CUBIC\",\r\n            \"REFLECTIONMAP_EXPLICIT\",\r\n            \"REFLECTIONMAP_PLANAR\",\r\n            \"REFLECTIONMAP_PROJECTION\",\r\n            \"REFLECTIONMAP_PROJECTION\",\r\n            \"REFLECTIONMAP_SKYBOX\",\r\n            \"REFLECTIONMAP_SPHERICAL\",\r\n            \"REFLECTIONMAP_EQUIRECTANGULAR\",\r\n            \"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\",\r\n            \"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\",\r\n        ];\r\n\r\n        for (const mode of modes) {\r\n            (<any>this)[mode] = mode === modeToEnable;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * This is the default material used in Babylon. It is the best trade off between quality\r\n * and performances.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n */\r\nexport class StandardMaterial extends PushMaterial {\r\n    /**\r\n     * Force all the standard materials to compile to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static ForceGLSL = false;\r\n\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The basic texture of the material as viewed under a light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"ambientTexture\")\r\n    private _ambientTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature, it helps adding baked shadows into your material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public ambientTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the transparency of the material from a texture.\r\n     * The final alpha value can be read either from the red channel (if texture.getAlphaFromRGB is false)\r\n     * or from the luminance or the current texel (if texture.getAlphaFromRGB is true)\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"reflectionTexture\")\r\n    private _reflectionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the reflection.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"emissiveTexture\")\r\n    private _emissiveTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define texture of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"specularTexture\")\r\n    private _specularTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public specularTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"bumpTexture\")\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Bump mapping is a technique to simulate bump and dents on a rendered surface.\r\n     * These are made by creating a normal map from an image. The means to do this can be found on the web, a search for 'normal map generator' will bring up free and paid for methods of doing this.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#bump-map\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"lightmapTexture\")\r\n    private _lightmapTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Complex lighting can be computationally expensive to compute at runtime.\r\n     * To save on computation, lightmaps may be used to store calculated lighting in a texture which will be applied to a given mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction#lightmaps\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public lightmapTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"refractionTexture\")\r\n    private _refractionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the refraction.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public refractionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * The color of the material lit by the environmental background lighting.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#ambient-color-example\r\n     */\r\n    @serializeAsColor3(\"ambient\")\r\n    public ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * The basic color of the material as viewed under a light.\r\n     */\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @serializeAsColor3(\"specular\")\r\n    public specularColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define the color of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @serializeAsColor3(\"emissive\")\r\n    public emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Defines how sharp are the highlights in the material.\r\n     * The bigger the value the sharper giving a more glossy feeling to the result.\r\n     * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\r\n     */\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"useAlphaFromDiffuseTexture\")\r\n    private _useAlphaFromDiffuseTexture = false;\r\n    /**\r\n     * Does the transparency come from the diffuse texture alpha channel.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public useAlphaFromDiffuseTexture: boolean;\r\n\r\n    @serialize(\"useEmissiveAsIllumination\")\r\n    private _useEmissiveAsIllumination = false;\r\n    /**\r\n     * If true, the emissive value is added into the end result, otherwise it is multiplied in.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useEmissiveAsIllumination: boolean;\r\n\r\n    @serialize(\"linkEmissiveWithDiffuse\")\r\n    private _linkEmissiveWithDiffuse = false;\r\n    /**\r\n     * If true, some kind of energy conservation will prevent the end result to be more than 1 by reducing\r\n     * the emissive level when the final color is close to one.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public linkEmissiveWithDiffuse: boolean;\r\n\r\n    @serialize(\"useSpecularOverAlpha\")\r\n    private _useSpecularOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useSpecularOverAlpha: boolean;\r\n\r\n    @serialize(\"useReflectionOverAlpha\")\r\n    private _useReflectionOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useReflectionOverAlpha: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    /**\r\n     * Does lights from the scene impacts this material.\r\n     * It can be a nice trick for performance to disable lighting on a fully emissive material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"useObjectSpaceNormalMap\")\r\n    private _useObjectSpaceNormalMap = false;\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useObjectSpaceNormalMap: boolean;\r\n\r\n    @serialize(\"useParallax\")\r\n    private _useParallax = false;\r\n    /**\r\n     * Is parallax enabled or not.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallax: boolean;\r\n\r\n    @serialize(\"useParallaxOcclusion\")\r\n    private _useParallaxOcclusion = false;\r\n    /**\r\n     * Is parallax occlusion enabled or not.\r\n     * If true, the outcome is way more realistic than traditional Parallax but you can expect a performance hit that worthes consideration.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallaxOcclusion: boolean;\r\n\r\n    /**\r\n     * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\r\n     */\r\n    @serialize()\r\n    public parallaxScaleBias = 0.05;\r\n\r\n    @serialize(\"roughness\")\r\n    private _roughness = 0;\r\n    /**\r\n     * Helps to define how blurry the reflections should appears in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: number;\r\n\r\n    /**\r\n     * In case of refraction, define the value of the index of refraction.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public indexOfRefraction = 0.98;\r\n\r\n    /**\r\n     * Invert the refraction texture alongside the y axis.\r\n     * It can be useful with procedural textures or probe for instance.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public invertRefractionY = true;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    public alphaCutOff = 0.4;\r\n\r\n    @serialize(\"useLightmapAsShadowmap\")\r\n    private _useLightmapAsShadowmap = false;\r\n    /**\r\n     * In case of light mapping, define whether the map contains light or shadow informations.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLightmapAsShadowmap: boolean;\r\n\r\n    // Fresnel\r\n    @serializeAsFresnelParameters(\"diffuseFresnelParameters\")\r\n    private _diffuseFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the diffuse fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public diffuseFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"opacityFresnelParameters\")\r\n    private _opacityFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the opacity fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\r\n    public opacityFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"reflectionFresnelParameters\")\r\n    private _reflectionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the reflection fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public reflectionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"refractionFresnelParameters\")\r\n    private _refractionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the refraction fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public refractionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"emissiveFresnelParameters\")\r\n    private _emissiveFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the emissive fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public emissiveFresnelParameters: FresnelParameters;\r\n\r\n    @serialize(\"useReflectionFresnelFromSpecular\")\r\n    private _useReflectionFresnelFromSpecular = false;\r\n    /**\r\n     * If true automatically deducts the fresnels values from the material specularity.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public useReflectionFresnelFromSpecular: boolean;\r\n\r\n    @serialize(\"useGlossinessFromSpecularMapAlpha\")\r\n    private _useGlossinessFromSpecularMapAlpha = false;\r\n    /**\r\n     * Defines if the glossiness/roughness of the material should be read from the specular map alpha channel\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useGlossinessFromSpecularMapAlpha: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    /**\r\n     * Defines the maximum number of lights that can be used in the material\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    @serialize(\"invertNormalMapX\")\r\n    private _invertNormalMapX = false;\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX: boolean;\r\n\r\n    @serialize(\"invertNormalMapY\")\r\n    private _invertNormalMapY = false;\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY: boolean;\r\n\r\n    @serialize(\"twoSidedLighting\")\r\n    private _twoSidedLighting = false;\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public twoSidedLighting: boolean;\r\n\r\n    @serialize(\"applyDecalMapAfterDetailMap\")\r\n    private _applyDecalMapAfterDetailMap = false;\r\n    /**\r\n     * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public applyDecalMapAfterDetailMap: boolean;\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the standard Material.\r\n     */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        this._attachImageProcessingConfiguration(value);\r\n\r\n        // Ensure the effect will be rebuilt.\r\n        this._markAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the Standard Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _shadersLoaded = false;\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public override get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get cameraColorCurvesEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set cameraColorCurvesEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get cameraColorGradingEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public set cameraColorGradingEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether tonemapping is enabled or not.\r\n     */\r\n    public get cameraToneMappingEnabled(): boolean {\r\n        return this._imageProcessingConfiguration.toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether tonemapping is enabled or not\r\n     */\r\n    public set cameraToneMappingEnabled(value: boolean) {\r\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public get cameraExposure(): number {\r\n        return this._imageProcessingConfiguration.exposure;\r\n    }\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public set cameraExposure(value: number) {\r\n        this._imageProcessingConfiguration.exposure = value;\r\n    }\r\n\r\n    /**\r\n     * Gets The camera contrast used on this material.\r\n     */\r\n    public get cameraContrast(): number {\r\n        return this._imageProcessingConfiguration.contrast;\r\n    }\r\n\r\n    /**\r\n     * Sets The camera contrast used on this material.\r\n     */\r\n    public set cameraContrast(value: number) {\r\n        this._imageProcessingConfiguration.contrast = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public get cameraColorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._imageProcessingConfiguration.colorGradingTexture;\r\n    }\r\n    /**\r\n     * Sets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public set cameraColorGradingTexture(value: Nullable<BaseTexture>) {\r\n        this._imageProcessingConfiguration.colorGradingTexture = value;\r\n    }\r\n\r\n    /**\r\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public get cameraColorCurves(): Nullable<ColorCurves> {\r\n        return this._imageProcessingConfiguration.colorCurves;\r\n    }\r\n    /**\r\n     * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public set cameraColorCurves(value: Nullable<ColorCurves>) {\r\n        this._imageProcessingConfiguration.colorCurves = value;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public override get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n    protected _globalAmbientColor = new Color3(0, 0, 0);\r\n    protected _cacheHasRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Instantiates a new standard material.\r\n     * This is the default material used in Babylon. It is the best trade off between quality\r\n     * and performances.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belong to\r\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\r\n     */\r\n    constructor(name: string, scene?: Scene, forceGLSL = false) {\r\n        super(name, scene, undefined, forceGLSL || StandardMaterial.ForceGLSL);\r\n\r\n        this.detailMap = new DetailMapConfiguration(this);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._refractionTexture);\r\n            }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public override get hasRenderTargetTextures(): boolean {\r\n        if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this._cacheHasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"StandardMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public override needAlphaBlending(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsBlend;\r\n        }\r\n\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            this.alpha < 1.0 ||\r\n            this._opacityTexture != null ||\r\n            this._shouldUseAlphaFromDiffuseTexture() ||\r\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public override needAlphaTesting(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsTest;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not the alpha value of the diffuse texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromDiffuseTexture(): boolean {\r\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * Get the texture used for alpha test purpose.\r\n     * @returns the diffuse texture in case of the standard material.\r\n     */\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._diffuseTexture;\r\n    }\r\n\r\n    /**\r\n     * Get if the submesh is ready to be used and all its information available.\r\n     * Child classes can use it to update shaders\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: boolean = false): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (drawWrapper.effect && this.isFrozen) {\r\n            if (drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        defines._needNormals = PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Multiview\r\n        PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        MaterialHelperGeometryRendering.PrepareDefines(engine.currentRenderPassId, mesh, defines);\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            defines._needUVs = false;\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                defines[\"MAINUV\" + i] = false;\r\n            }\r\n            if (scene.texturesEnabled) {\r\n                defines.DIFFUSEDIRECTUV = 0;\r\n                defines.BUMPDIRECTUV = 0;\r\n                defines.AMBIENTDIRECTUV = 0;\r\n                defines.OPACITYDIRECTUV = 0;\r\n                defines.EMISSIVEDIRECTUV = 0;\r\n                defines.SPECULARDIRECTUV = 0;\r\n                defines.LIGHTMAPDIRECTUV = 0;\r\n\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\r\n                    }\r\n                } else {\r\n                    defines.DIFFUSE = false;\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    }\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                    }\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    if (!this._reflectionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needNormals = true;\r\n                        defines.REFLECTION = true;\r\n\r\n                        defines.ROUGHNESS = this._roughness > 0;\r\n                        defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\r\n                        defines.INVERTCUBICMAP = this._reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\r\n                        defines.REFLECTIONMAP_3D = this._reflectionTexture.isCube;\r\n                        defines.REFLECTIONMAP_OPPOSITEZ =\r\n                            defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !this._reflectionTexture.invertZ : this._reflectionTexture.invertZ;\r\n                        defines.RGBDREFLECTION = this._reflectionTexture.isRGBD;\r\n\r\n                        switch (this._reflectionTexture.coordinatesMode) {\r\n                            case Texture.EXPLICIT_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EXPLICIT\");\r\n                                break;\r\n                            case Texture.PLANAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_PLANAR\");\r\n                                break;\r\n                            case Texture.PROJECTION_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_PROJECTION\");\r\n                                break;\r\n                            case Texture.SKYBOX_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_SKYBOX\");\r\n                                break;\r\n                            case Texture.SPHERICAL_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_SPHERICAL\");\r\n                                break;\r\n                            case Texture.EQUIRECTANGULAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR\");\r\n                                break;\r\n                            case Texture.FIXED_EQUIRECTANGULAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\");\r\n                                break;\r\n                            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\");\r\n                                break;\r\n                            case Texture.CUBIC_MODE:\r\n                            case Texture.INVCUBIC_MODE:\r\n                            default:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_CUBIC\");\r\n                                break;\r\n                        }\r\n\r\n                        defines.USE_LOCAL_REFLECTIONMAP_CUBIC = (<any>this._reflectionTexture).boundingBoxSize ? true : false;\r\n                    }\r\n                } else {\r\n                    defines.REFLECTION = false;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                    }\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                    }\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\r\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\r\n                    }\r\n                } else {\r\n                    defines.SPECULAR = false;\r\n                }\r\n\r\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\r\n                    // Bump texture can not be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                        defines.PARALLAX = this._useParallax;\r\n                        defines.PARALLAX_RHS = scene.useRightHandedSystem;\r\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                    defines.PARALLAX = false;\r\n                    defines.PARALLAX_RHS = false;\r\n                    defines.PARALLAXOCCLUSION = false;\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.REFRACTION = true;\r\n\r\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\r\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\r\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = (<any>this._refractionTexture).boundingBoxSize ? true : false;\r\n                    }\r\n                } else {\r\n                    defines.REFRACTION = false;\r\n                }\r\n\r\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\r\n            } else {\r\n                defines.DIFFUSE = false;\r\n                defines.AMBIENT = false;\r\n                defines.OPACITY = false;\r\n                defines.REFLECTION = false;\r\n                defines.EMISSIVE = false;\r\n                defines.LIGHTMAP = false;\r\n                defines.BUMP = false;\r\n                defines.REFRACTION = false;\r\n            }\r\n\r\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\r\n\r\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\r\n\r\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n\r\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\r\n\r\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n\r\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\r\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\r\n        }\r\n\r\n        if (defines._areFresnelDirty) {\r\n            if (StandardMaterial.FresnelEnabled) {\r\n                // Fresnel\r\n                if (\r\n                    this._diffuseFresnelParameters ||\r\n                    this._opacityFresnelParameters ||\r\n                    this._emissiveFresnelParameters ||\r\n                    this._refractionFresnelParameters ||\r\n                    this._reflectionFresnelParameters\r\n                ) {\r\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\r\n\r\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\r\n\r\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\r\n\r\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\r\n\r\n                    defines._needNormals = true;\r\n                    defines.FRESNEL = true;\r\n                }\r\n            } else {\r\n                defines.FRESNEL = false;\r\n            }\r\n        }\r\n\r\n        // Check if Area Lights have LTC texture.\r\n        if (defines[\"AREALIGHTUSED\"]) {\r\n            for (let index = 0; index < mesh.lightSources.length; index++) {\r\n                if (!mesh.lightSources[index]._isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        PrepareDefinesForMisc(\r\n            mesh,\r\n            scene,\r\n            this._useLogarithmicDepth,\r\n            this.pointsCloud,\r\n            this.fogEnabled,\r\n            this.needAlphaTestingForMesh(mesh),\r\n            defines,\r\n            this._applyDecalMapAfterDetailMap\r\n        );\r\n\r\n        // Values that need to be evaluated on every frame\r\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, true, true, true);\r\n\r\n        // External config\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n\r\n        // Get correct effect\r\n        let forceWasNotReadyPreviously = false;\r\n\r\n        if (defines.isDirty) {\r\n            const lightDisposed = defines._areLightsDisposed;\r\n            defines.markAsProcessed();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.REFLECTION) {\r\n                fallbacks.addFallback(0, \"REFLECTION\");\r\n            }\r\n\r\n            if (defines.SPECULAR) {\r\n                fallbacks.addFallback(0, \"SPECULAR\");\r\n            }\r\n\r\n            if (defines.BUMP) {\r\n                fallbacks.addFallback(0, \"BUMP\");\r\n            }\r\n\r\n            if (defines.PARALLAX) {\r\n                fallbacks.addFallback(1, \"PARALLAX\");\r\n            }\r\n\r\n            if (defines.PARALLAX_RHS) {\r\n                fallbacks.addFallback(1, \"PARALLAX_RHS\");\r\n            }\r\n\r\n            if (defines.PARALLAXOCCLUSION) {\r\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\r\n            }\r\n\r\n            if (defines.SPECULAROVERALPHA) {\r\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\r\n            }\r\n\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.POINTSIZE) {\r\n                fallbacks.addFallback(0, \"POINTSIZE\");\r\n            }\r\n\r\n            if (defines.LOGARITHMICDEPTH) {\r\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\r\n\r\n            if (defines.SPECULARTERM) {\r\n                fallbacks.addFallback(0, \"SPECULARTERM\");\r\n            }\r\n\r\n            if (defines.DIFFUSEFRESNEL) {\r\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\r\n            }\r\n\r\n            if (defines.OPACITYFRESNEL) {\r\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\r\n            }\r\n\r\n            if (defines.REFLECTIONFRESNEL) {\r\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\r\n            }\r\n\r\n            if (defines.EMISSIVEFRESNEL) {\r\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\r\n            }\r\n\r\n            if (defines.FRESNEL) {\r\n                fallbacks.addFallback(4, \"FRESNEL\");\r\n            }\r\n\r\n            if (defines.MULTIVIEW) {\r\n                fallbacks.addFallback(0, \"MULTIVIEW\");\r\n            }\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                if (defines[\"UV\" + i]) {\r\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n                }\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            PrepareAttributesForInstances(attribs, defines);\r\n            PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n\r\n            let shaderName = \"default\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vAmbientColor\",\r\n                \"vDiffuseColor\",\r\n                \"vSpecularColor\",\r\n                \"vEmissiveColor\",\r\n                \"visibility\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"vAmbientInfos\",\r\n                \"vOpacityInfos\",\r\n                \"vReflectionInfos\",\r\n                \"vEmissiveInfos\",\r\n                \"vSpecularInfos\",\r\n                \"vBumpInfos\",\r\n                \"vLightmapInfos\",\r\n                \"vRefractionInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n                \"ambientMatrix\",\r\n                \"opacityMatrix\",\r\n                \"reflectionMatrix\",\r\n                \"emissiveMatrix\",\r\n                \"specularMatrix\",\r\n                \"bumpMatrix\",\r\n                \"normalMatrix\",\r\n                \"lightmapMatrix\",\r\n                \"refractionMatrix\",\r\n                \"diffuseLeftColor\",\r\n                \"diffuseRightColor\",\r\n                \"opacityParts\",\r\n                \"reflectionLeftColor\",\r\n                \"reflectionRightColor\",\r\n                \"emissiveLeftColor\",\r\n                \"emissiveRightColor\",\r\n                \"refractionLeftColor\",\r\n                \"refractionRightColor\",\r\n                \"vReflectionPosition\",\r\n                \"vReflectionSize\",\r\n                \"vRefractionPosition\",\r\n                \"vRefractionSize\",\r\n                \"logarithmicDepthConstant\",\r\n                \"vTangentSpaceParams\",\r\n                \"alphaCutOff\",\r\n                \"boneTextureWidth\",\r\n                \"morphTargetTextureInfo\",\r\n                \"morphTargetTextureIndices\",\r\n            ];\r\n\r\n            const samplers = [\r\n                \"diffuseSampler\",\r\n                \"ambientSampler\",\r\n                \"opacitySampler\",\r\n                \"reflectionCubeSampler\",\r\n                \"reflection2DSampler\",\r\n                \"emissiveSampler\",\r\n                \"specularSampler\",\r\n                \"bumpSampler\",\r\n                \"lightmapSampler\",\r\n                \"refractionCubeSampler\",\r\n                \"refraction2DSampler\",\r\n                \"boneSampler\",\r\n                \"morphTargets\",\r\n                \"oitDepthSampler\",\r\n                \"oitFrontColorSampler\",\r\n                \"areaLightsLTC1Sampler\",\r\n                \"areaLightsLTC2Sampler\",\r\n            ];\r\n\r\n            const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\r\n\r\n            const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\r\n\r\n            this._eventInfo.fallbacks = fallbacks;\r\n            this._eventInfo.fallbackRank = 0;\r\n            this._eventInfo.defines = defines;\r\n            this._eventInfo.uniforms = uniforms;\r\n            this._eventInfo.attributes = attribs;\r\n            this._eventInfo.samplers = samplers;\r\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n            this._eventInfo.customCode = undefined;\r\n            this._eventInfo.mesh = mesh;\r\n            this._eventInfo.indexParameters = indexParameters;\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n            MaterialHelperGeometryRendering.AddUniformsAndSamplers(uniforms, samplers);\r\n\r\n            PrePassConfiguration.AddUniforms(uniforms);\r\n            PrePassConfiguration.AddSamplers(samplers);\r\n\r\n            if (ImageProcessingConfiguration) {\r\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n            }\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this._maxSimultaneousLights,\r\n            });\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n            if (this.customShaderNameResolve) {\r\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n            }\r\n\r\n            const join = defines.toString();\r\n\r\n            const previousEffect = subMesh.effect;\r\n            let effect = scene.getEngine().createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters,\r\n                    processFinalCode: csnrOptions.processFinalCode,\r\n                    processCodeAfterIncludes: this._eventInfo.customCode,\r\n                    multiTarget: defines.PREPASS,\r\n                    shaderLanguage: this._shaderLanguage,\r\n                    extraInitializationsAsync: this._shadersLoaded\r\n                        ? undefined\r\n                        : async () => {\r\n                              if (this._shaderLanguage === ShaderLanguage.WGSL) {\r\n                                  await Promise.all([import(\"../ShadersWGSL/default.vertex\"), import(\"../ShadersWGSL/default.fragment\")]);\r\n                              } else {\r\n                                  await Promise.all([import(\"../Shaders/default.vertex\"), import(\"../Shaders/default.fragment\")]);\r\n                              }\r\n                              this._shadersLoaded = true;\r\n                          },\r\n                },\r\n                engine\r\n            );\r\n\r\n            this._eventInfo.customCode = undefined;\r\n\r\n            if (effect) {\r\n                if (this._onEffectCreatedObservable) {\r\n                    onCreatedEffectParameters.effect = effect;\r\n                    onCreatedEffectParameters.subMesh = subMesh;\r\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n                }\r\n\r\n                // Use previous effect while new one is compiling\r\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                    effect = previousEffect;\r\n                    defines.markAsUnprocessed();\r\n\r\n                    forceWasNotReadyPreviously = this.isFrozen;\r\n\r\n                    if (lightDisposed) {\r\n                        // re register in case it takes more than one frame.\r\n                        defines._areLightsDisposed = true;\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    scene.resetCachedMaterial();\r\n                    subMesh.setEffect(effect, defines, this._materialContext);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\r\n        drawWrapper._wasPreviouslyUsingInstances = useInstances;\r\n\r\n        this._checkScenePerformancePriority();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Builds the material UBO layouts.\r\n     * Used internally during the effect preparation.\r\n     */\r\n    public override buildUniformLayout(): void {\r\n        // Order is important !\r\n        const ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"diffuseLeftColor\", 4);\r\n        ubo.addUniform(\"diffuseRightColor\", 4);\r\n        ubo.addUniform(\"opacityParts\", 4);\r\n        ubo.addUniform(\"reflectionLeftColor\", 4);\r\n        ubo.addUniform(\"reflectionRightColor\", 4);\r\n        ubo.addUniform(\"refractionLeftColor\", 4);\r\n        ubo.addUniform(\"refractionRightColor\", 4);\r\n        ubo.addUniform(\"emissiveLeftColor\", 4);\r\n        ubo.addUniform(\"emissiveRightColor\", 4);\r\n\r\n        ubo.addUniform(\"vDiffuseInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 2);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vReflectionInfos\", 2);\r\n        ubo.addUniform(\"vReflectionPosition\", 3);\r\n        ubo.addUniform(\"vReflectionSize\", 3);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vSpecularInfos\", 2);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n\r\n        ubo.addUniform(\"diffuseMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"reflectionMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"specularMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"alphaCutOff\", 1);\r\n        ubo.addUniform(\"refractionMatrix\", 16);\r\n        ubo.addUniform(\"vRefractionInfos\", 4);\r\n        ubo.addUniform(\"vRefractionPosition\", 3);\r\n        ubo.addUniform(\"vRefractionSize\", 3);\r\n        ubo.addUniform(\"vSpecularColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"vDiffuseColor\", 4);\r\n        ubo.addUniform(\"vAmbientColor\", 3);\r\n\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        MaterialHelperGeometryRendering.Bind(scene.getEngine().currentRenderPassId, this._activeEffect, mesh, world, this);\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = this._mustRebind(scene, effect, subMesh, mesh.visibility);\r\n\r\n        // Bones\r\n        BindBonesParameters(mesh, effect);\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || subMesh._drawWrapper._forceRebindOnNextCall) {\r\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\r\n                    // Fresnel\r\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\r\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\r\n                            \"opacityParts\",\r\n                            new Color3(\r\n                                this.opacityFresnelParameters.leftColor.toLuminance(),\r\n                                this.opacityFresnelParameters.rightColor.toLuminance(),\r\n                                this.opacityFresnelParameters.bias\r\n                            ),\r\n                            this.opacityFresnelParameters.power\r\n                        );\r\n                    }\r\n\r\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\r\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\r\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\r\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\r\n                    }\r\n                }\r\n\r\n                // Textures\r\n                if (scene.texturesEnabled) {\r\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                        BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\r\n                        BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (this._hasAlphaChannel()) {\r\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\r\n                    }\r\n\r\n                    if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                        ubo.updateFloat2(\"vReflectionInfos\", this._reflectionTexture.level, this.roughness);\r\n                        ubo.updateMatrix(\"reflectionMatrix\", this._reflectionTexture.getReflectionTextureMatrix());\r\n\r\n                        if ((<any>this._reflectionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>this._reflectionTexture;\r\n\r\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n                    } else {\r\n                        ubo.updateFloat2(\"vReflectionInfos\", 0.0, this.roughness);\r\n                    }\r\n\r\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\r\n                        BindTextureMatrix(this._specularTexture, ubo, \"specular\");\r\n                    }\r\n\r\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\r\n                        BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n\r\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                        let depth = 1.0;\r\n                        if (!this._refractionTexture.isCube) {\r\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\r\n\r\n                            if ((<any>this._refractionTexture).depth) {\r\n                                depth = (<any>this._refractionTexture).depth;\r\n                            }\r\n                        }\r\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\r\n\r\n                        if ((<any>this._refractionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>this._refractionTexture;\r\n\r\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\r\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\r\n\r\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\r\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n            }\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    if (this._reflectionTexture.isCube) {\r\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\r\n                }\r\n\r\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (this._refractionTexture.isCube) {\r\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\r\n                this.getScene().depthPeelingRenderer!.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Colors\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if (\r\n                (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\r\n                this._reflectionTexture ||\r\n                this._refractionTexture ||\r\n                mesh.receiveShadows ||\r\n                defines.PREPASS\r\n            ) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            BindFogParameters(scene, mesh, effect);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                BindMorphTargetParameters(mesh, effect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // Log. depth\r\n            if (this.useLogarithmicDepth) {\r\n                BindLogDepth(defines, effect, scene);\r\n            }\r\n\r\n            // image processing\r\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\r\n                this._imageProcessingConfiguration.bind(this._activeEffect);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        const results = super.getAnimatables();\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\r\n            results.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\r\n            results.push(this._refractionTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture) {\r\n            activeTextures.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture) {\r\n            activeTextures.push(this._refractionTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._emissiveTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._specularTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._refractionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     */\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._diffuseTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._specularTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._refractionTexture?.dispose();\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @param cloneTexturesOnlyOnce - if a texture is used in more than one channel (e.g diffuse and opacity), only clone it once and reuse it on the other channels. Default false.\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns the cloned material\r\n     */\r\n    public override clone(name: string, cloneTexturesOnlyOnce: boolean = true, rootUrl = \"\"): StandardMaterial {\r\n        const result = SerializationHelper.Clone(() => new StandardMaterial(name, this.getScene()), this, { cloneTexturesOnlyOnce });\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        this._clonePlugins(result, rootUrl);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a standard material from parsed material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new standard material\r\n     */\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): StandardMaterial {\r\n        const material = SerializationHelper.Parse(() => new StandardMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        Material._ParsePlugins(source, material, scene, rootUrl);\r\n\r\n        return material;\r\n    }\r\n\r\n    // Flags used to enable or disable a type of texture for all Standard Materials\r\n    /**\r\n     * Are diffuse textures enabled in the application.\r\n     */\r\n    public static get DiffuseTextureEnabled(): boolean {\r\n        return MaterialFlags.DiffuseTextureEnabled;\r\n    }\r\n    public static set DiffuseTextureEnabled(value: boolean) {\r\n        MaterialFlags.DiffuseTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are detail textures enabled in the application.\r\n     */\r\n    public static get DetailTextureEnabled(): boolean {\r\n        return MaterialFlags.DetailTextureEnabled;\r\n    }\r\n    public static set DetailTextureEnabled(value: boolean) {\r\n        MaterialFlags.DetailTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are ambient textures enabled in the application.\r\n     */\r\n    public static get AmbientTextureEnabled(): boolean {\r\n        return MaterialFlags.AmbientTextureEnabled;\r\n    }\r\n    public static set AmbientTextureEnabled(value: boolean) {\r\n        MaterialFlags.AmbientTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are opacity textures enabled in the application.\r\n     */\r\n    public static get OpacityTextureEnabled(): boolean {\r\n        return MaterialFlags.OpacityTextureEnabled;\r\n    }\r\n    public static set OpacityTextureEnabled(value: boolean) {\r\n        MaterialFlags.OpacityTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are reflection textures enabled in the application.\r\n     */\r\n    public static get ReflectionTextureEnabled(): boolean {\r\n        return MaterialFlags.ReflectionTextureEnabled;\r\n    }\r\n    public static set ReflectionTextureEnabled(value: boolean) {\r\n        MaterialFlags.ReflectionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are emissive textures enabled in the application.\r\n     */\r\n    public static get EmissiveTextureEnabled(): boolean {\r\n        return MaterialFlags.EmissiveTextureEnabled;\r\n    }\r\n    public static set EmissiveTextureEnabled(value: boolean) {\r\n        MaterialFlags.EmissiveTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are specular textures enabled in the application.\r\n     */\r\n    public static get SpecularTextureEnabled(): boolean {\r\n        return MaterialFlags.SpecularTextureEnabled;\r\n    }\r\n    public static set SpecularTextureEnabled(value: boolean) {\r\n        MaterialFlags.SpecularTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are bump textures enabled in the application.\r\n     */\r\n    public static get BumpTextureEnabled(): boolean {\r\n        return MaterialFlags.BumpTextureEnabled;\r\n    }\r\n    public static set BumpTextureEnabled(value: boolean) {\r\n        MaterialFlags.BumpTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are lightmap textures enabled in the application.\r\n     */\r\n    public static get LightmapTextureEnabled(): boolean {\r\n        return MaterialFlags.LightmapTextureEnabled;\r\n    }\r\n    public static set LightmapTextureEnabled(value: boolean) {\r\n        MaterialFlags.LightmapTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are refraction textures enabled in the application.\r\n     */\r\n    public static get RefractionTextureEnabled(): boolean {\r\n        return MaterialFlags.RefractionTextureEnabled;\r\n    }\r\n    public static set RefractionTextureEnabled(value: boolean) {\r\n        MaterialFlags.RefractionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are color grading textures enabled in the application.\r\n     */\r\n    public static get ColorGradingTextureEnabled(): boolean {\r\n        return MaterialFlags.ColorGradingTextureEnabled;\r\n    }\r\n    public static set ColorGradingTextureEnabled(value: boolean) {\r\n        MaterialFlags.ColorGradingTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are fresnels enabled in the application.\r\n     */\r\n    public static get FresnelEnabled(): boolean {\r\n        return MaterialFlags.FresnelEnabled;\r\n    }\r\n    public static set FresnelEnabled(value: boolean) {\r\n        MaterialFlags.FresnelEnabled = value;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\r\n\r\nScene.DefaultMaterialFactory = (scene: Scene) => {\r\n    return new StandardMaterial(\"default material\", scene);\r\n};\r\n"],
  "mappings": "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",
  "names": ["factory", "plugin", "code", "GeometryRenderingTextureClearType"]
}
