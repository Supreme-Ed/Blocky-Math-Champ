{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSwitchBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport { RichTypeAny } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\r\nimport { getNumericValue, isNumeric } from \"core/FlowGraph/utils\";\r\n/**\r\n * Configuration for a switch block.\r\n */\r\nexport interface IFlowGraphSwitchBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The possible values for the selection.\r\n     */\r\n    cases: T[];\r\n}\r\n\r\n/**\r\n * A block that executes a branch based on a selection.\r\n */\r\nexport class FlowGraphSwitchBlock<T extends FlowGraphNumber> extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Input connection: The value of the selection.\r\n     */\r\n    public readonly case: FlowGraphDataConnection<T>;\r\n\r\n    /**\r\n     * The default case to execute if no other case is found.\r\n     */\r\n    public readonly default: FlowGraphSignalConnection = this._registerSignalOutput(\"default\");\r\n\r\n    private _caseToOutputFlow: Map<T, FlowGraphSignalConnection> = new Map();\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config: IFlowGraphSwitchBlockConfiguration<T>\r\n    ) {\r\n        super(config);\r\n\r\n        this.case = this.registerDataInput(\"case\", RichTypeAny);\r\n\r\n        // iterate the set not using for of\r\n        (this.config.cases || []).forEach((caseValue) => {\r\n            this._caseToOutputFlow.set(caseValue, this._registerSignalOutput(`out_${caseValue}`));\r\n        });\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\r\n        const selectionValue = this.case.getValue(context);\r\n        let outputFlow: FlowGraphSignalConnection | undefined;\r\n        if (isNumeric(selectionValue)) {\r\n            outputFlow = this._getOutputFlowForCase(getNumericValue(selectionValue) as T);\r\n        } else {\r\n            outputFlow = this._getOutputFlowForCase(selectionValue);\r\n        }\r\n\r\n        if (outputFlow) {\r\n            outputFlow._activateSignal(context);\r\n        } else {\r\n            this.default._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new case to the switch block.\r\n     * @param newCase the new case to add.\r\n     */\r\n    public addCase(newCase: T): void {\r\n        if (this.config.cases.includes(newCase)) {\r\n            return;\r\n        }\r\n        this.config.cases.push(newCase);\r\n        this._caseToOutputFlow.set(newCase, this._registerSignalOutput(`out_${newCase}`));\r\n    }\r\n\r\n    /**\r\n     * Removes a case from the switch block.\r\n     * @param caseToRemove the case to remove.\r\n     */\r\n    public removeCase(caseToRemove: T): void {\r\n        if (!this.config.cases.includes(caseToRemove)) {\r\n            return;\r\n        }\r\n        const index = this.config.cases.indexOf(caseToRemove);\r\n        this.config.cases.splice(index, 1);\r\n        this._caseToOutputFlow.delete(caseToRemove);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getOutputFlowForCase(caseValue: T) {\r\n        return this._caseToOutputFlow.get(caseValue);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.Switch;\r\n    }\r\n\r\n    /**\r\n     * Serialize the block to a JSON representation.\r\n     * @param serializationObject the object to serialize to.\r\n     */\r\n    public override serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.cases = this.config.cases;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Switch, FlowGraphSwitchBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAEA,IAqBa;AArBb;;;AACA;AAGA;AAGA;AAcM,IAAO,uBAAP,cAA+D,wBAAuB;MAaxF,YAIoB,QAA6C;AAE7D,cAAM,MAAM;AAFI,aAAA,SAAA;AARJ,aAAA,UAAqC,KAAK,sBAAsB,SAAS;AAEjF,aAAA,oBAAuD,oBAAI,IAAG;AAUlE,aAAK,OAAO,KAAK,kBAAkB,QAAQ,WAAW;AAGtD,SAAC,KAAK,OAAO,SAAS,CAAA,GAAI,QAAQ,CAAC,cAAa;AAC5C,eAAK,kBAAkB,IAAI,WAAW,KAAK,sBAAsB,OAAO,SAAS,EAAE,CAAC;QACxF,CAAC;MACL;MAEO,SAAS,SAA2B,gBAAyC;AAChF,cAAM,iBAAiB,KAAK,KAAK,SAAS,OAAO;AACjD,YAAI;AACJ,YAAI,UAAU,cAAc,GAAG;AAC3B,uBAAa,KAAK,sBAAsB,gBAAgB,cAAc,CAAM;QAChF,OAAO;AACH,uBAAa,KAAK,sBAAsB,cAAc;QAC1D;AAEA,YAAI,YAAY;AACZ,qBAAW,gBAAgB,OAAO;QACtC,OAAO;AACH,eAAK,QAAQ,gBAAgB,OAAO;QACxC;MACJ;;;;;MAMO,QAAQ,SAAU;AACrB,YAAI,KAAK,OAAO,MAAM,SAAS,OAAO,GAAG;AACrC;QACJ;AACA,aAAK,OAAO,MAAM,KAAK,OAAO;AAC9B,aAAK,kBAAkB,IAAI,SAAS,KAAK,sBAAsB,OAAO,OAAO,EAAE,CAAC;MACpF;;;;;MAMO,WAAW,cAAe;AAC7B,YAAI,CAAC,KAAK,OAAO,MAAM,SAAS,YAAY,GAAG;AAC3C;QACJ;AACA,cAAM,QAAQ,KAAK,OAAO,MAAM,QAAQ,YAAY;AACpD,aAAK,OAAO,MAAM,OAAO,OAAO,CAAC;AACjC,aAAK,kBAAkB,OAAO,YAAY;MAC9C;;;;MAKO,sBAAsB,WAAY;AACrC,eAAO,KAAK,kBAAkB,IAAI,SAAS;MAC/C;;;;MAKgB,eAAY;AACxB,eAAA;MACJ;;;;;MAMgB,UAAU,qBAAyB;AAC/C,cAAM,UAAU,mBAAmB;AACnC,4BAAoB,QAAQ,KAAK,OAAO;MAC5C;;AAEJ,kBAAa,wBAA6B,oBAAoB;;;",
  "names": []
}
