import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/Shaders/fluidRenderingStandardBlur.fragment.js
var name, shader, fluidRenderingStandardBlurPixelShader;
var init_fluidRenderingStandardBlur_fragment = __esm({
  "node_modules/@babylonjs/core/Shaders/fluidRenderingStandardBlur.fragment.js"() {
    init_shaderStore();
    name = "fluidRenderingStandardBlurPixelShader";
    shader = `uniform sampler2D textureSampler;uniform int filterSize;uniform vec2 blurDir;varying vec2 vUV;void main(void) {vec4 s=textureLod(textureSampler,vUV,0.);if (s.r==0.) {glFragColor=vec4(0.,0.,0.,1.);return;}
float sigma=float(filterSize)/3.0;float twoSigma2=2.0*sigma*sigma;vec4 sum=vec4(0.);float wsum=0.;for (int x=-filterSize; x<=filterSize; ++x) {vec2 coords=vec2(x);vec4 sampl=textureLod(textureSampler,vUV+coords*blurDir,0.);float w=exp(-coords.x*coords.x/twoSigma2);sum+=sampl*w;wsum+=w;}
sum/=wsum;glFragColor=vec4(sum.rgb,1.);}
`;
    if (!ShaderStore.ShadersStore[name]) {
      ShaderStore.ShadersStore[name] = shader;
    }
    fluidRenderingStandardBlurPixelShader = { name, shader };
  }
});

export {
  fluidRenderingStandardBlurPixelShader,
  init_fluidRenderingStandardBlur_fragment
};
//# sourceMappingURL=chunk-6HYXTEL3.js.map
