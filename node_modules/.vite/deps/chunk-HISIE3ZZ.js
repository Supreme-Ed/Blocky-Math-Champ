import {
  init_helperFunctions
} from "./chunk-JUBEOR2P.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/Shaders/iblScaledLuminance.fragment.js
var name, shader, iblScaledLuminancePixelShader;
var init_iblScaledLuminance_fragment = __esm({
  "node_modules/@babylonjs/core/Shaders/iblScaledLuminance.fragment.js"() {
    init_shaderStore();
    init_helperFunctions();
    name = "iblScaledLuminancePixelShader";
    shader = `precision highp sampler2D;precision highp samplerCube;
#include<helperFunctions>
varying vec2 vUV;
#ifdef IBL_USE_CUBE_MAP
uniform samplerCube iblSource;
#else
uniform sampler2D iblSource;
#endif
uniform int iblWidth;uniform int iblHeight;float fetchLuminance(vec2 coords) {
#ifdef IBL_USE_CUBE_MAP
vec3 direction=equirectangularToCubemapDirection(coords);vec3 color=textureCubeLodEXT(iblSource,direction,0.0).rgb;
#else
vec3 color=textureLod(iblSource,coords,0.0).rgb;
#endif
return dot(color,LuminanceEncodeApprox);}
void main(void) {float deform=sin(vUV.y*PI);float luminance=fetchLuminance(vUV);gl_FragColor=vec4(vec3(deform*luminance),1.0);}`;
    if (!ShaderStore.ShadersStore[name]) {
      ShaderStore.ShadersStore[name] = shader;
    }
    iblScaledLuminancePixelShader = { name, shader };
  }
});

export {
  iblScaledLuminancePixelShader,
  init_iblScaledLuminance_fragment
};
//# sourceMappingURL=chunk-HISIE3ZZ.js.map
