{
  "version": 3,
  "sources": ["../../../dev/core/src/Engines/performanceConfigurator.ts", "../../../dev/core/src/Engines/engineStore.ts"],
  "sourcesContent": ["/** @internal */\r\nexport class PerformanceConfigurator {\r\n    /** @internal */\r\n    public static MatrixUse64Bits = false;\r\n    /** @internal */\r\n    public static MatrixTrackPrecisionChange = true;\r\n    /** @internal */\r\n    public static MatrixCurrentType: any = Float32Array;\r\n    /** @internal */\r\n    public static MatrixTrackedMatrices: Array<any> | null = [];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static SetMatrixPrecision(use64bits: boolean) {\r\n        PerformanceConfigurator.MatrixTrackPrecisionChange = false;\r\n\r\n        if (use64bits && !PerformanceConfigurator.MatrixUse64Bits) {\r\n            if (PerformanceConfigurator.MatrixTrackedMatrices) {\r\n                for (let m = 0; m < PerformanceConfigurator.MatrixTrackedMatrices.length; ++m) {\r\n                    const matrix = PerformanceConfigurator.MatrixTrackedMatrices[m];\r\n                    const values = matrix._m;\r\n\r\n                    matrix._m = new Array(16);\r\n\r\n                    for (let i = 0; i < 16; ++i) {\r\n                        matrix._m[i] = values[i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        PerformanceConfigurator.MatrixUse64Bits = use64bits;\r\n        PerformanceConfigurator.MatrixCurrentType = PerformanceConfigurator.MatrixUse64Bits ? Array : Float32Array;\r\n        PerformanceConfigurator.MatrixTrackedMatrices = null; // reclaim some memory, as we don't need _TrackedMatrices anymore\r\n    }\r\n}\r\n", "import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\n\r\nimport type { AbstractEngine } from \"./abstractEngine\";\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * The engine store class is responsible to hold all the instances of Engine and Scene created\r\n * during the life time of the application.\r\n */\r\nexport class EngineStore {\r\n    /** Gets the list of created engines */\r\n    public static Instances: AbstractEngine[] = [];\r\n\r\n    /**\r\n     * Notifies when an engine was disposed.\r\n     * Mainly used for static/cache cleanup\r\n     */\r\n    public static OnEnginesDisposedObservable = new Observable<AbstractEngine>();\r\n\r\n    /** @internal */\r\n    public static _LastCreatedScene: Nullable<Scene> = null;\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<AbstractEngine> {\r\n        if (this.Instances.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return this.Instances[this.Instances.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return this._LastCreatedScene;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a global variable indicating if fallback texture must be used when a texture cannot be loaded\r\n     * @ignorenaming\r\n     */\r\n    public static UseFallbackTexture = true;\r\n\r\n    /**\r\n     * Texture content used if a texture cannot loaded\r\n     * @ignorenaming\r\n     */\r\n    public static FallbackTexture = \"\";\r\n}\r\n"],
  "mappings": ";;;;;;;;;AAAA,IACa;AADb;;AACM,IAAO,0BAAP,MAAO,yBAAuB;;;;MAazB,OAAO,mBAAmB,WAAkB;AAC/C,iCAAwB,6BAA6B;AAErD,YAAI,aAAa,CAAC,yBAAwB,iBAAiB;AACvD,cAAI,yBAAwB,uBAAuB;AAC/C,qBAAS,IAAI,GAAG,IAAI,yBAAwB,sBAAsB,QAAQ,EAAE,GAAG;AAC3E,oBAAM,SAAS,yBAAwB,sBAAsB,CAAC;AAC9D,oBAAM,SAAS,OAAO;AAEtB,qBAAO,KAAK,IAAI,MAAM,EAAE;AAExB,uBAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACzB,uBAAO,GAAG,CAAC,IAAI,OAAO,CAAC;cAC3B;YACJ;UACJ;QACJ;AAEA,iCAAwB,kBAAkB;AAC1C,iCAAwB,oBAAoB,yBAAwB,kBAAkB,QAAQ;AAC9F,iCAAwB,wBAAwB;MACpD;;AAhCc,4BAAA,kBAAkB;AAElB,4BAAA,6BAA6B;AAE7B,4BAAA,oBAAyB;AAEzB,4BAAA,wBAA2C,CAAA;;;;;ACT7D,IAUa;AAVb;;;AAUM,IAAO,cAAP,MAAkB;;;;MAgBb,WAAW,oBAAiB;AAC/B,YAAI,KAAK,UAAU,WAAW,GAAG;AAC7B,iBAAO;QACX;AAEA,eAAO,KAAK,UAAU,KAAK,UAAU,SAAS,CAAC;MACnD;;;;MAKO,WAAW,mBAAgB;AAC9B,eAAO,KAAK;MAChB;;AA3Bc,gBAAA,YAA8B,CAAA;AAM9B,gBAAA,8BAA8B,IAAI,WAAU;AAG5C,gBAAA,oBAAqC;AAwBrC,gBAAA,qBAAqB;AAMrB,gBAAA,kBAAkB;;;",
  "names": []
}
