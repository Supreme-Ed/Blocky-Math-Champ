import {
  init_imageProcessingDeclaration
} from "./chunk-IY3FTQDJ.js";
import {
  init_imageProcessingFunctions
} from "./chunk-QEYKHWNO.js";
import {
  init_logDepthFragment
} from "./chunk-N5KC74QW.js";
import {
  init_fogFragment
} from "./chunk-GDBGCEHQ.js";
import {
  init_fogFragmentDeclaration
} from "./chunk-CVA6X54Q.js";
import {
  init_logDepthDeclaration
} from "./chunk-X2LMR5XM.js";
import {
  init_helperFunctions
} from "./chunk-JUBEOR2P.js";
import {
  init_clipPlaneFragmentDeclaration
} from "./chunk-WZ3KSQ3M.js";
import {
  init_clipPlaneFragment
} from "./chunk-TBDBIMGM.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/Shaders/particles.fragment.js
var name, shader, particlesPixelShader;
var init_particles_fragment = __esm({
  "node_modules/@babylonjs/core/Shaders/particles.fragment.js"() {
    init_shaderStore();
    init_clipPlaneFragmentDeclaration();
    init_imageProcessingDeclaration();
    init_logDepthDeclaration();
    init_helperFunctions();
    init_imageProcessingFunctions();
    init_fogFragmentDeclaration();
    init_clipPlaneFragment();
    init_logDepthFragment();
    init_fogFragment();
    name = "particlesPixelShader";
    shader = `#ifdef LOGARITHMICDEPTH
#extension GL_EXT_frag_depth : enable
#endif
varying vec2 vUV;varying vec4 vColor;uniform vec4 textureMask;uniform sampler2D diffuseSampler;
#include<clipPlaneFragmentDeclaration>
#include<imageProcessingDeclaration>
#include<logDepthDeclaration>
#include<helperFunctions>
#include<imageProcessingFunctions>
#ifdef RAMPGRADIENT
varying vec4 remapRanges;uniform sampler2D rampSampler;
#endif
#include<fogFragmentDeclaration>
#define CUSTOM_FRAGMENT_DEFINITIONS
void main(void) {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
#include<clipPlaneFragment>
vec4 textureColor=texture2D(diffuseSampler,vUV);vec4 baseColor=(textureColor*textureMask+(vec4(1.,1.,1.,1.)-textureMask))*vColor;
#ifdef RAMPGRADIENT
float alpha=baseColor.a;float remappedColorIndex=clamp((alpha-remapRanges.x)/remapRanges.y,0.0,1.0);vec4 rampColor=texture2D(rampSampler,vec2(1.0-remappedColorIndex,0.));baseColor.rgb*=rampColor.rgb;float finalAlpha=baseColor.a;baseColor.a=clamp((alpha*rampColor.a-remapRanges.z)/remapRanges.w,0.0,1.0);
#endif
#ifdef BLENDMULTIPLYMODE
float sourceAlpha=vColor.a*textureColor.a;baseColor.rgb=baseColor.rgb*sourceAlpha+vec3(1.0)*(1.0-sourceAlpha);
#endif
#include<logDepthFragment>
#include<fogFragment>(color,baseColor)
#ifdef IMAGEPROCESSINGPOSTPROCESS
baseColor.rgb=toLinearSpace(baseColor.rgb);
#else
#ifdef IMAGEPROCESSING
baseColor.rgb=toLinearSpace(baseColor.rgb);baseColor=applyImageProcessing(baseColor);
#endif
#endif
gl_FragColor=baseColor;
#define CUSTOM_FRAGMENT_MAIN_END
}`;
    if (!ShaderStore.ShadersStore[name]) {
      ShaderStore.ShadersStore[name] = shader;
    }
    particlesPixelShader = { name, shader };
  }
});

export {
  particlesPixelShader,
  init_particles_fragment
};
//# sourceMappingURL=chunk-XXFG7W3G.js.map
