{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/Extensions/gltfPathToObjectConverter.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/objectModelMapping.ts", "../../../dev/loaders/src/glTF/2.0/glTFLoaderAnimation.ts"],
  "sourcesContent": ["import type { IObjectInfo, IPathToObjectConverter } from \"core/ObjectModel/objectModelInterfaces\";\r\nimport type { IGLTF } from \"../glTFLoaderInterfaces\";\r\nimport type { IObjectAccessor } from \"core/FlowGraph/typeDefinitions\";\r\n\r\n/**\r\n * Adding an exception here will break traversing through the glTF object tree.\r\n * This is used for properties that might not be in the glTF object model, but are optional and have a default value.\r\n * For example, the path /nodes/\\{\\}/extensions/KHR_node_visibility/visible is optional - the object can be deferred without the object fully existing.\r\n */\r\nexport const OptionalPathExceptionsList: {\r\n    regex: RegExp;\r\n}[] = [\r\n    {\r\n        // get the node as object when reading an extension\r\n        regex: new RegExp(`^/nodes/\\\\d+/extensions/`),\r\n    },\r\n];\r\n\r\n/**\r\n * A converter that takes a glTF Object Model JSON Pointer\r\n * and transforms it into an ObjectAccessorContainer, allowing\r\n * objects referenced in the glTF to be associated with their\r\n * respective Babylon.js objects.\r\n */\r\nexport class GLTFPathToObjectConverter<T, BabylonType, BabylonValue> implements IPathToObjectConverter<IObjectAccessor<T, BabylonType, BabylonValue>> {\r\n    public constructor(\r\n        private _gltf: IGLTF,\r\n        private _infoTree: any\r\n    ) {}\r\n\r\n    /**\r\n     * The pointer string is represented by a [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).\r\n     * See also https://github.com/KhronosGroup/glTF/blob/main/specification/2.0/ObjectModel.adoc#core-pointers\r\n     * <animationPointer> := /<rootNode>/<assetIndex>/<propertyPath>\r\n     * <rootNode> := \"nodes\" | \"materials\" | \"meshes\" | \"cameras\" | \"extensions\"\r\n     * <assetIndex> := <digit> | <name>\r\n     * <propertyPath> := <extensionPath> | <standardPath>\r\n     * <extensionPath> := \"extensions\"/<name>/<standardPath>\r\n     * <standardPath> := <name> | <name>/<standardPath>\r\n     * <name> := W+\r\n     * <digit> := D+\r\n     *\r\n     * Examples:\r\n     *  - \"/nodes/0/rotation\"\r\n     * - \"/nodes.length\"\r\n     *  - \"/materials/2/emissiveFactor\"\r\n     *  - \"/materials/2/pbrMetallicRoughness/baseColorFactor\"\r\n     *  - \"/materials/2/extensions/KHR_materials_emissive_strength/emissiveStrength\"\r\n     *\r\n     * @param path The path to convert\r\n     * @returns The object and info associated with the path\r\n     */\r\n    public convert(path: string): IObjectInfo<IObjectAccessor<T, BabylonType, BabylonValue>> {\r\n        let objectTree: any = this._gltf;\r\n        let infoTree: any = this._infoTree;\r\n        let target: any = undefined;\r\n\r\n        if (!path.startsWith(\"/\")) {\r\n            throw new Error(\"Path must start with a /\");\r\n        }\r\n        const parts = path.split(\"/\");\r\n        parts.shift();\r\n\r\n        //if the last part has \".length\" in it, separate that as an extra part\r\n        if (parts[parts.length - 1].includes(\".length\")) {\r\n            const lastPart = parts[parts.length - 1];\r\n            const split = lastPart.split(\".\");\r\n            parts.pop();\r\n            parts.push(...split);\r\n        }\r\n\r\n        let ignoreObjectTree = false;\r\n\r\n        for (const part of parts) {\r\n            const isLength = part === \"length\";\r\n            if (isLength && !infoTree.__array__) {\r\n                throw new Error(`Path ${path} is invalid`);\r\n            }\r\n            if (infoTree.__ignoreObjectTree__) {\r\n                ignoreObjectTree = true;\r\n            }\r\n            if (infoTree.__array__ && !isLength) {\r\n                infoTree = infoTree.__array__;\r\n            } else {\r\n                infoTree = infoTree[part];\r\n                if (!infoTree) {\r\n                    throw new Error(`Path ${path} is invalid`);\r\n                }\r\n            }\r\n            if (!ignoreObjectTree) {\r\n                if (objectTree === undefined) {\r\n                    // check if the path is in the exception list. If it is, break and return the last object that was found\r\n                    const exception = OptionalPathExceptionsList.find((e) => e.regex.test(path));\r\n                    if (!exception) {\r\n                        throw new Error(`Path ${path} is invalid`);\r\n                    }\r\n                } else if (!isLength) {\r\n                    objectTree = objectTree?.[part];\r\n                }\r\n            }\r\n\r\n            if (infoTree.__target__ || isLength) {\r\n                target = objectTree;\r\n            }\r\n        }\r\n\r\n        return {\r\n            object: target,\r\n            info: infoTree,\r\n        };\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\n\nimport type { TransformNode } from \"core/Meshes/transformNode\";\nimport type { IAnimation, ICamera, IGLTF, IKHRLightsPunctual_Light, IMaterial, IMesh, INode } from \"../glTFLoaderInterfaces\";\nimport type { Vector3 } from \"core/Maths/math.vector\";\nimport { Matrix, Quaternion, Vector2 } from \"core/Maths/math.vector\";\nimport { Constants } from \"core/Engines/constants\";\nimport type { Color3 } from \"core/Maths/math.color\";\nimport { Color4 } from \"core/Maths/math.color\";\nimport type { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\nimport type { Light } from \"core/Lights/light\";\nimport type { Nullable } from \"core/types\";\nimport { SpotLight } from \"core/Lights/spotLight\";\nimport type { IEXTLightsImageBased_LightImageBased } from \"babylonjs-gltf2interface\";\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\nimport type { IInterpolationPropertyInfo, IObjectAccessor } from \"core/FlowGraph/typeDefinitions\";\nimport { GLTFPathToObjectConverter } from \"./gltfPathToObjectConverter\";\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\nimport type { Mesh } from \"core/Meshes/mesh\";\n\nexport interface IGLTFObjectModelTree {\n    cameras: IGLTFObjectModelTreeCamerasObject;\n    nodes: IGLTFObjectModelTreeNodesObject;\n    materials: IGLTFObjectModelTreeMaterialsObject;\n    extensions: IGLTFObjectModelTreeExtensionsObject;\n    animations: {\n        length: IObjectAccessor<IAnimation[], AnimationGroup[], number>;\n        __array__: {};\n    };\n    meshes: {\n        length: IObjectAccessor<IMesh[], (Mesh | undefined)[], number>;\n        __array__: {};\n    };\n}\n\nexport interface IGLTFObjectModelTreeNodesObject<GLTFTargetType = INode, BabylonTargetType = TransformNode> {\n    length: IObjectAccessor<GLTFTargetType[], BabylonTargetType[], number>;\n    __array__: {\n        __target__: boolean;\n        translation: IObjectAccessor<GLTFTargetType, BabylonTargetType, Vector3>;\n        rotation: IObjectAccessor<GLTFTargetType, BabylonTargetType, Quaternion>;\n        scale: IObjectAccessor<GLTFTargetType, BabylonTargetType, Vector3>;\n        matrix: IObjectAccessor<GLTFTargetType, BabylonTargetType, Matrix>;\n        globalMatrix: IObjectAccessor<GLTFTargetType, BabylonTargetType, Matrix>;\n        weights: {\n            length: IObjectAccessor<GLTFTargetType, BabylonTargetType, number>;\n            __array__: { __target__: boolean } & IObjectAccessor<GLTFTargetType, BabylonTargetType, number>;\n        } & IObjectAccessor<GLTFTargetType, BabylonTargetType, number[]>;\n        extensions: {\n            EXT_lights_ies?: {\n                multiplier: IObjectAccessor<INode, Light, number>;\n                color: IObjectAccessor<INode, Light, Color3>;\n            };\n        };\n    };\n}\n\nexport interface IGLTFObjectModelTreeCamerasObject {\n    __array__: {\n        __target__: boolean;\n        orthographic: {\n            xmag: IObjectAccessor<ICamera, ICamera, Vector2>;\n            ymag: IObjectAccessor<ICamera, ICamera, Vector2>;\n            zfar: IObjectAccessor<ICamera, ICamera, number>;\n            znear: IObjectAccessor<ICamera, ICamera, number>;\n        };\n        perspective: {\n            yfov: IObjectAccessor<ICamera, ICamera, number>;\n            zfar: IObjectAccessor<ICamera, ICamera, number>;\n            znear: IObjectAccessor<ICamera, ICamera, number>;\n            aspectRatio: IObjectAccessor<ICamera, ICamera, Nullable<number>>;\n        };\n    };\n}\n\nexport interface IGLTFObjectModelTreeMaterialsObject {\n    __array__: {\n        __target__: boolean;\n        pbrMetallicRoughness: {\n            baseColorFactor: IObjectAccessor<IMaterial, PBRMaterial, Color4>;\n            metallicFactor: IObjectAccessor<IMaterial, PBRMaterial, Nullable<number>>;\n            roughnessFactor: IObjectAccessor<IMaterial, PBRMaterial, Nullable<number>>;\n            baseColorTexture: {\n                extensions: {\n                    KHR_texture_transform: ITextureDefinition;\n                };\n            };\n            metallicRoughnessTexture: {\n                extensions: {\n                    KHR_texture_transform: ITextureDefinition;\n                };\n            };\n        };\n        emissiveFactor: IObjectAccessor<IMaterial, PBRMaterial, Color3>;\n        normalTexture: {\n            scale: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            extensions: {\n                KHR_texture_transform: ITextureDefinition;\n            };\n        };\n        occlusionTexture: {\n            strength: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            extensions: {\n                KHR_texture_transform: ITextureDefinition;\n            };\n        };\n        emissiveTexture: {\n            extensions: {\n                KHR_texture_transform: ITextureDefinition;\n            };\n        };\n        extensions: {\n            KHR_materials_anisotropy: {\n                anisotropyStrength: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                anisotropyRotation: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                anisotropyTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_clearcoat: {\n                clearcoatFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                clearcoatRoughnessFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                clearcoatTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                clearcoatNormalTexture: {\n                    scale: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                clearcoatRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_dispersion: {\n                dispersion: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            };\n            KHR_materials_emissive_strength: {\n                emissiveStrength: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            };\n            KHR_materials_ior: {\n                ior: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            };\n            KHR_materials_iridescence: {\n                iridescenceFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                iridescenceIor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                iridescenceThicknessMinimum: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                iridescenceThicknessMaximum: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                iridescenceTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                iridescenceThicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_sheen: {\n                sheenColorFactor: IObjectAccessor<IMaterial, PBRMaterial, Color3>;\n                sheenRoughnessFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                sheenColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                sheenRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_specular: {\n                specularFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                specularColorFactor: IObjectAccessor<IMaterial, PBRMaterial, Color3>;\n                specularTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                specularColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_transmission: {\n                transmissionFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                transmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_diffuse_transmission: {\n                diffuseTransmissionFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                diffuseTransmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                diffuseTransmissionColorFactor: IObjectAccessor<IMaterial, PBRMaterial, Nullable<Color3>>;\n                diffuseTransmissionColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_volume: {\n                thicknessFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                attenuationColor: IObjectAccessor<IMaterial, PBRMaterial, Color3>;\n                attenuationDistance: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                thicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n        };\n    };\n}\n\ninterface ITextureDefinition {\n    offset: IObjectAccessor<IMaterial, PBRMaterial, Vector2>;\n    rotation: IObjectAccessor<IMaterial, PBRMaterial, number>;\n    scale: IObjectAccessor<IMaterial, PBRMaterial, Vector2>;\n}\n\nexport interface IGLTFObjectModelTreeMeshesObject {}\n\nexport interface IGLTFObjectModelTreeExtensionsObject {\n    KHR_lights_punctual: {\n        lights: {\n            length: IObjectAccessor<IKHRLightsPunctual_Light[], Light[], number>;\n            __array__: {\n                __target__: boolean;\n                color: IObjectAccessor<IKHRLightsPunctual_Light, Light, Color3>;\n                intensity: IObjectAccessor<IKHRLightsPunctual_Light, Light, number>;\n                range: IObjectAccessor<IKHRLightsPunctual_Light, Light, number>;\n                spot: {\n                    innerConeAngle: IObjectAccessor<IKHRLightsPunctual_Light, Light, number>;\n                    outerConeAngle: IObjectAccessor<IKHRLightsPunctual_Light, Light, number>;\n                };\n            };\n        };\n    };\n    EXT_lights_ies: {\n        lights: {\n            length: IObjectAccessor<IKHRLightsPunctual_Light[], Light[], number>;\n        };\n    };\n    EXT_lights_image_based: {\n        lights: {\n            __array__: {\n                __target__: boolean;\n                intensity: IObjectAccessor<IEXTLightsImageBased_LightImageBased, BaseTexture, number>;\n                rotation: IObjectAccessor<IEXTLightsImageBased_LightImageBased, BaseTexture, Quaternion>;\n            };\n            length: IObjectAccessor<IEXTLightsImageBased_LightImageBased[], BaseTexture[], number>;\n        };\n    };\n}\n\nconst nodesTree: IGLTFObjectModelTreeNodesObject = {\n    length: {\n        type: \"number\",\n        get: (nodes: INode[]) => nodes.length,\n        getTarget: (nodes: INode[]) => nodes.map((node) => node._babylonTransformNode!),\n        getPropertyName: [() => \"length\"],\n    },\n    __array__: {\n        __target__: true,\n        translation: {\n            type: \"Vector3\",\n            get: (node: INode) => node._babylonTransformNode?.position,\n            set: (value: Vector3, node: INode) => node._babylonTransformNode?.position.copyFrom(value),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            getPropertyName: [() => \"position\"],\n        },\n        rotation: {\n            type: \"Quaternion\",\n            get: (node: INode) => node._babylonTransformNode?.rotationQuaternion!,\n            set: (value: Quaternion, node: INode) => node._babylonTransformNode?.rotationQuaternion?.copyFrom(value),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            getPropertyName: [() => \"rotationQuaternion\"],\n        },\n        scale: {\n            type: \"Vector3\",\n            get: (node: INode) => node._babylonTransformNode?.scaling,\n            set: (value: Vector3, node: INode) => node._babylonTransformNode?.scaling.copyFrom(value),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            getPropertyName: [() => \"scaling\"],\n        },\n        weights: {\n            length: {\n                type: \"number\",\n                get: (node: INode) => node._numMorphTargets,\n                getTarget: (node: INode) => node._babylonTransformNode,\n                getPropertyName: [() => \"influence\"],\n            },\n            __array__: {\n                __target__: true,\n                type: \"number\",\n                get: (node: INode, index?: number) => (index !== undefined ? node._primitiveBabylonMeshes?.[0].morphTargetManager?.getTarget(index).influence : undefined),\n                // set: (value: number, node: INode, index?: number) => node._babylonTransformNode?.getMorphTargetManager()?.getTarget(index)?.setInfluence(value),\n                getTarget: (node: INode) => node._babylonTransformNode,\n                getPropertyName: [() => \"influence\"],\n            },\n            type: \"number[]\",\n            get: (node: INode, index?: number) => [0], // TODO: get the weights correctly\n            // set: (value: number, node: INode, index?: number) => node._babylonTransformNode?.getMorphTargetManager()?.getTarget(index)?.setInfluence(value),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            getPropertyName: [() => \"influence\"],\n        },\n        // readonly!\n        matrix: {\n            type: \"Matrix\",\n            get: (node: INode) => Matrix.Compose(node._babylonTransformNode?.scaling!, node._babylonTransformNode?.rotationQuaternion!, node._babylonTransformNode?.position!),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            isReadOnly: true,\n        },\n        globalMatrix: {\n            type: \"Matrix\",\n            get: (node: INode) => {\n                const matrix = Matrix.Identity();\n                // RHS/LHS support\n                let rootNode = node.parent;\n                while (rootNode && rootNode.parent) {\n                    rootNode = rootNode.parent;\n                }\n                const forceUpdate =\n                    node._babylonTransformNode?.position._isDirty || node._babylonTransformNode?.rotationQuaternion?._isDirty || node._babylonTransformNode?.scaling._isDirty;\n                if (rootNode) {\n                    // take the parent root node's world matrix, invert it, and multiply it with the current node's world matrix\n                    // This will provide the global matrix, ignoring the RHS->LHS conversion\n                    const rootMatrix = rootNode._babylonTransformNode?.computeWorldMatrix(true).invert();\n                    if (rootMatrix) {\n                        node._babylonTransformNode?.computeWorldMatrix(forceUpdate)?.multiplyToRef(rootMatrix, matrix);\n                    }\n                } else if (node._babylonTransformNode) {\n                    matrix.copyFrom(node._babylonTransformNode.computeWorldMatrix(forceUpdate));\n                }\n                return matrix;\n            },\n            getTarget: (node: INode) => node._babylonTransformNode,\n            isReadOnly: true,\n        },\n        extensions: {\n            EXT_lights_ies: {\n                multiplier: {\n                    type: \"number\",\n                    get: (node: INode) => {\n                        return node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0]?.intensity;\n                    },\n                    getTarget: (node: INode) => node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0],\n                    set: (value, node) => {\n                        if (node._babylonTransformNode) {\n                            const light = node._babylonTransformNode.getChildren((child) => child instanceof SpotLight, true)[0];\n                            if (light) {\n                                light.intensity = value;\n                            }\n                        }\n                    },\n                },\n                color: {\n                    type: \"Color3\",\n                    get: (node: INode) => {\n                        return node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0]?.diffuse;\n                    },\n                    getTarget: (node: INode) => node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0],\n                    set: (value, node: INode) => {\n                        if (node._babylonTransformNode) {\n                            const light = node._babylonTransformNode.getChildren((child) => child instanceof SpotLight, true)[0];\n                            if (light) {\n                                light.diffuse = value;\n                            }\n                        }\n                    },\n                },\n            },\n        },\n    },\n};\n\nconst animationsTree = {\n    length: {\n        type: \"number\",\n        get: (animations: IAnimation[]) => animations.length,\n        getTarget: (animations: IAnimation[]) => animations.map((animation) => animation._babylonAnimationGroup!),\n        getPropertyName: [() => \"length\"],\n    },\n    __array__: {},\n};\n\nconst meshesTree = {\n    length: {\n        type: \"number\",\n        get: (meshes: IMesh[]) => meshes.length,\n        getTarget: (meshes: IMesh[]) => meshes.map((mesh) => mesh.primitives[0]._instanceData?.babylonSourceMesh),\n        getPropertyName: [() => \"length\"],\n    },\n    __array__: {},\n};\n\nconst camerasTree: IGLTFObjectModelTreeCamerasObject = {\n    __array__: {\n        __target__: true,\n        orthographic: {\n            xmag: {\n                componentsCount: 2,\n                type: \"Vector2\",\n                get: (camera) => new Vector2(camera._babylonCamera?.orthoLeft ?? 0, camera._babylonCamera?.orthoRight ?? 0),\n                set: (value, camera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.orthoLeft = value.x;\n                        camera._babylonCamera.orthoRight = value.y;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"orthoLeft\", () => \"orthoRight\"],\n            },\n            ymag: {\n                componentsCount: 2,\n                type: \"Vector2\",\n                get: (camera: ICamera) => new Vector2(camera._babylonCamera?.orthoBottom ?? 0, camera._babylonCamera?.orthoTop ?? 0),\n                set: (value: Vector2, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.orthoBottom = value.x;\n                        camera._babylonCamera.orthoTop = value.y;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"orthoBottom\", () => \"orthoTop\"],\n            },\n            zfar: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.maxZ,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.maxZ = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"maxZ\"],\n            },\n            znear: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.minZ,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.minZ = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"minZ\"],\n            },\n        },\n        perspective: {\n            aspectRatio: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.getEngine().getAspectRatio(camera._babylonCamera),\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"aspectRatio\"],\n                isReadOnly: true, // might not be the case for glTF?\n            },\n            yfov: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.fov,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.fov = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"fov\"],\n            },\n            zfar: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.maxZ,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.maxZ = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"maxZ\"],\n            },\n            znear: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.minZ,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.minZ = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"minZ\"],\n            },\n        },\n    },\n};\n\nconst materialsTree: IGLTFObjectModelTreeMaterialsObject = {\n    __array__: {\n        __target__: true,\n        emissiveFactor: {\n            type: \"Color3\",\n            get: (material, index?, payload?) => _GetMaterial(material, index, payload).emissiveColor,\n            set: (value: Color3, material, index?, payload?) => _GetMaterial(material, index, payload).emissiveColor.copyFrom(value),\n            getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n            getPropertyName: [() => \"emissiveColor\"],\n        },\n        emissiveTexture: {\n            extensions: {\n                KHR_texture_transform: _GenerateTextureMap(\"emissiveTexture\"),\n            },\n        },\n        normalTexture: {\n            scale: {\n                type: \"number\",\n                get: (material, index?, payload?) => _GetTexture(material, payload, \"bumpTexture\")?.level,\n                set: (value: number, material, index?, payload?) => {\n                    const texture = _GetTexture(material, payload, \"bumpTexture\");\n                    if (texture) {\n                        texture.level = value;\n                    }\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                getPropertyName: [() => \"level\"],\n            },\n            extensions: {\n                KHR_texture_transform: _GenerateTextureMap(\"bumpTexture\"),\n            },\n        },\n        occlusionTexture: {\n            strength: {\n                type: \"number\",\n                get: (material, index?, payload?) => _GetMaterial(material, index, payload).ambientTextureStrength,\n                set: (value: number, material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    if (mat) {\n                        mat.ambientTextureStrength = value;\n                    }\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                getPropertyName: [() => \"ambientTextureStrength\"],\n            },\n            extensions: {\n                KHR_texture_transform: _GenerateTextureMap(\"ambientTexture\"),\n            },\n        },\n        pbrMetallicRoughness: {\n            baseColorFactor: {\n                type: \"Color4\",\n                get: (material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    return Color4.FromColor3(mat.albedoColor, mat.alpha);\n                },\n                set: (value: Color4, material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    mat.albedoColor.set(value.r, value.g, value.b);\n                    mat.alpha = value.a;\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                // This is correct on the animation level, but incorrect as a single property of a type Color4\n                getPropertyName: [() => \"albedoColor\", () => \"alpha\"],\n            },\n            baseColorTexture: {\n                extensions: {\n                    KHR_texture_transform: _GenerateTextureMap(\"albedoTexture\"),\n                },\n            },\n            metallicFactor: {\n                type: \"number\",\n                get: (material, index?, payload?) => _GetMaterial(material, index, payload).metallic,\n                set: (value, material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    if (mat) {\n                        mat.metallic = value;\n                    }\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                getPropertyName: [() => \"metallic\"],\n            },\n            roughnessFactor: {\n                type: \"number\",\n                get: (material, index?, payload?) => _GetMaterial(material, index, payload).roughness,\n                set: (value, material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    if (mat) {\n                        mat.roughness = value;\n                    }\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                getPropertyName: [() => \"roughness\"],\n            },\n            metallicRoughnessTexture: {\n                extensions: {\n                    KHR_texture_transform: _GenerateTextureMap(\"metallicTexture\"),\n                },\n            },\n        },\n        extensions: {\n            KHR_materials_anisotropy: {\n                anisotropyStrength: {\n                    type: \"number\",\n                    get: (material, index?, payload?) => _GetMaterial(material, index, payload).anisotropy.intensity,\n                    set: (value: number, material, index?, payload?) => {\n                        _GetMaterial(material, index, payload).anisotropy.intensity = value;\n                    },\n                    getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"anisotropy.intensity\"],\n                },\n                anisotropyRotation: {\n                    type: \"number\",\n                    get: (material, index?, payload?) => _GetMaterial(material, index, payload).anisotropy.angle,\n                    set: (value: number, material, index?, payload?) => {\n                        _GetMaterial(material, index, payload).anisotropy.angle = value;\n                    },\n                    getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"anisotropy.angle\"],\n                },\n                anisotropyTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"anisotropy\", \"texture\"),\n                    },\n                },\n            },\n            KHR_materials_clearcoat: {\n                clearcoatFactor: {\n                    type: \"number\",\n                    get: (material, index?, payload?) => _GetMaterial(material, index, payload).clearCoat.intensity,\n                    set: (value, material, index?, payload?) => {\n                        _GetMaterial(material, index, payload).clearCoat.intensity = value;\n                    },\n                    getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"clearCoat.intensity\"],\n                },\n                clearcoatRoughnessFactor: {\n                    type: \"number\",\n                    get: (material, index?, payload?) => _GetMaterial(material, index, payload).clearCoat.roughness,\n                    set: (value, material, index?, payload?) => {\n                        _GetMaterial(material, index, payload).clearCoat.roughness = value;\n                    },\n                    getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"clearCoat.roughness\"],\n                },\n                clearcoatTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"clearCoat\", \"texture\"),\n                    },\n                },\n                clearcoatNormalTexture: {\n                    scale: {\n                        type: \"number\",\n                        get: (material, index, payload) => _GetMaterial(material, index, payload).clearCoat.bumpTexture?.level,\n                        getTarget: _GetMaterial,\n                        set: (value, material, index, payload) => (_GetMaterial(material, index, payload).clearCoat.bumpTexture!.level = value),\n                    },\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"clearCoat\", \"bumpTexture\"),\n                    },\n                },\n                clearcoatRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"clearCoat\", \"textureRoughness\"),\n                    },\n                },\n            },\n            KHR_materials_dispersion: {\n                dispersion: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.dispersion,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.dispersion = value),\n                },\n            },\n            KHR_materials_emissive_strength: {\n                emissiveStrength: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).emissiveIntensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).emissiveIntensity = value),\n                },\n            },\n            KHR_materials_ior: {\n                ior: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).indexOfRefraction,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).indexOfRefraction = value),\n                },\n            },\n            KHR_materials_iridescence: {\n                iridescenceFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).iridescence.intensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).iridescence.intensity = value),\n                },\n                iridescenceIor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).iridescence.indexOfRefraction,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).iridescence.indexOfRefraction = value),\n                },\n                iridescenceTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"iridescence\", \"texture\"),\n                    },\n                },\n                iridescenceThicknessMaximum: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).iridescence.maximumThickness,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).iridescence.maximumThickness = value),\n                },\n                iridescenceThicknessMinimum: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).iridescence.minimumThickness,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).iridescence.minimumThickness = value),\n                },\n                iridescenceThicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"iridescence\", \"thicknessTexture\"),\n                    },\n                },\n            },\n            KHR_materials_sheen: {\n                sheenColorFactor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).sheen.color,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => _GetMaterial(material, index, payload).sheen.color.copyFrom(value),\n                },\n                sheenColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"sheen\", \"texture\"),\n                    },\n                },\n                sheenRoughnessFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).sheen.intensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).sheen.intensity = value),\n                },\n                sheenRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"sheen\", \"thicknessTexture\"),\n                    },\n                },\n            },\n            KHR_materials_specular: {\n                specularFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).metallicF0Factor,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).metallicF0Factor = value),\n                    getPropertyName: [() => \"metallicF0Factor\"],\n                },\n                specularColorFactor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).metallicReflectanceColor,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => _GetMaterial(material, index, payload).metallicReflectanceColor.copyFrom(value),\n                    getPropertyName: [() => \"metallicReflectanceColor\"],\n                },\n                specularTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"metallicReflectanceTexture\"),\n                    },\n                },\n                specularColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"reflectanceTexture\"),\n                    },\n                },\n            },\n            KHR_materials_transmission: {\n                transmissionFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.refractionIntensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.refractionIntensity = value),\n                    getPropertyName: [() => \"subSurface.refractionIntensity\"],\n                },\n                transmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"subSurface\", \"refractionIntensityTexture\"),\n                    },\n                },\n            },\n            KHR_materials_diffuse_transmission: {\n                diffuseTransmissionFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.translucencyIntensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.translucencyIntensity = value),\n                },\n                diffuseTransmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"subSurface\", \"translucencyIntensityTexture\"),\n                    },\n                },\n                diffuseTransmissionColorFactor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.translucencyColor,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => value && _GetMaterial(material, index, payload).subSurface.translucencyColor?.copyFrom(value),\n                },\n                diffuseTransmissionColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"subSurface\", \"translucencyColorTexture\"),\n                    },\n                },\n            },\n            KHR_materials_volume: {\n                attenuationColor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.tintColor,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => _GetMaterial(material, index, payload).subSurface.tintColor.copyFrom(value),\n                },\n                attenuationDistance: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.tintColorAtDistance,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.tintColorAtDistance = value),\n                },\n                thicknessFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.maximumThickness,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.maximumThickness = value),\n                },\n                thicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"subSurface\", \"thicknessTexture\"),\n                    },\n                },\n            },\n        },\n    },\n};\n\nconst extensionsTree: IGLTFObjectModelTreeExtensionsObject = {\n    KHR_lights_punctual: {\n        lights: {\n            length: {\n                type: \"number\",\n                get: (lights: IKHRLightsPunctual_Light[]) => lights.length,\n                getTarget: (lights: IKHRLightsPunctual_Light[]) => lights.map((light) => light._babylonLight!),\n                getPropertyName: [(_lights: IKHRLightsPunctual_Light[]) => \"length\"],\n            },\n            __array__: {\n                __target__: true,\n                color: {\n                    type: \"Color3\",\n                    get: (light: IKHRLightsPunctual_Light) => light._babylonLight?.diffuse,\n                    set: (value: Color3, light: IKHRLightsPunctual_Light) => light._babylonLight?.diffuse.copyFrom(value),\n                    getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                    getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"diffuse\"],\n                },\n                intensity: {\n                    type: \"number\",\n                    get: (light: IKHRLightsPunctual_Light) => light._babylonLight?.intensity,\n                    set: (value: number, light: IKHRLightsPunctual_Light) => (light._babylonLight ? (light._babylonLight.intensity = value) : undefined),\n                    getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                    getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"intensity\"],\n                },\n                range: {\n                    type: \"number\",\n                    get: (light: IKHRLightsPunctual_Light) => light._babylonLight?.range,\n                    set: (value: number, light: IKHRLightsPunctual_Light) => (light._babylonLight ? (light._babylonLight.range = value) : undefined),\n                    getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                    getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"range\"],\n                },\n                spot: {\n                    innerConeAngle: {\n                        type: \"number\",\n                        get: (light: IKHRLightsPunctual_Light) => (light._babylonLight as SpotLight)?.innerAngle,\n                        set: (value: number, light: IKHRLightsPunctual_Light) => (light._babylonLight ? ((light._babylonLight as SpotLight).innerAngle = value) : undefined),\n                        getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                        getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"innerConeAngle\"],\n                    },\n                    outerConeAngle: {\n                        type: \"number\",\n                        get: (light: IKHRLightsPunctual_Light) => (light._babylonLight as SpotLight)?.angle,\n                        set: (value: number, light: IKHRLightsPunctual_Light) => (light._babylonLight ? ((light._babylonLight as SpotLight).angle = value) : undefined),\n                        getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                        getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"outerConeAngle\"],\n                    },\n                },\n            },\n        },\n    },\n    EXT_lights_ies: {\n        lights: {\n            length: {\n                type: \"number\",\n                get: (lights: IKHRLightsPunctual_Light[]) => lights.length,\n                getTarget: (lights: IKHRLightsPunctual_Light[]) => lights.map((light) => light._babylonLight!),\n                getPropertyName: [(_lights: IKHRLightsPunctual_Light[]) => \"length\"],\n            },\n        },\n    },\n    EXT_lights_image_based: {\n        lights: {\n            length: {\n                type: \"number\",\n                get: (lights) => lights.length,\n                getTarget: (lights) => lights.map((light) => light._babylonTexture!),\n                getPropertyName: [(_lights) => \"length\"],\n            },\n            __array__: {\n                __target__: true,\n                intensity: {\n                    type: \"number\",\n                    get: (light) => light._babylonTexture?.level,\n                    set: (value, light) => {\n                        if (light._babylonTexture) light._babylonTexture.level = value;\n                    },\n\n                    getTarget: (light) => light._babylonTexture,\n                },\n                rotation: {\n                    type: \"Quaternion\",\n                    get: (light) => light._babylonTexture && Quaternion.FromRotationMatrix(light._babylonTexture?.getReflectionTextureMatrix()),\n                    set: (value, light) => {\n                        if (!light._babylonTexture) return;\n                        // Invert the rotation so that positive rotation is counter-clockwise.\n                        if (!light._babylonTexture.getScene()?.useRightHandedSystem) {\n                            value = Quaternion.Inverse(value);\n                        }\n\n                        Matrix.FromQuaternionToRef(value, light._babylonTexture.getReflectionTextureMatrix());\n                    },\n                    getTarget: (light) => light._babylonTexture,\n                },\n            },\n        },\n    },\n};\n\nfunction _GetTexture(material: IMaterial, payload: any, textureType: keyof PBRMaterial, textureInObject?: string) {\n    const babylonMaterial = _GetMaterial(material, payload);\n    return textureInObject ? babylonMaterial[textureType][textureInObject] : babylonMaterial[textureType];\n}\nfunction _GetMaterial(material: IMaterial, _index?: number, payload?: any) {\n    return material._data?.[payload?.fillMode ?? Constants.MATERIAL_TriangleFillMode]?.babylonMaterial as PBRMaterial;\n}\nfunction _GenerateTextureMap(textureType: keyof PBRMaterial, textureInObject?: string): ITextureDefinition {\n    return {\n        offset: {\n            componentsCount: 2,\n            // assuming two independent values for u and v, and NOT a Vector2\n            type: \"Vector2\",\n            get: (material, _index?, payload?) => {\n                const texture = _GetTexture(material, payload, textureType, textureInObject);\n                return new Vector2(texture?.uOffset, texture?.vOffset);\n            },\n            getTarget: _GetMaterial,\n            set: (value, material, _index?, payload?) => {\n                const texture = _GetTexture(material, payload, textureType, textureInObject);\n                (texture.uOffset = value.x), (texture.vOffset = value.y);\n            },\n            getPropertyName: [\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.uOffset`,\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.vOffset`,\n            ],\n        },\n        rotation: {\n            type: \"number\",\n            get: (material, _index?, payload?) => _GetTexture(material, payload, textureType, textureInObject)?.wAng,\n            getTarget: _GetMaterial,\n            set: (value, material, _index?, payload?) => (_GetTexture(material, payload, textureType, textureInObject).wAng = value),\n            getPropertyName: [() => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.wAng`],\n        },\n        scale: {\n            componentsCount: 2,\n            type: \"Vector2\",\n            get: (material, _index?, payload?) => {\n                const texture = _GetTexture(material, payload, textureType, textureInObject);\n                return new Vector2(texture?.uScale, texture?.vScale);\n            },\n            getTarget: _GetMaterial,\n            set: (value, material, index?, payload?) => {\n                const texture = _GetTexture(material, payload, textureType, textureInObject);\n                (texture.uScale = value.x), (texture.vScale = value.y);\n            },\n            getPropertyName: [\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.uScale`,\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.vScale`,\n            ],\n        },\n    };\n}\n\nconst objectModelMapping: IGLTFObjectModelTree = {\n    cameras: camerasTree,\n    nodes: nodesTree,\n    materials: materialsTree,\n    extensions: extensionsTree,\n    animations: animationsTree,\n    meshes: meshesTree,\n};\n\n/**\n * get a path-to-object converter for the given glTF tree\n * @param gltf the glTF tree to use\n * @returns a path-to-object converter for the given glTF tree\n */\nexport function GetPathToObjectConverter(gltf: IGLTF) {\n    return new GLTFPathToObjectConverter(gltf, objectModelMapping);\n}\n\n/**\n * This function will return the object accessor for the given key in the object model\n * If the key is not found, it will return undefined\n * @param key the key to get the mapping for, for example /materials/\\{\\}/emissiveFactor\n * @returns an object accessor for the given key, or undefined if the key is not found\n */\nexport function GetMappingForKey(key: string): IObjectAccessor | undefined {\n    // replace every `{}` in key with __array__ to match the object model\n    const keyParts = key.split(\"/\").map((part) => part.replace(/{}/g, \"__array__\"));\n    let current = objectModelMapping as any;\n    for (const part of keyParts) {\n        // make sure part is not empty\n        if (!part) {\n            continue;\n        }\n        current = current[part];\n    }\n    // validate that current is an object accessor\n    if (current && current.type && current.get) {\n        return current;\n    }\n    return undefined;\n}\n\n/**\n * Set interpolation for a specific key in the object model\n * @param key the key to set, for example /materials/\\{\\}/emissiveFactor\n * @param interpolation the interpolation elements array\n */\nexport function SetInterpolationForKey(key: string, interpolation?: IInterpolationPropertyInfo[]): void {\n    // replace every `{}` in key with __array__ to match the object model\n    const keyParts = key.split(\"/\").map((part) => part.replace(/{}/g, \"__array__\"));\n    let current = objectModelMapping as any;\n    for (const part of keyParts) {\n        // make sure part is not empty\n        if (!part) {\n            continue;\n        }\n        current = current[part];\n    }\n    // validate that the current object is an object accessor\n    if (current && current.type && current.get) {\n        (current as IObjectAccessor).interpolation = interpolation;\n    }\n}\n\n/**\n * This will ad a new object accessor in the object model at the given key.\n * Note that this will NOT change the typescript types. To do that you will need to change the interface itself (extending it in the module that uses it)\n * @param key the key to add the object accessor at. For example /cameras/\\{\\}/perspective/aspectRatio\n * @param accessor the object accessor to add\n */\nexport function AddObjectAccessorToKey<GLTFTargetType = any, BabylonTargetType = any, BabylonValueType = any>(\n    key: string,\n    accessor: IObjectAccessor<GLTFTargetType, BabylonTargetType, BabylonValueType>\n): void {\n    // replace every `{}` in key with __array__ to match the object model\n    const keyParts = key.split(\"/\").map((part) => part.replace(/{}/g, \"__array__\"));\n    let current = objectModelMapping as any;\n    for (const part of keyParts) {\n        // make sure part is not empty\n        if (!part) {\n            continue;\n        }\n        if (!current[part]) {\n            if (part === \"?\") {\n                current.__ignoreObjectTree__ = true;\n                continue;\n            }\n            current[part] = {};\n            // if the part is __array__ then add the __target__ property\n            if (part === \"__array__\") {\n                current[part].__target__ = true;\n            }\n        }\n        current = current[part];\n    }\n    Object.assign(current, accessor);\n}\n", "import { Animation } from \"core/Animations/animation\";\r\nimport { Quaternion, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { INode } from \"./glTFLoaderInterfaces\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport { SetInterpolationForKey } from \"./Extensions/objectModelMapping\";\r\n\r\n/** @internal */\r\nexport type GetValueFn = (target: any, source: Float32Array, offset: number, scale: number) => any;\r\n\r\n/** @internal */\r\nexport function getVector3(_target: any, source: Float32Array, offset: number, scale: number): Vector3 {\r\n    return Vector3.FromArray(source, offset).scaleInPlace(scale);\r\n}\r\n\r\n/** @internal */\r\nexport function getQuaternion(_target: any, source: Float32Array, offset: number, scale: number): Quaternion {\r\n    return Quaternion.FromArray(source, offset).scaleInPlace(scale);\r\n}\r\n\r\n/** @internal */\r\nexport function getWeights(target: INode, source: Float32Array, offset: number, scale: number): Array<number> {\r\n    const value = new Array<number>(target._numMorphTargets!);\r\n    for (let i = 0; i < value.length; i++) {\r\n        value[i] = source[offset++] * scale;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n/** @internal */\r\nexport abstract class AnimationPropertyInfo {\r\n    /** @internal */\r\n    public constructor(\r\n        public readonly type: number,\r\n        public readonly name: string,\r\n        public readonly getValue: GetValueFn,\r\n        public readonly getStride: (target: any) => number\r\n    ) {}\r\n\r\n    protected _buildAnimation(name: string, fps: number, keys: any[]): Animation {\r\n        const babylonAnimation = new Animation(name, this.name, fps, this.type);\r\n        babylonAnimation.setKeys(keys);\r\n        return babylonAnimation;\r\n    }\r\n\r\n    /** @internal */\r\n    public abstract buildAnimations(target: any, name: string, fps: number, keys: any[]): { babylonAnimatable: IAnimatable; babylonAnimation: Animation }[];\r\n}\r\n\r\n/** @internal */\r\nexport class TransformNodeAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: INode, name: string, fps: number, keys: any[]) {\r\n        const babylonAnimations: { babylonAnimatable: IAnimatable; babylonAnimation: Animation }[] = [];\r\n        babylonAnimations.push({ babylonAnimatable: target._babylonTransformNode!, babylonAnimation: this._buildAnimation(name, fps, keys) });\r\n        return babylonAnimations;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WeightAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    public buildAnimations(target: INode, name: string, fps: number, keys: any[]) {\r\n        const babylonAnimations: { babylonAnimatable: IAnimatable; babylonAnimation: Animation }[] = [];\r\n        if (target._numMorphTargets) {\r\n            for (let targetIndex = 0; targetIndex < target._numMorphTargets; targetIndex++) {\r\n                const babylonAnimation = new Animation(`${name}_${targetIndex}`, this.name, fps, this.type);\r\n                babylonAnimation.setKeys(\r\n                    keys.map((key) => ({\r\n                        frame: key.frame,\r\n                        inTangent: key.inTangent ? key.inTangent[targetIndex] : undefined,\r\n                        value: key.value[targetIndex],\r\n                        outTangent: key.outTangent ? key.outTangent[targetIndex] : undefined,\r\n                        interpolation: key.interpolation,\r\n                    }))\r\n                );\r\n\r\n                if (target._primitiveBabylonMeshes) {\r\n                    for (const babylonMesh of target._primitiveBabylonMeshes) {\r\n                        if (babylonMesh.morphTargetManager) {\r\n                            const morphTarget = babylonMesh.morphTargetManager.getTarget(targetIndex);\r\n                            const babylonAnimationClone = babylonAnimation.clone();\r\n                            morphTarget.animations.push(babylonAnimationClone);\r\n                            babylonAnimations.push({ babylonAnimatable: morphTarget, babylonAnimation: babylonAnimationClone });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return babylonAnimations;\r\n    }\r\n}\r\n\r\nSetInterpolationForKey(\"/nodes/{}/translation\", [new TransformNodeAnimationPropertyInfo(Animation.ANIMATIONTYPE_VECTOR3, \"position\", getVector3, () => 3)]);\r\nSetInterpolationForKey(\"/nodes/{}/rotation\", [new TransformNodeAnimationPropertyInfo(Animation.ANIMATIONTYPE_QUATERNION, \"rotationQuaternion\", getQuaternion, () => 4)]);\r\nSetInterpolationForKey(\"/nodes/{}/scale\", [new TransformNodeAnimationPropertyInfo(Animation.ANIMATIONTYPE_VECTOR3, \"scaling\", getVector3, () => 3)]);\r\nSetInterpolationForKey(\"/nodes/{}/weights\", [new WeightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"influence\", getWeights, (target) => target._numMorphTargets!)]);\r\n"],
  "mappings": "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",
  "names": []
}
