import {
  FlowGraphUnaryOperationBlock,
  init_flowGraphUnaryOperationBlock
} from "./chunk-42KOJZHQ.js";
import {
  FlowGraphInteger,
  RichTypeBoolean,
  RichTypeFlowGraphInteger,
  RichTypeNumber,
  init_flowGraphInteger,
  init_flowGraphRichTypes
} from "./chunk-I4L6YYX4.js";
import {
  RegisterClass,
  init_typeStore
} from "./chunk-D6A73UHJ.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/Transformers/flowGraphTypeToTypeBlocks.js
var FlowGraphBooleanToFloat, FlowGraphBooleanToInt, FlowGraphFloatToBoolean, FlowGraphIntToBoolean, FlowGraphIntToFloat, FlowGraphFloatToInt;
var init_flowGraphTypeToTypeBlocks = __esm({
  "node_modules/@babylonjs/core/FlowGraph/Blocks/Data/Transformers/flowGraphTypeToTypeBlocks.js"() {
    init_flowGraphUnaryOperationBlock();
    init_flowGraphRichTypes();
    init_typeStore();
    init_flowGraphInteger();
    FlowGraphBooleanToFloat = class extends FlowGraphUnaryOperationBlock {
      constructor(config) {
        super(RichTypeBoolean, RichTypeNumber, (a) => +a, "FlowGraphBooleanToFloat", config);
      }
    };
    RegisterClass("FlowGraphBooleanToFloat", FlowGraphBooleanToFloat);
    FlowGraphBooleanToInt = class extends FlowGraphUnaryOperationBlock {
      constructor(config) {
        super(RichTypeBoolean, RichTypeFlowGraphInteger, (a) => FlowGraphInteger.FromValue(+a), "FlowGraphBooleanToInt", config);
      }
    };
    RegisterClass("FlowGraphBooleanToInt", FlowGraphBooleanToInt);
    FlowGraphFloatToBoolean = class extends FlowGraphUnaryOperationBlock {
      constructor(config) {
        super(RichTypeNumber, RichTypeBoolean, (a) => !!a, "FlowGraphFloatToBoolean", config);
      }
    };
    RegisterClass("FlowGraphFloatToBoolean", FlowGraphFloatToBoolean);
    FlowGraphIntToBoolean = class extends FlowGraphUnaryOperationBlock {
      constructor(config) {
        super(RichTypeFlowGraphInteger, RichTypeBoolean, (a) => !!a.value, "FlowGraphIntToBoolean", config);
      }
    };
    RegisterClass("FlowGraphIntToBoolean", FlowGraphIntToBoolean);
    FlowGraphIntToFloat = class extends FlowGraphUnaryOperationBlock {
      constructor(config) {
        super(RichTypeFlowGraphInteger, RichTypeNumber, (a) => a.value, "FlowGraphIntToFloat", config);
      }
    };
    RegisterClass("FlowGraphIntToFloat", FlowGraphIntToFloat);
    FlowGraphFloatToInt = class extends FlowGraphUnaryOperationBlock {
      constructor(config) {
        super(RichTypeNumber, RichTypeFlowGraphInteger, (a) => {
          const roundingMode = config == null ? void 0 : config.roundingMode;
          switch (roundingMode) {
            case "floor":
              return FlowGraphInteger.FromValue(Math.floor(a));
            case "ceil":
              return FlowGraphInteger.FromValue(Math.ceil(a));
            case "round":
              return FlowGraphInteger.FromValue(Math.round(a));
            default:
              return FlowGraphInteger.FromValue(a);
          }
        }, "FlowGraphFloatToInt", config);
      }
    };
    RegisterClass("FlowGraphFloatToInt", FlowGraphFloatToInt);
  }
});

export {
  FlowGraphBooleanToFloat,
  FlowGraphBooleanToInt,
  FlowGraphFloatToBoolean,
  FlowGraphIntToBoolean,
  FlowGraphIntToFloat,
  FlowGraphFloatToInt,
  init_flowGraphTypeToTypeBlocks
};
//# sourceMappingURL=chunk-TRKRNXMI.js.map
