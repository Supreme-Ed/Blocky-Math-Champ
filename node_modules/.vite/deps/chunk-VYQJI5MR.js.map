{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphCounterBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\n/**\r\n * A block that counts the number of times it has been called.\r\n * Afterwards it activates its out signal.\r\n */\r\nexport class FlowGraphCallCounterBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Output connection: The number of times the block has been called.\r\n     */\r\n    public readonly count: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: Resets the counter.\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.count = this.registerDataOutput(\"count\", RichTypeNumber);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        if (callingSignal === this.reset) {\r\n            context._setExecutionVariable(this, \"count\", 0);\r\n            this.count.setValue(0, context);\r\n            return;\r\n        }\r\n        const countValue = context._getExecutionVariable(this, \"count\", 0) + 1;\r\n\r\n        context._setExecutionVariable(this, \"count\", countValue);\r\n        this.count.setValue(countValue, context);\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.CallCounter;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.CallCounter, FlowGraphCallCounterBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAEA,IAUa;AAVb;;;AAEA;AACA;AAOM,IAAO,4BAAP,cAAyC,qCAAoC;MAU/E,YAAY,QAAqC;AAC7C,cAAM,MAAM;AAEZ,aAAK,QAAQ,KAAK,mBAAmB,SAAS,cAAc;AAC5D,aAAK,QAAQ,KAAK,qBAAqB,OAAO;MAClD;MAEO,SAAS,SAA2B,eAAwC;AAC/E,YAAI,kBAAkB,KAAK,OAAO;AAC9B,kBAAQ,sBAAsB,MAAM,SAAS,CAAC;AAC9C,eAAK,MAAM,SAAS,GAAG,OAAO;AAC9B;QACJ;AACA,cAAM,aAAa,QAAQ,sBAAsB,MAAM,SAAS,CAAC,IAAI;AAErE,gBAAQ,sBAAsB,MAAM,SAAS,UAAU;AACvD,aAAK,MAAM,SAAS,YAAY,OAAO;AACvC,aAAK,IAAI,gBAAgB,OAAO;MACpC;;;;MAKgB,eAAY;AACxB,eAAA;MACJ;;AAEJ,kBAAa,6BAAkC,yBAAyB;;;",
  "names": []
}
