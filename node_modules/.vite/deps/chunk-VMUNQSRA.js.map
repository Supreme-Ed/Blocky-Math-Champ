{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/Utils/flowGraphIndexOfBlock.ts"],
  "sourcesContent": ["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny, RichTypeFlowGraphInteger } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\n\n/**\n * This block takes an object as input and an array and returns the index of the object in the array.\n */\nexport class FlowGraphIndexOfBlock<T = any> extends FlowGraphBlock {\n    /**\n     * Input connection: The object to find in the array.\n     */\n    public readonly object: FlowGraphDataConnection<T>;\n\n    /**\n     * Input connection: The array to search in.\n     */\n    public readonly array: FlowGraphDataConnection<T[]>;\n\n    /**\n     * Output connection: The index of the object in the array.\n     * -1 if not found!\n     */\n    public readonly index: FlowGraphDataConnection<FlowGraphInteger>;\n\n    /**\n     * Construct a FlowGraphIndexOfBlock.\n     * @param config construction parameters\n     */\n    constructor(public override config: IFlowGraphBlockConfiguration) {\n        super(config);\n\n        this.object = this.registerDataInput(\"object\", RichTypeAny);\n        this.array = this.registerDataInput(\"array\", RichTypeAny);\n        this.index = this.registerDataOutput(\"index\", RichTypeFlowGraphInteger, new FlowGraphInteger(-1));\n    }\n\n    /**\n     * @internal\n     */\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const object = this.object.getValue(context);\n        const array = this.array.getValue(context);\n        if (array) {\n            this.index.setValue(new FlowGraphInteger(array.indexOf(object)), context);\n        }\n    }\n\n    /**\n     * Serializes this block\n     * @param serializationObject the object to serialize to\n     */\n    public override serialize(serializationObject?: any): void {\n        super.serialize(serializationObject);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.IndexOf;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.IndexOf, FlowGraphIndexOfBlock);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AACA,IAWa;AAXb;;;AAGA;AAEA;AACA;AAKM,IAAO,wBAAP,cAA8C,eAAc;;;;;MAqB9D,YAA4B,QAAoC;AAC5D,cAAM,MAAM;AADY,aAAA,SAAA;AAGxB,aAAK,SAAS,KAAK,kBAAkB,UAAU,WAAW;AAC1D,aAAK,QAAQ,KAAK,kBAAkB,SAAS,WAAW;AACxD,aAAK,QAAQ,KAAK,mBAAmB,SAAS,0BAA0B,IAAI,iBAAiB,EAAE,CAAC;MACpG;;;;MAKgB,eAAe,SAAyB;AACpD,cAAM,SAAS,KAAK,OAAO,SAAS,OAAO;AAC3C,cAAM,QAAQ,KAAK,MAAM,SAAS,OAAO;AACzC,YAAI,OAAO;AACP,eAAK,MAAM,SAAS,IAAI,iBAAiB,MAAM,QAAQ,MAAM,CAAC,GAAG,OAAO;QAC5E;MACJ;;;;;MAMgB,UAAU,qBAAyB;AAC/C,cAAM,UAAU,mBAAmB;MACvC;MAEgB,eAAY;AACxB,eAAA;MACJ;;AAGJ,kBAAa,yBAA8B,qBAAqB;;;",
  "names": []
}
