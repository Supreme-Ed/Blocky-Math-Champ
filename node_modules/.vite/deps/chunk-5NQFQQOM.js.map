{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/Animation/flowGraphStopAnimationBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeAny, RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { FlowGraphAsyncExecutionBlock } from \"core/FlowGraph/flowGraphAsyncExecutionBlock\";\r\n/**\r\n * @experimental\r\n * Block that stops a running animation\r\n */\r\nexport class FlowGraphStopAnimationBlock extends FlowGraphAsyncExecutionBlock {\r\n    /**\r\n     * Input connection: The animation to stop.\r\n     */\r\n    public readonly animationGroup: FlowGraphDataConnection<AnimationGroup>;\r\n\r\n    /**\r\n     * Input connection - if defined (positive integer) the animation will stop at this frame.\r\n     */\r\n    public readonly stopAtFrame: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.animationGroup = this.registerDataInput(\"animationGroup\", RichTypeAny);\r\n        this.stopAtFrame = this.registerDataInput(\"stopAtFrame\", RichTypeNumber, -1);\r\n    }\r\n\r\n    public override _preparePendingTasks(context: FlowGraphContext): void {\r\n        const animationToStopValue = this.animationGroup.getValue(context);\r\n        const stopAtFrame = this.stopAtFrame.getValue(context) ?? -1;\r\n        // get the context variable\r\n        const pendingStopAnimations = context._getGlobalContextVariable(\r\n            \"pendingStopAnimations\",\r\n            [] as {\r\n                uniqueId: number;\r\n                stopAtFrame: number;\r\n            }[]\r\n        );\r\n        // add the animation to the list\r\n        pendingStopAnimations.push({ uniqueId: animationToStopValue.uniqueId, stopAtFrame });\r\n        // set the global context variable\r\n        context._setGlobalContextVariable(\"pendingStopAnimations\", pendingStopAnimations);\r\n    }\r\n    public override _cancelPendingTasks(context: FlowGraphContext): void {\r\n        // remove the animation from the list\r\n        const animationToStopValue = this.animationGroup.getValue(context);\r\n        const pendingStopAnimations = context._getGlobalContextVariable(\r\n            \"pendingStopAnimations\",\r\n            [] as {\r\n                uniqueId: number;\r\n                stopAtFrame: number;\r\n            }[]\r\n        );\r\n        for (let i = 0; i < pendingStopAnimations.length; i++) {\r\n            if (pendingStopAnimations[i].uniqueId === animationToStopValue.uniqueId) {\r\n                pendingStopAnimations.splice(i, 1);\r\n                // set the global context variable\r\n                context._setGlobalContextVariable(\"pendingStopAnimations\", pendingStopAnimations);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        const animationToStopValue = this.animationGroup.getValue(context);\r\n        const stopTime = this.stopAtFrame.getValue(context) ?? -1;\r\n        // check the values\r\n        if (!animationToStopValue) {\r\n            Logger.Warn(\"No animation group provided to stop.\");\r\n            return this._reportError(context, \"No animation group provided to stop.\");\r\n        }\r\n        if (isNaN(stopTime)) {\r\n            return this._reportError(context, \"Invalid stop time.\");\r\n        }\r\n        if (stopTime > 0) {\r\n            this._startPendingTasks(context);\r\n        } else {\r\n            this._stopAnimation(animationToStopValue, context);\r\n        }\r\n        // note that out will not be triggered in case of an error\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    public override _executeOnTick(context: FlowGraphContext): void {\r\n        const animationToStopValue = this.animationGroup.getValue(context);\r\n        // check each frame if any animation should be stopped\r\n        const pendingStopAnimations = context._getGlobalContextVariable(\"pendingStopAnimations\", [] as { uniqueId: number; stopAtFrame: number }[]);\r\n        for (let i = 0; i < pendingStopAnimations.length; i++) {\r\n            // compare the uniqueId to the animation to stop\r\n            if (pendingStopAnimations[i].uniqueId === animationToStopValue.uniqueId) {\r\n                // check if the current frame is AFTER the stopAtFrame\r\n                if (animationToStopValue.getCurrentFrame() >= pendingStopAnimations[i].stopAtFrame) {\r\n                    // stop the animation\r\n                    this._stopAnimation(animationToStopValue, context);\r\n                    // remove the animation from the list\r\n                    pendingStopAnimations.splice(i, 1);\r\n                    // set the global context variable\r\n                    context._setGlobalContextVariable(\"pendingStopAnimations\", pendingStopAnimations);\r\n                    this.done._activateSignal(context);\r\n                    context._removePendingBlock(this);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.StopAnimation;\r\n    }\r\n\r\n    private _stopAnimation(animationGroup: AnimationGroup, context: FlowGraphContext): void {\r\n        const currentlyRunning = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []) as number[];\r\n        const index = currentlyRunning.indexOf(animationGroup.uniqueId);\r\n        if (index !== -1) {\r\n            animationGroup.stop();\r\n            currentlyRunning.splice(index, 1);\r\n            // update the global context variable\r\n            context._setGlobalContextVariable(\"currentlyRunningAnimationGroups\", currentlyRunning);\r\n        } else {\r\n            // Logger.Warn(\"Trying to stop an animation that is not running.\");\r\n            // no-op for now. Probably no need to log anything here.\r\n        }\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.StopAnimation, FlowGraphStopAnimationBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAEA,IAWa;AAXb;;;AAEA;AAGA;AACA;AAKM,IAAO,8BAAP,cAA2C,6BAA4B;MAWzE,YAAY,QAAqC;AAC7C,cAAM,MAAM;AACZ,aAAK,iBAAiB,KAAK,kBAAkB,kBAAkB,WAAW;AAC1E,aAAK,cAAc,KAAK,kBAAkB,eAAe,gBAAgB,EAAE;MAC/E;MAEgB,qBAAqB,SAAyB;AAC1D,cAAM,uBAAuB,KAAK,eAAe,SAAS,OAAO;AACjE,cAAM,cAAc,KAAK,YAAY,SAAS,OAAO,KAAK;AAE1D,cAAM,wBAAwB,QAAQ,0BAClC,yBACA,CAAA,CAGG;AAGP,8BAAsB,KAAK,EAAE,UAAU,qBAAqB,UAAU,YAAW,CAAE;AAEnF,gBAAQ,0BAA0B,yBAAyB,qBAAqB;MACpF;MACgB,oBAAoB,SAAyB;AAEzD,cAAM,uBAAuB,KAAK,eAAe,SAAS,OAAO;AACjE,cAAM,wBAAwB,QAAQ,0BAClC,yBACA,CAAA,CAGG;AAEP,iBAAS,IAAI,GAAG,IAAI,sBAAsB,QAAQ,KAAK;AACnD,cAAI,sBAAsB,CAAC,EAAE,aAAa,qBAAqB,UAAU;AACrE,kCAAsB,OAAO,GAAG,CAAC;AAEjC,oBAAQ,0BAA0B,yBAAyB,qBAAqB;AAChF;UACJ;QACJ;MACJ;MAEO,SAAS,SAAyB;AACrC,cAAM,uBAAuB,KAAK,eAAe,SAAS,OAAO;AACjE,cAAM,WAAW,KAAK,YAAY,SAAS,OAAO,KAAK;AAEvD,YAAI,CAAC,sBAAsB;AACvB,iBAAO,KAAK,sCAAsC;AAClD,iBAAO,KAAK,aAAa,SAAS,sCAAsC;QAC5E;AACA,YAAI,MAAM,QAAQ,GAAG;AACjB,iBAAO,KAAK,aAAa,SAAS,oBAAoB;QAC1D;AACA,YAAI,WAAW,GAAG;AACd,eAAK,mBAAmB,OAAO;QACnC,OAAO;AACH,eAAK,eAAe,sBAAsB,OAAO;QACrD;AAEA,aAAK,IAAI,gBAAgB,OAAO;MACpC;MAEgB,eAAe,SAAyB;AACpD,cAAM,uBAAuB,KAAK,eAAe,SAAS,OAAO;AAEjE,cAAM,wBAAwB,QAAQ,0BAA0B,yBAAyB,CAAA,CAAiD;AAC1I,iBAAS,IAAI,GAAG,IAAI,sBAAsB,QAAQ,KAAK;AAEnD,cAAI,sBAAsB,CAAC,EAAE,aAAa,qBAAqB,UAAU;AAErE,gBAAI,qBAAqB,gBAAe,KAAM,sBAAsB,CAAC,EAAE,aAAa;AAEhF,mBAAK,eAAe,sBAAsB,OAAO;AAEjD,oCAAsB,OAAO,GAAG,CAAC;AAEjC,sBAAQ,0BAA0B,yBAAyB,qBAAqB;AAChF,mBAAK,KAAK,gBAAgB,OAAO;AACjC,sBAAQ,oBAAoB,IAAI;AAChC;YACJ;UACJ;QACJ;MACJ;;;;MAKgB,eAAY;AACxB,eAAA;MACJ;MAEQ,eAAe,gBAAgC,SAAyB;AAC5E,cAAM,mBAAmB,QAAQ,0BAA0B,mCAAmC,CAAA,CAAE;AAChG,cAAM,QAAQ,iBAAiB,QAAQ,eAAe,QAAQ;AAC9D,YAAI,UAAU,IAAI;AACd,yBAAe,KAAI;AACnB,2BAAiB,OAAO,OAAO,CAAC;AAEhC,kBAAQ,0BAA0B,mCAAmC,gBAAgB;QACzF,OAAO;QAGP;MACJ;;AAEJ,kBAAa,+BAAoC,2BAA2B;;;",
  "names": []
}
