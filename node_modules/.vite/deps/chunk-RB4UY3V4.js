import {
  FlowGraphTernaryOperationBlock,
  init_flowGraphTernaryOperationBlock
} from "./chunk-QQ2BHOF5.js";
import {
  FlowGraphBinaryOperationBlock,
  init_flowGraphBinaryOperationBlock
} from "./chunk-4DQISBST.js";
import {
  FlowGraphUnaryOperationBlock,
  init_flowGraphUnaryOperationBlock
} from "./chunk-42KOJZHQ.js";
import {
  _getClassNameOf,
  init_utils
} from "./chunk-FPMUWFNC.js";
import {
  RichTypeAny,
  RichTypeMatrix,
  RichTypeNumber,
  RichTypeVector2,
  RichTypeVector3,
  getRichTypeByFlowGraphType,
  init_flowGraphRichTypes
} from "./chunk-I4L6YYX4.js";
import {
  Matrix,
  Vector2,
  Vector3,
  Vector4,
  init_math_vector
} from "./chunk-3KKXJTKL.js";
import {
  RegisterClass,
  init_typeStore
} from "./chunk-D6A73UHJ.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/Math/flowGraphVectorMathBlocks.js
function _transformVector(a, b) {
  const className = _getClassNameOf(a);
  switch (className) {
    case "Vector2":
      return b.transformVector(a);
    case "Vector3":
      return b.transformVector(a);
    case "Vector4":
      a = a;
      return new Vector4(a.x * b.m[0] + a.y * b.m[1] + a.z * b.m[2] + a.w * b.m[3], a.x * b.m[4] + a.y * b.m[5] + a.z * b.m[6] + a.w * b.m[7], a.x * b.m[8] + a.y * b.m[9] + a.z * b.m[10] + a.w * b.m[11], a.x * b.m[12] + a.y * b.m[13] + a.z * b.m[14] + a.w * b.m[15]);
    default:
      throw new Error(`Cannot transform value ${a}`);
  }
}
var FlowGraphLengthBlock, FlowGraphNormalizeBlock, FlowGraphDotBlock, FlowGraphCrossBlock, FlowGraphRotate2DBlock, FlowGraphRotate3DBlock, FlowGraphTransformBlock, FlowGraphTransformCoordinatesBlock;
var init_flowGraphVectorMathBlocks = __esm({
  "node_modules/@babylonjs/core/FlowGraph/Blocks/Data/Math/flowGraphVectorMathBlocks.js"() {
    init_flowGraphRichTypes();
    init_typeStore();
    init_flowGraphBinaryOperationBlock();
    init_flowGraphUnaryOperationBlock();
    init_math_vector();
    init_flowGraphTernaryOperationBlock();
    init_utils();
    FlowGraphLengthBlock = class extends FlowGraphUnaryOperationBlock {
      constructor(config) {
        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLength(a), "FlowGraphLengthBlock", config);
      }
      _polymorphicLength(a) {
        const aClassName = _getClassNameOf(a);
        switch (aClassName) {
          case "Vector2":
          case "Vector3":
          case "Vector4":
          case "Quaternion":
            return a.length();
          default:
            throw new Error(`Cannot compute length of value ${a}`);
        }
      }
    };
    RegisterClass("FlowGraphLengthBlock", FlowGraphLengthBlock);
    FlowGraphNormalizeBlock = class extends FlowGraphUnaryOperationBlock {
      constructor(config) {
        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicNormalize(a), "FlowGraphNormalizeBlock", config);
      }
      _polymorphicNormalize(a) {
        var _a;
        const aClassName = _getClassNameOf(a);
        let normalized;
        switch (aClassName) {
          case "Vector2":
          case "Vector3":
          case "Vector4":
          case "Quaternion":
            normalized = a.normalizeToNew();
            if ((_a = this.config) == null ? void 0 : _a.nanOnZeroLength) {
              const length = a.length();
              if (length === 0) {
                normalized.setAll(NaN);
              }
            }
            return normalized;
          default:
            throw new Error(`Cannot normalize value ${a}`);
        }
      }
    };
    RegisterClass("FlowGraphNormalizeBlock", FlowGraphNormalizeBlock);
    FlowGraphDotBlock = class extends FlowGraphBinaryOperationBlock {
      constructor(config) {
        super(RichTypeAny, RichTypeAny, RichTypeNumber, (a, b) => this._polymorphicDot(a, b), "FlowGraphDotBlock", config);
      }
      _polymorphicDot(a, b) {
        const className = _getClassNameOf(a);
        switch (className) {
          case "Vector2":
          case "Vector3":
          case "Vector4":
          case "Quaternion":
            return a.dot(b);
          default:
            throw new Error(`Cannot get dot product of ${a} and ${b}`);
        }
      }
    };
    RegisterClass("FlowGraphDotBlock", FlowGraphDotBlock);
    FlowGraphCrossBlock = class extends FlowGraphBinaryOperationBlock {
      constructor(config) {
        super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (a, b) => Vector3.Cross(a, b), "FlowGraphCrossBlock", config);
      }
    };
    RegisterClass("FlowGraphCrossBlock", FlowGraphCrossBlock);
    FlowGraphRotate2DBlock = class extends FlowGraphBinaryOperationBlock {
      constructor(config) {
        super(RichTypeVector2, RichTypeNumber, RichTypeVector2, (a, b) => Vector2.Transform(a, Matrix.RotationZ(b)), "FlowGraphRotate2DBlock", config);
      }
    };
    RegisterClass("FlowGraphRotate2DBlock", FlowGraphRotate2DBlock);
    FlowGraphRotate3DBlock = class extends FlowGraphTernaryOperationBlock {
      constructor(config) {
        super(RichTypeVector3, RichTypeVector3, RichTypeNumber, RichTypeVector3, (a, b, c) => Vector3.TransformCoordinates(a, Matrix.RotationAxis(b, c)), "FlowGraphRotate3DBlock", config);
      }
    };
    RegisterClass("FlowGraphRotate3DBlock", FlowGraphRotate3DBlock);
    FlowGraphTransformBlock = class extends FlowGraphBinaryOperationBlock {
      constructor(config) {
        const vectorType = (config == null ? void 0 : config.vectorType) || "Vector3";
        const matrixType = vectorType === "Vector2" ? "Matrix2D" : vectorType === "Vector3" ? "Matrix3D" : "Matrix";
        super(getRichTypeByFlowGraphType(vectorType), getRichTypeByFlowGraphType(matrixType), getRichTypeByFlowGraphType(vectorType), _transformVector, "FlowGraphTransformVectorBlock", config);
      }
    };
    RegisterClass("FlowGraphTransformVectorBlock", FlowGraphTransformBlock);
    FlowGraphTransformCoordinatesBlock = class extends FlowGraphBinaryOperationBlock {
      constructor(config) {
        super(RichTypeVector3, RichTypeMatrix, RichTypeVector3, (a, b) => Vector3.TransformCoordinates(a, b), "FlowGraphTransformCoordinatesBlock", config);
      }
    };
    RegisterClass("FlowGraphTransformCoordinatesBlock", FlowGraphTransformCoordinatesBlock);
  }
});

export {
  FlowGraphLengthBlock,
  FlowGraphNormalizeBlock,
  FlowGraphDotBlock,
  FlowGraphCrossBlock,
  FlowGraphRotate2DBlock,
  FlowGraphRotate3DBlock,
  FlowGraphTransformBlock,
  FlowGraphTransformCoordinatesBlock,
  init_flowGraphVectorMathBlocks
};
//# sourceMappingURL=chunk-RB4UY3V4.js.map
