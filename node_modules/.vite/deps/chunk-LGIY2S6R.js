import {
  init_imageProcessingFunctions
} from "./chunk-B2L22N5N.js";
import {
  init_imageProcessingDeclaration
} from "./chunk-DZTKG5EM.js";
import {
  init_helperFunctions
} from "./chunk-W4QLV37H.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/ShadersWGSL/imageProcessing.fragment.js
var name, shader, imageProcessingPixelShaderWGSL;
var init_imageProcessing_fragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/imageProcessing.fragment.js"() {
    init_shaderStore();
    init_imageProcessingDeclaration();
    init_helperFunctions();
    init_imageProcessingFunctions();
    name = "imageProcessingPixelShader";
    shader = `varying vUV: vec2f;var textureSamplerSampler: sampler;var textureSampler: texture_2d<f32>;
#include<imageProcessingDeclaration>
#include<helperFunctions>
#include<imageProcessingFunctions>
#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs)->FragmentOutputs {var result: vec4f=textureSample(textureSampler,textureSamplerSampler,input.vUV);result=vec4f(max(result.rgb,vec3f(0.)),result.a);
#ifdef IMAGEPROCESSING
#ifndef FROMLINEARSPACE
result=vec4f(toLinearSpaceVec3(result.rgb),result.a);
#endif
result=applyImageProcessing(result);
#else
#ifdef FROMLINEARSPACE
result=applyImageProcessing(result);
#endif
#endif
fragmentOutputs.color=result;}`;
    if (!ShaderStore.ShadersStoreWGSL[name]) {
      ShaderStore.ShadersStoreWGSL[name] = shader;
    }
    imageProcessingPixelShaderWGSL = { name, shader };
  }
});

export {
  imageProcessingPixelShaderWGSL,
  init_imageProcessing_fragment
};
//# sourceMappingURL=chunk-LGIY2S6R.js.map
