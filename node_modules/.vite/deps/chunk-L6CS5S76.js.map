{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/webRequest.ts"],
  "sourcesContent": ["import type { IWebRequest } from \"./interfaces/iWebRequest\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { INative } from \"../Engines/Native/nativeInterfaces\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare const _native: INative;\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction createXMLHttpRequest(): XMLHttpRequest {\r\n    // If running in Babylon Native, then defer to the native XMLHttpRequest, which has the same public contract\r\n    if (typeof _native !== \"undefined\" && _native.XMLHttpRequest) {\r\n        return new _native.XMLHttpRequest();\r\n    } else {\r\n        return new XMLHttpRequest();\r\n    }\r\n}\r\n\r\n/**\r\n * Extended version of XMLHttpRequest with support for customizations (headers, ...)\r\n */\r\nexport class WebRequest implements IWebRequest {\r\n    private readonly _xhr = createXMLHttpRequest();\r\n\r\n    /**\r\n     * Custom HTTP Request Headers to be sent with XMLHttpRequests\r\n     * i.e. when loading files, where the server/service expects an Authorization header\r\n     */\r\n    public static CustomRequestHeaders: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Add callback functions in this array to update all the requests before they get sent to the network\r\n     */\r\n    public static CustomRequestModifiers = new Array<(request: XMLHttpRequest, url: string) => string | void>();\r\n\r\n    /**\r\n     * If set to true, requests to Babylon.js CDN requests will not be modified\r\n     */\r\n    public static SkipRequestModificationForBabylonCDN = true;\r\n\r\n    /**\r\n     * This function can be called to check if there are request modifiers for network requests\r\n     * @returns true if there are any custom requests available\r\n     */\r\n    public static get IsCustomRequestAvailable(): boolean {\r\n        return Object.keys(WebRequest.CustomRequestHeaders).length > 0 || WebRequest.CustomRequestModifiers.length > 0;\r\n    }\r\n\r\n    private _requestURL: string = \"\";\r\n\r\n    /**\r\n     * Returns the requested URL once open has been called\r\n     */\r\n    public get requestURL(): string {\r\n        return this._requestURL;\r\n    }\r\n\r\n    private _injectCustomRequestHeaders(): void {\r\n        if (this._shouldSkipRequestModifications(this._requestURL)) {\r\n            return;\r\n        }\r\n        for (const key in WebRequest.CustomRequestHeaders) {\r\n            const val = WebRequest.CustomRequestHeaders[key];\r\n            if (val) {\r\n                this._xhr.setRequestHeader(key, val);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _shouldSkipRequestModifications(url: string): boolean {\r\n        return WebRequest.SkipRequestModificationForBabylonCDN && (url.includes(\"preview.babylonjs.com\") || url.includes(\"cdn.babylonjs.com\"));\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a function to be called when loading progress changes\r\n     */\r\n    public get onprogress(): ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null {\r\n        return this._xhr.onprogress;\r\n    }\r\n\r\n    public set onprogress(value: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null) {\r\n        this._xhr.onprogress = value;\r\n    }\r\n\r\n    /**\r\n     * Returns client's state\r\n     */\r\n    public get readyState(): number {\r\n        return this._xhr.readyState;\r\n    }\r\n\r\n    /**\r\n     * Returns client's status\r\n     */\r\n    public get status(): number {\r\n        return this._xhr.status;\r\n    }\r\n\r\n    /**\r\n     * Returns client's status as a text\r\n     */\r\n    public get statusText(): string {\r\n        return this._xhr.statusText;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response\r\n     */\r\n    public get response(): any {\r\n        return this._xhr.response;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response url\r\n     */\r\n    public get responseURL(): string {\r\n        return this._xhr.responseURL;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response as text\r\n     */\r\n    public get responseText(): string {\r\n        return this._xhr.responseText;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the expected response type\r\n     */\r\n    public get responseType(): XMLHttpRequestResponseType {\r\n        return this._xhr.responseType;\r\n    }\r\n\r\n    public set responseType(value: XMLHttpRequestResponseType) {\r\n        this._xhr.responseType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the timeout value in milliseconds\r\n     */\r\n    public get timeout(): number {\r\n        return this._xhr.timeout;\r\n    }\r\n\r\n    public set timeout(value: number) {\r\n        this._xhr.timeout = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public addEventListener<K extends keyof XMLHttpRequestEventMap>(\r\n        type: K,\r\n        listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any,\r\n        options?: boolean | AddEventListenerOptions\r\n    ): void;\r\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this._xhr.addEventListener(type, listener, options);\r\n    }\r\n\r\n    /** @internal */\r\n    public removeEventListener<K extends keyof XMLHttpRequestEventMap>(\r\n        type: K,\r\n        listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any,\r\n        options?: boolean | EventListenerOptions\r\n    ): void;\r\n    public removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void {\r\n        this._xhr.removeEventListener(type, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Cancels any network activity\r\n     */\r\n    public abort() {\r\n        this._xhr.abort();\r\n    }\r\n\r\n    /**\r\n     * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD\r\n     * @param body defines an optional request body\r\n     */\r\n    public send(body?: Document | XMLHttpRequestBodyInit | null): void {\r\n        if (WebRequest.CustomRequestHeaders) {\r\n            this._injectCustomRequestHeaders();\r\n        }\r\n\r\n        this._xhr.send(body);\r\n    }\r\n\r\n    /**\r\n     * Sets the request method, request URL\r\n     * @param method defines the method to use (GET, POST, etc..)\r\n     * @param url defines the url to connect with\r\n     */\r\n    public open(method: string, url: string): void {\r\n        for (const update of WebRequest.CustomRequestModifiers) {\r\n            if (this._shouldSkipRequestModifications(url)) {\r\n                return;\r\n            }\r\n            url = update(this._xhr, url) || url;\r\n        }\r\n\r\n        // Clean url\r\n        url = url.replace(\"file:http:\", \"http:\");\r\n        url = url.replace(\"file:https:\", \"https:\");\r\n\r\n        this._requestURL = url;\r\n\r\n        this._xhr.open(method, url, true);\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a request header.\r\n     * @param name The name of the header whose value is to be set\r\n     * @param value The value to set as the body of the header\r\n     */\r\n    setRequestHeader(name: string, value: string): void {\r\n        this._xhr.setRequestHeader(name, value);\r\n    }\r\n\r\n    /**\r\n     * Get the string containing the text of a particular header's value.\r\n     * @param name The name of the header\r\n     * @returns The string containing the text of the given header name\r\n     */\r\n    getResponseHeader(name: string): Nullable<string> {\r\n        return this._xhr.getResponseHeader(name);\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;AASA,SAAS,uBAAoB;AAEzB,MAAI,OAAO,YAAY,eAAe,QAAQ,gBAAgB;AAC1D,WAAO,IAAI,QAAQ,eAAc;EACrC,OAAO;AACH,WAAO,IAAI,eAAc;EAC7B;AACJ;AATA,IAca;AAdb;;AAcM,IAAO,aAAP,MAAO,YAAU;MAAvB,cAAA;AACqB,aAAA,OAAO,qBAAoB;AA0BpC,aAAA,cAAsB;MAkLlC;;;;;MAtLW,WAAW,2BAAwB;AACtC,eAAO,OAAO,KAAK,YAAW,oBAAoB,EAAE,SAAS,KAAK,YAAW,uBAAuB,SAAS;MACjH;;;;MAOA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEQ,8BAA2B;AAC/B,YAAI,KAAK,gCAAgC,KAAK,WAAW,GAAG;AACxD;QACJ;AACA,mBAAW,OAAO,YAAW,sBAAsB;AAC/C,gBAAM,MAAM,YAAW,qBAAqB,GAAG;AAC/C,cAAI,KAAK;AACL,iBAAK,KAAK,iBAAiB,KAAK,GAAG;UACvC;QACJ;MACJ;MAEQ,gCAAgC,KAAW;AAC/C,eAAO,YAAW,yCAAyC,IAAI,SAAS,uBAAuB,KAAK,IAAI,SAAS,mBAAmB;MACxI;;;;MAKA,IAAW,aAAU;AACjB,eAAO,KAAK,KAAK;MACrB;MAEA,IAAW,WAAW,OAAgE;AAClF,aAAK,KAAK,aAAa;MAC3B;;;;MAKA,IAAW,aAAU;AACjB,eAAO,KAAK,KAAK;MACrB;;;;MAKA,IAAW,SAAM;AACb,eAAO,KAAK,KAAK;MACrB;;;;MAKA,IAAW,aAAU;AACjB,eAAO,KAAK,KAAK;MACrB;;;;MAKA,IAAW,WAAQ;AACf,eAAO,KAAK,KAAK;MACrB;;;;MAKA,IAAW,cAAW;AAClB,eAAO,KAAK,KAAK;MACrB;;;;MAKA,IAAW,eAAY;AACnB,eAAO,KAAK,KAAK;MACrB;;;;MAKA,IAAW,eAAY;AACnB,eAAO,KAAK,KAAK;MACrB;MAEA,IAAW,aAAa,OAAiC;AACrD,aAAK,KAAK,eAAe;MAC7B;;;;MAKA,IAAW,UAAO;AACd,eAAO,KAAK,KAAK;MACrB;MAEA,IAAW,QAAQ,OAAa;AAC5B,aAAK,KAAK,UAAU;MACxB;MAQO,iBAAiB,MAAc,UAA8C,SAA2C;AAC3H,aAAK,KAAK,iBAAiB,MAAM,UAAU,OAAO;MACtD;MAQO,oBAAoB,MAAc,UAA8C,SAAwC;AAC3H,aAAK,KAAK,oBAAoB,MAAM,UAAU,OAAO;MACzD;;;;MAKO,QAAK;AACR,aAAK,KAAK,MAAK;MACnB;;;;;MAMO,KAAK,MAA+C;AACvD,YAAI,YAAW,sBAAsB;AACjC,eAAK,4BAA2B;QACpC;AAEA,aAAK,KAAK,KAAK,IAAI;MACvB;;;;;;MAOO,KAAK,QAAgB,KAAW;AACnC,mBAAW,UAAU,YAAW,wBAAwB;AACpD,cAAI,KAAK,gCAAgC,GAAG,GAAG;AAC3C;UACJ;AACA,gBAAM,OAAO,KAAK,MAAM,GAAG,KAAK;QACpC;AAGA,cAAM,IAAI,QAAQ,cAAc,OAAO;AACvC,cAAM,IAAI,QAAQ,eAAe,QAAQ;AAEzC,aAAK,cAAc;AAEnB,aAAK,KAAK,KAAK,QAAQ,KAAK,IAAI;MACpC;;;;;;MAOA,iBAAiB,MAAc,OAAa;AACxC,aAAK,KAAK,iBAAiB,MAAM,KAAK;MAC1C;;;;;;MAOA,kBAAkB,MAAY;AAC1B,eAAO,KAAK,KAAK,kBAAkB,IAAI;MAC3C;;AArMc,eAAA,uBAAkD,CAAA;AAKlD,eAAA,yBAAyB,IAAI,MAAK;AAKlC,eAAA,uCAAuC;;;",
  "names": []
}
