{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/colorCurves.functions.ts", "../../../dev/core/src/Materials/colorCurves.ts", "../../../dev/core/src/Materials/imageProcessingConfiguration.functions.ts", "../../../dev/core/src/Materials/imageProcessingConfiguration.ts"],
  "sourcesContent": ["/**\r\n * Prepare the list of uniforms associated with the ColorCurves effects.\r\n * @param uniformsList The list of uniforms used in the effect\r\n */\r\nexport function PrepareUniformsForColorCurves(uniformsList: string[]): void {\r\n    uniformsList.push(\"vCameraColorCurveNeutral\", \"vCameraColorCurvePositive\", \"vCameraColorCurveNegative\");\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { PrepareUniformsForColorCurves } from \"./colorCurves.functions\";\r\n\r\n/**\r\n * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\r\n * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n */\r\nexport class ColorCurves {\r\n    private _dirty = true;\r\n\r\n    private _tempColor = new Color4(0, 0, 0, 0);\r\n\r\n    private _globalCurve = new Color4(0, 0, 0, 0);\r\n    private _highlightsCurve = new Color4(0, 0, 0, 0);\r\n    private _midtonesCurve = new Color4(0, 0, 0, 0);\r\n    private _shadowsCurve = new Color4(0, 0, 0, 0);\r\n\r\n    private _positiveCurve = new Color4(0, 0, 0, 0);\r\n    private _negativeCurve = new Color4(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    private _globalHue = 30;\r\n\r\n    @serialize()\r\n    private _globalDensity = 0;\r\n\r\n    @serialize()\r\n    private _globalSaturation = 0;\r\n\r\n    @serialize()\r\n    private _globalExposure = 0;\r\n\r\n    /**\r\n     * Gets the global Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get globalHue(): number {\r\n        return this._globalHue;\r\n    }\r\n    /**\r\n     * Sets the global Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set globalHue(value: number) {\r\n        this._globalHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the global Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get globalDensity(): number {\r\n        return this._globalDensity;\r\n    }\r\n    /**\r\n     * Sets the global Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set globalDensity(value: number) {\r\n        this._globalDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the global Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get globalSaturation(): number {\r\n        return this._globalSaturation;\r\n    }\r\n    /**\r\n     * Sets the global Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set globalSaturation(value: number) {\r\n        this._globalSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the global Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get globalExposure(): number {\r\n        return this._globalExposure;\r\n    }\r\n    /**\r\n     * Sets the global Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set globalExposure(value: number) {\r\n        this._globalExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    @serialize()\r\n    private _highlightsHue = 30;\r\n\r\n    @serialize()\r\n    private _highlightsDensity = 0;\r\n\r\n    @serialize()\r\n    private _highlightsSaturation = 0;\r\n\r\n    @serialize()\r\n    private _highlightsExposure = 0;\r\n\r\n    /**\r\n     * Gets the highlights Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get highlightsHue(): number {\r\n        return this._highlightsHue;\r\n    }\r\n    /**\r\n     * Sets the highlights Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set highlightsHue(value: number) {\r\n        this._highlightsHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get highlightsDensity(): number {\r\n        return this._highlightsDensity;\r\n    }\r\n    /**\r\n     * Sets the highlights Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set highlightsDensity(value: number) {\r\n        this._highlightsDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get highlightsSaturation(): number {\r\n        return this._highlightsSaturation;\r\n    }\r\n    /**\r\n     * Sets the highlights Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set highlightsSaturation(value: number) {\r\n        this._highlightsSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get highlightsExposure(): number {\r\n        return this._highlightsExposure;\r\n    }\r\n    /**\r\n     * Sets the highlights Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set highlightsExposure(value: number) {\r\n        this._highlightsExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    @serialize()\r\n    private _midtonesHue = 30;\r\n\r\n    @serialize()\r\n    private _midtonesDensity = 0;\r\n\r\n    @serialize()\r\n    private _midtonesSaturation = 0;\r\n\r\n    @serialize()\r\n    private _midtonesExposure = 0;\r\n\r\n    /**\r\n     * Gets the midtones Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get midtonesHue(): number {\r\n        return this._midtonesHue;\r\n    }\r\n    /**\r\n     * Sets the midtones Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set midtonesHue(value: number) {\r\n        this._midtonesHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get midtonesDensity(): number {\r\n        return this._midtonesDensity;\r\n    }\r\n    /**\r\n     * Sets the midtones Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set midtonesDensity(value: number) {\r\n        this._midtonesDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get midtonesSaturation(): number {\r\n        return this._midtonesSaturation;\r\n    }\r\n    /**\r\n     * Sets the midtones Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set midtonesSaturation(value: number) {\r\n        this._midtonesSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get midtonesExposure(): number {\r\n        return this._midtonesExposure;\r\n    }\r\n    /**\r\n     * Sets the midtones Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set midtonesExposure(value: number) {\r\n        this._midtonesExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    private _shadowsHue = 30;\r\n    private _shadowsDensity = 0;\r\n    private _shadowsSaturation = 0;\r\n    private _shadowsExposure = 0;\r\n\r\n    /**\r\n     * Gets the shadows Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get shadowsHue(): number {\r\n        return this._shadowsHue;\r\n    }\r\n    /**\r\n     * Sets the shadows Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set shadowsHue(value: number) {\r\n        this._shadowsHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get shadowsDensity(): number {\r\n        return this._shadowsDensity;\r\n    }\r\n    /**\r\n     * Sets the shadows Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set shadowsDensity(value: number) {\r\n        this._shadowsDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get shadowsSaturation(): number {\r\n        return this._shadowsSaturation;\r\n    }\r\n    /**\r\n     * Sets the shadows Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set shadowsSaturation(value: number) {\r\n        this._shadowsSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get shadowsExposure(): number {\r\n        return this._shadowsExposure;\r\n    }\r\n    /**\r\n     * Sets the shadows Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set shadowsExposure(value: number) {\r\n        this._shadowsExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Returns the class name\r\n     * @returns The class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ColorCurves\";\r\n    }\r\n\r\n    /**\r\n     * Binds the color curves to the shader.\r\n     * @param colorCurves The color curve to bind\r\n     * @param effect The effect to bind to\r\n     * @param positiveUniform The positive uniform shader parameter\r\n     * @param neutralUniform The neutral uniform shader parameter\r\n     * @param negativeUniform The negative uniform shader parameter\r\n     */\r\n    public static Bind(\r\n        colorCurves: ColorCurves,\r\n        effect: Effect,\r\n        positiveUniform = \"vCameraColorCurvePositive\",\r\n        neutralUniform = \"vCameraColorCurveNeutral\",\r\n        negativeUniform = \"vCameraColorCurveNegative\"\r\n    ): void {\r\n        if (colorCurves._dirty) {\r\n            colorCurves._dirty = false;\r\n\r\n            // Fill in global info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._globalHue,\r\n                colorCurves._globalDensity,\r\n                colorCurves._globalSaturation,\r\n                colorCurves._globalExposure,\r\n                colorCurves._globalCurve\r\n            );\r\n\r\n            // Compute highlights info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._highlightsHue,\r\n                colorCurves._highlightsDensity,\r\n                colorCurves._highlightsSaturation,\r\n                colorCurves._highlightsExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._highlightsCurve);\r\n\r\n            // Compute midtones info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._midtonesHue,\r\n                colorCurves._midtonesDensity,\r\n                colorCurves._midtonesSaturation,\r\n                colorCurves._midtonesExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._midtonesCurve);\r\n\r\n            // Compute shadows info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._shadowsHue,\r\n                colorCurves._shadowsDensity,\r\n                colorCurves._shadowsSaturation,\r\n                colorCurves._shadowsExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._shadowsCurve);\r\n\r\n            // Compute deltas (neutral is midtones).\r\n            colorCurves._highlightsCurve.subtractToRef(colorCurves._midtonesCurve, colorCurves._positiveCurve);\r\n            colorCurves._midtonesCurve.subtractToRef(colorCurves._shadowsCurve, colorCurves._negativeCurve);\r\n        }\r\n\r\n        if (effect) {\r\n            effect.setFloat4(positiveUniform, colorCurves._positiveCurve.r, colorCurves._positiveCurve.g, colorCurves._positiveCurve.b, colorCurves._positiveCurve.a);\r\n            effect.setFloat4(neutralUniform, colorCurves._midtonesCurve.r, colorCurves._midtonesCurve.g, colorCurves._midtonesCurve.b, colorCurves._midtonesCurve.a);\r\n            effect.setFloat4(negativeUniform, colorCurves._negativeCurve.r, colorCurves._negativeCurve.g, colorCurves._negativeCurve.b, colorCurves._negativeCurve.a);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the ColorCurves effects.\r\n     * @param uniformsList The list of uniforms used in the effect\r\n     */\r\n    public static PrepareUniforms: (uniformsList: string[]) => void = PrepareUniformsForColorCurves;\r\n\r\n    /**\r\n     * Returns color grading data based on a hue, density, saturation and exposure value.\r\n     * @param hue\r\n     * @param density\r\n     * @param saturation The saturation.\r\n     * @param exposure The exposure.\r\n     * @param result The result data container.\r\n     */\r\n    private _getColorGradingDataToRef(hue: number, density: number, saturation: number, exposure: number, result: Color4): void {\r\n        if (hue == null) {\r\n            return;\r\n        }\r\n\r\n        hue = ColorCurves._Clamp(hue, 0, 360);\r\n        density = ColorCurves._Clamp(density, -100, 100);\r\n        saturation = ColorCurves._Clamp(saturation, -100, 100);\r\n        exposure = ColorCurves._Clamp(exposure, -100, 100);\r\n\r\n        // Remap the slider/config filter density with non-linear mapping and also scale by half\r\n        // so that the maximum filter density is only 50% control. This provides fine control\r\n        // for small values and reasonable range.\r\n        density = ColorCurves._ApplyColorGradingSliderNonlinear(density);\r\n        density *= 0.5;\r\n\r\n        exposure = ColorCurves._ApplyColorGradingSliderNonlinear(exposure);\r\n\r\n        if (density < 0) {\r\n            density *= -1;\r\n            hue = (hue + 180) % 360;\r\n        }\r\n\r\n        ColorCurves._FromHSBToRef(hue, density, 50 + 0.25 * exposure, result);\r\n        result.scaleToRef(2, result);\r\n        result.a = 1 + 0.01 * saturation;\r\n    }\r\n\r\n    /**\r\n     * Takes an input slider value and returns an adjusted value that provides extra control near the centre.\r\n     * @param value The input slider value in range [-100,100].\r\n     * @returns Adjusted value.\r\n     */\r\n    private static _ApplyColorGradingSliderNonlinear(value: number): number {\r\n        value /= 100;\r\n\r\n        let x: number = Math.abs(value);\r\n        x = Math.pow(x, 2);\r\n\r\n        if (value < 0) {\r\n            x *= -1;\r\n        }\r\n\r\n        x *= 100;\r\n\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Returns an RGBA Color4 based on Hue, Saturation and Brightness (also referred to as value, HSV).\r\n     * @param hue The hue (H) input.\r\n     * @param saturation The saturation (S) input.\r\n     * @param brightness The brightness (B) input.\r\n     * @param result\r\n     * @result An RGBA color represented as Vector4.\r\n     */\r\n    private static _FromHSBToRef(hue: number, saturation: number, brightness: number, result: Color4): void {\r\n        let h: number = ColorCurves._Clamp(hue, 0, 360);\r\n        const s: number = ColorCurves._Clamp(saturation / 100, 0, 1);\r\n        const v: number = ColorCurves._Clamp(brightness / 100, 0, 1);\r\n\r\n        if (s === 0) {\r\n            result.r = v;\r\n            result.g = v;\r\n            result.b = v;\r\n        } else {\r\n            // sector 0 to 5\r\n            h /= 60;\r\n            const i = Math.floor(h);\r\n\r\n            // fractional part of h\r\n            const f = h - i;\r\n            const p = v * (1 - s);\r\n            const q = v * (1 - s * f);\r\n            const t = v * (1 - s * (1 - f));\r\n\r\n            switch (i) {\r\n                case 0:\r\n                    result.r = v;\r\n                    result.g = t;\r\n                    result.b = p;\r\n                    break;\r\n                case 1:\r\n                    result.r = q;\r\n                    result.g = v;\r\n                    result.b = p;\r\n                    break;\r\n                case 2:\r\n                    result.r = p;\r\n                    result.g = v;\r\n                    result.b = t;\r\n                    break;\r\n                case 3:\r\n                    result.r = p;\r\n                    result.g = q;\r\n                    result.b = v;\r\n                    break;\r\n                case 4:\r\n                    result.r = t;\r\n                    result.g = p;\r\n                    result.b = v;\r\n                    break;\r\n                default:\r\n                    // case 5:\r\n                    result.r = v;\r\n                    result.g = p;\r\n                    result.b = q;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        result.a = 1;\r\n    }\r\n\r\n    /**\r\n     * Returns a value clamped between min and max\r\n     * @param value The value to clamp\r\n     * @param min The minimum of value\r\n     * @param max The maximum of value\r\n     * @returns The clamped value.\r\n     */\r\n    private static _Clamp(value: number, min: number, max: number): number {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n\r\n    /**\r\n     * Clones the current color curve instance.\r\n     * @returns The cloned curves\r\n     */\r\n    public clone(): ColorCurves {\r\n        return SerializationHelper.Clone(() => new ColorCurves(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current color curve instance to a json representation.\r\n     * @returns a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the color curve from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @returns The parsed curves\r\n     */\r\n    public static Parse(source: any): ColorCurves {\r\n        return SerializationHelper.Parse(() => new ColorCurves(), source, null, null);\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ColorCurvesParser = ColorCurves.Parse;\r\n", "import { PrepareUniformsForColorCurves } from \"./colorCurves.functions\";\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration.defines\";\r\n\r\n/**\r\n * Prepare the list of uniforms associated with the Image Processing effects.\r\n * @param uniforms The list of uniforms used in the effect\r\n * @param defines the list of defines currently in use\r\n */\r\nexport function PrepareUniformsForImageProcessing(uniforms: string[], defines: IImageProcessingConfigurationDefines): void {\r\n    if (defines.EXPOSURE) {\r\n        uniforms.push(\"exposureLinear\");\r\n    }\r\n    if (defines.CONTRAST) {\r\n        uniforms.push(\"contrast\");\r\n    }\r\n    if (defines.COLORGRADING) {\r\n        uniforms.push(\"colorTransformSettings\");\r\n    }\r\n    if (defines.VIGNETTE || defines.DITHER) {\r\n        uniforms.push(\"vInverseScreenSize\");\r\n    }\r\n    if (defines.VIGNETTE) {\r\n        uniforms.push(\"vignetteSettings1\");\r\n        uniforms.push(\"vignetteSettings2\");\r\n    }\r\n    if (defines.COLORCURVES) {\r\n        PrepareUniformsForColorCurves(uniforms);\r\n    }\r\n    if (defines.DITHER) {\r\n        uniforms.push(\"ditherIntensity\");\r\n    }\r\n}\r\n\r\n/**\r\n * Prepare the list of samplers associated with the Image Processing effects.\r\n * @param samplersList The list of uniforms used in the effect\r\n * @param defines the list of defines currently in use\r\n */\r\nexport function PrepareSamplersForImageProcessing(samplersList: string[], defines: IImageProcessingConfigurationDefines): void {\r\n    if (defines.COLORGRADING) {\r\n        samplersList.push(\"txColorTransform\");\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { ColorCurves } from \"../Materials/colorCurves\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Mix } from \"../Misc/tools.functions\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration.defines\";\r\nimport { PrepareSamplersForImageProcessing, PrepareUniformsForImageProcessing } from \"./imageProcessingConfiguration.functions\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * This groups together the common properties used for image processing either in direct forward pass\r\n * or through post processing effect depending on the use of the image processing pipeline in your scene\r\n * or not.\r\n */\r\nexport class ImageProcessingConfiguration {\r\n    /**\r\n     * Default tone mapping applied in BabylonJS.\r\n     */\r\n    public static readonly TONEMAPPING_STANDARD = 0;\r\n\r\n    /**\r\n     * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\r\n     * to other engines rendering to increase portability.\r\n     */\r\n    public static readonly TONEMAPPING_ACES = 1;\r\n\r\n    /**\r\n     * Neutral Tone mapping developped by the Khronos group in order to constrain\r\n     * values between 0 and 1 without shifting Hue.\r\n     */\r\n    public static readonly TONEMAPPING_KHR_PBR_NEUTRAL = 2;\r\n\r\n    /**\r\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\r\n     */\r\n    @serializeAsColorCurves()\r\n    public colorCurves: Nullable<ColorCurves> = new ColorCurves();\r\n\r\n    @serialize()\r\n    private _colorCurvesEnabled = false;\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this._colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        if (this._colorCurvesEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorCurvesEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serializeAsTexture(\"colorGradingTexture\")\r\n    private _colorGradingTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._colorGradingTexture;\r\n    }\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        if (this._colorGradingTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingTexture = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingEnabled = false;\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this._colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        if (this._colorGradingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingWithGreenDepth = true;\r\n    /**\r\n     * Gets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public get colorGradingWithGreenDepth(): boolean {\r\n        return this._colorGradingWithGreenDepth;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public set colorGradingWithGreenDepth(value: boolean) {\r\n        if (this._colorGradingWithGreenDepth === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingWithGreenDepth = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingBGR = true;\r\n    /**\r\n     * Gets whether the color grading texture contains BGR values.\r\n     */\r\n    public get colorGradingBGR(): boolean {\r\n        return this._colorGradingBGR;\r\n    }\r\n    /**\r\n     * Sets whether the color grading texture contains BGR values.\r\n     */\r\n    public set colorGradingBGR(value: boolean) {\r\n        if (this._colorGradingBGR === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingBGR = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _exposure = 1.0;\r\n    /**\r\n     * Gets the Exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this._exposure;\r\n    }\r\n    /**\r\n     * Sets the Exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        if (this._exposure === value) {\r\n            return;\r\n        }\r\n\r\n        this._exposure = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingEnabled = false;\r\n    /**\r\n     * Gets whether the tone mapping effect is enabled.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the tone mapping effect is enabled.\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        if (this._toneMappingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect used in BabylonJS.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        if (this._toneMappingType === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingType = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    protected _contrast = 1.0;\r\n    /**\r\n     * Gets the contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this._contrast;\r\n    }\r\n    /**\r\n     * Sets the contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        if (this._contrast === value) {\r\n            return;\r\n        }\r\n\r\n        this._contrast = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Vignette stretch size.\r\n     */\r\n    @serialize()\r\n    public vignetteStretch = 0;\r\n\r\n    /**\r\n     * Vignette center X Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCenterX = 0;\r\n\r\n    /**\r\n     * Vignette center Y Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCenterY = 0;\r\n\r\n    /**\r\n     * Back Compat: Vignette center Y Offset.\r\n     * @deprecated use vignetteCenterY instead\r\n     */\r\n    public get vignetteCentreY(): number {\r\n        return this.vignetteCenterY;\r\n    }\r\n    public set vignetteCentreY(value: number) {\r\n        this.vignetteCenterY = value;\r\n    }\r\n\r\n    /**\r\n     * Back Compat: Vignette center X Offset.\r\n     * @deprecated use vignetteCenterX instead\r\n     */\r\n    public get vignetteCentreX(): number {\r\n        return this.vignetteCenterX;\r\n    }\r\n    public set vignetteCentreX(value: number) {\r\n        this.vignetteCenterX = value;\r\n    }\r\n\r\n    /**\r\n     * Vignette weight or intensity of the vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteWeight = 1.5;\r\n\r\n    /**\r\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    @serializeAsColor4()\r\n    public vignetteColor: Color4 = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Camera field of view used by the Vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteCameraFov = 0.5;\r\n\r\n    @serialize()\r\n    private _vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this._vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        if (this._vignetteBlendMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteBlendMode = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _vignetteEnabled = false;\r\n    /**\r\n     * Gets whether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this._vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        if (this._vignetteEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringEnabled = false;\r\n    /**\r\n     * Gets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public get ditheringEnabled(): boolean {\r\n        return this._ditheringEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public set ditheringEnabled(value: boolean) {\r\n        if (this._ditheringEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringIntensity = 1.0 / 255.0;\r\n    /**\r\n     * Gets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public get ditheringIntensity(): number {\r\n        return this._ditheringIntensity;\r\n    }\r\n    /**\r\n     * Sets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public set ditheringIntensity(value: number) {\r\n        if (this._ditheringIntensity === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringIntensity = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _skipFinalColorClamp = false;\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public get skipFinalColorClamp(): boolean {\r\n        return this._skipFinalColorClamp;\r\n    }\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public set skipFinalColorClamp(value: boolean) {\r\n        if (this._skipFinalColorClamp === value) {\r\n            return;\r\n        }\r\n\r\n        this._skipFinalColorClamp = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _applyByPostProcess = false;\r\n    /**\r\n     * Gets whether the image processing is applied through a post process or not.\r\n     */\r\n    public get applyByPostProcess(): boolean {\r\n        return this._applyByPostProcess;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is applied through a post process or not.\r\n     */\r\n    public set applyByPostProcess(value: boolean) {\r\n        if (this._applyByPostProcess === value) {\r\n            return;\r\n        }\r\n\r\n        this._applyByPostProcess = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _isEnabled = true;\r\n    /**\r\n     * Gets whether the image processing is enabled or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is enabled or not.\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Width of the output texture used in the post process. If not provided, uses the width of the screen.\r\n     */\r\n    @serialize()\r\n    public outputTextureWidth = 0;\r\n\r\n    /**\r\n     * Height of the output texture used in the post process. If not provided, uses the height of the screen.\r\n     */\r\n    @serialize()\r\n    public outputTextureHeight = 0;\r\n\r\n    /**\r\n     * An event triggered when the configuration changes and requires Shader to Update some parameters.\r\n     */\r\n    public onUpdateParameters = new Observable<ImageProcessingConfiguration>();\r\n\r\n    /**\r\n     * Method called each time the image processing information changes requires to recompile the effect.\r\n     */\r\n    protected _updateParameters(): void {\r\n        this.onUpdateParameters.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name.\r\n     * @returns \"ImageProcessingConfiguration\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingConfiguration\";\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the Image Processing effects.\r\n     * @param uniforms The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareUniforms: (uniforms: string[], defines: IImageProcessingConfigurationDefines) => void = PrepareUniformsForImageProcessing;\r\n\r\n    /**\r\n     * Prepare the list of samplers associated with the Image Processing effects.\r\n     * @param samplersList The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareSamplers: (samplersList: string[], defines: IImageProcessingConfigurationDefines) => void = PrepareSamplersForImageProcessing;\r\n\r\n    /**\r\n     * Prepare the list of defines associated to the shader.\r\n     * @param defines the list of defines to complete\r\n     * @param forPostProcess Define if we are currently in post process mode or not\r\n     */\r\n    public prepareDefines(defines: IImageProcessingConfigurationDefines, forPostProcess = false): void {\r\n        if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\r\n            defines.VIGNETTE = false;\r\n            defines.TONEMAPPING = 0;\r\n            defines.CONTRAST = false;\r\n            defines.EXPOSURE = false;\r\n            defines.COLORCURVES = false;\r\n            defines.COLORGRADING = false;\r\n            defines.COLORGRADING3D = false;\r\n            defines.DITHER = false;\r\n            defines.IMAGEPROCESSING = false;\r\n            defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\r\n            return;\r\n        }\r\n\r\n        defines.VIGNETTE = this.vignetteEnabled;\r\n        defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\r\n        defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\r\n\r\n        if (!this._toneMappingEnabled) {\r\n            defines.TONEMAPPING = 0;\r\n        } else {\r\n            switch (this._toneMappingType) {\r\n                case ImageProcessingConfiguration.TONEMAPPING_KHR_PBR_NEUTRAL:\r\n                    defines.TONEMAPPING = 3;\r\n                    break;\r\n                case ImageProcessingConfiguration.TONEMAPPING_ACES:\r\n                    defines.TONEMAPPING = 2;\r\n                    break;\r\n                default:\r\n                    defines.TONEMAPPING = 1;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        defines.CONTRAST = this.contrast !== 1.0;\r\n        defines.EXPOSURE = this.exposure !== 1.0;\r\n        defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\r\n        defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\r\n        if (defines.COLORGRADING) {\r\n            defines.COLORGRADING3D = this.colorGradingTexture!.is3D;\r\n        } else {\r\n            defines.COLORGRADING3D = false;\r\n        }\r\n        defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\r\n        defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\r\n        defines.DITHER = this._ditheringEnabled;\r\n        defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\r\n        defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n        defines.IMAGEPROCESSING =\r\n            defines.VIGNETTE || !!defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING || defines.DITHER;\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the image processing information are ready.\r\n     * @returns True if ready, otherwise, false\r\n     */\r\n    public isReady() {\r\n        // Color Grading texture can not be none blocking.\r\n        return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\r\n    }\r\n\r\n    /**\r\n     * Binds the image processing to the shader.\r\n     * @param effect The effect to bind to\r\n     * @param overrideAspectRatio Override the aspect ratio of the effect\r\n     */\r\n    public bind(effect: Effect, overrideAspectRatio?: number): void {\r\n        // Color Curves\r\n        if (this._colorCurvesEnabled && this.colorCurves) {\r\n            ColorCurves.Bind(this.colorCurves, effect);\r\n        }\r\n\r\n        // Vignette and dither handled together due to common uniform.\r\n        if (this._vignetteEnabled || this._ditheringEnabled) {\r\n            const inverseWidth = 1 / (this.outputTextureWidth || effect.getEngine().getRenderWidth());\r\n            const inverseHeight = 1 / (this.outputTextureHeight || effect.getEngine().getRenderHeight());\r\n            effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\r\n\r\n            if (this._ditheringEnabled) {\r\n                effect.setFloat(\"ditherIntensity\", 0.5 * this._ditheringIntensity);\r\n            }\r\n\r\n            if (this._vignetteEnabled) {\r\n                const aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\r\n\r\n                let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\r\n                let vignetteScaleX = vignetteScaleY * aspectRatio;\r\n\r\n                const vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\r\n                vignetteScaleX = Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\r\n                vignetteScaleY = Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\r\n\r\n                effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCenterX, -vignetteScaleY * this.vignetteCenterY);\r\n\r\n                const vignettePower = -2.0 * this.vignetteWeight;\r\n                effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\r\n            }\r\n        }\r\n\r\n        // Exposure\r\n        effect.setFloat(\"exposureLinear\", this.exposure);\r\n\r\n        // Contrast\r\n        effect.setFloat(\"contrast\", this.contrast);\r\n\r\n        // Color transform settings\r\n        if (this.colorGradingTexture) {\r\n            effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\r\n            const textureSize = this.colorGradingTexture.getSize().height;\r\n\r\n            effect.setFloat4(\r\n                \"colorTransformSettings\",\r\n                (textureSize - 1) / textureSize, // textureScale\r\n                0.5 / textureSize, // textureOffset\r\n                textureSize, // textureSize\r\n                this.colorGradingTexture.level // weight\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current image processing instance.\r\n     * @returns The cloned image processing\r\n     */\r\n    public clone(): ImageProcessingConfiguration {\r\n        return SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current image processing instance to a json representation.\r\n     * @returns a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the image processing from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @returns The parsed image processing\r\n     */\r\n    public static Parse(source: any): ImageProcessingConfiguration {\r\n        const parsed = SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null);\r\n        // Backward compatibility\r\n        if (source.vignetteCentreX !== undefined) {\r\n            parsed.vignetteCenterX = source.vignetteCentreX;\r\n        }\r\n        if (source.vignetteCentreY !== undefined) {\r\n            parsed.vignetteCenterY = source.vignetteCentreY;\r\n        }\r\n\r\n        return parsed;\r\n    }\r\n\r\n    // Static constants associated to the image processing.\r\n    private static _VIGNETTEMODE_MULTIPLY = 0;\r\n    private static _VIGNETTEMODE_OPAQUE = 1;\r\n\r\n    /**\r\n     * Used to apply the vignette as a mix with the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_MULTIPLY(): number {\r\n        return this._VIGNETTEMODE_MULTIPLY;\r\n    }\r\n\r\n    /**\r\n     * Used to apply the vignette as a replacement of the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_OPAQUE(): number {\r\n        return this._VIGNETTEMODE_OPAQUE;\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.ImageProcessingConfiguration\", ImageProcessingConfiguration);\r\n"],
  "mappings": "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",
  "names": []
}
