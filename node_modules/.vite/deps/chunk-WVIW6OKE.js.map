{
  "version": 3,
  "sources": ["../../../dev/core/src/AudioV2/abstractAudio/abstractAudioNode.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/abstractAudioAnalyzer.ts", "../../../dev/core/src/AudioV2/abstractAudio/subNodes/abstractAudioSubGraph.ts", "../../../dev/core/src/AudioV2/abstractAudio/subNodes/abstractAudioSubNode.ts", "../../../dev/core/src/AudioV2/abstractAudio/subNodes/audioAnalyzerSubNode.ts", "../../../dev/core/src/AudioV2/abstractAudio/subNodes/volumeAudioSubNode.ts", "../../../dev/core/src/AudioV2/webAudio/subNodes/volumeWebAudioSubNode.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/audioAnalyzer.ts", "../../../dev/core/src/AudioV2/webAudio/subNodes/webAudioAnalyzerSubNode.ts", "../../../dev/core/src/AudioV2/webAudio/subNodes/webAudioBaseSubGraph.ts"],
  "sourcesContent": ["import { Observable } from \"../../Misc/observable\";\nimport type { AudioEngineV2 } from \"./audioEngineV2\";\n\nexport const enum AudioNodeType {\n    HAS_INPUTS = 1,\n    HAS_OUTPUTS = 2,\n    HAS_INPUTS_AND_OUTPUTS = 3,\n}\n\n/**\n * Abstract class for an audio node.\n *\n * An audio node is a processing unit that can receive audio data from an upstream node and/or send audio data to a\n * downstream node.\n *\n * Nodes can be connected to other nodes to create an audio graph. The audio graph represents the flow of audio data.\n *\n * There are 3 types of audio nodes:\n * 1. Input: Receives audio data from upstream nodes.\n * 2. Output: Sends audio data to downstream nodes.\n * 3. Input/Output: Receives audio data from upstream nodes and sends audio data to downstream nodes.\n */\nexport abstract class AbstractAudioNode {\n    /**\n     * The connected downstream audio nodes.\n     * - Undefined for input nodes.\n     */\n    protected readonly _downstreamNodes?: Set<AbstractAudioNode>;\n\n    /**\n     * The connected upstream audio nodes.\n     * - Undefined for output nodes.\n     */\n    protected readonly _upstreamNodes?: Set<AbstractAudioNode>;\n\n    /**\n     * The audio engine this node belongs to.\n     */\n    public readonly engine: AudioEngineV2;\n\n    /**\n     * Observable for when the audio node is disposed.\n     */\n    public readonly onDisposeObservable = new Observable<AbstractAudioNode>();\n\n    protected constructor(engine: AudioEngineV2, nodeType: AudioNodeType) {\n        this.engine = engine;\n\n        if (nodeType & AudioNodeType.HAS_INPUTS) {\n            this._upstreamNodes = new Set<AbstractAudioNode>();\n        }\n\n        if (nodeType & AudioNodeType.HAS_OUTPUTS) {\n            this._downstreamNodes = new Set<AbstractAudioNode>();\n        }\n    }\n\n    /**\n     * Releases associated resources.\n     * - Triggers `onDisposeObservable`.\n     * @see {@link onDisposeObservable}\n     */\n    public dispose(): void {\n        if (this._downstreamNodes) {\n            for (const node of Array.from(this._downstreamNodes)) {\n                if (!this._disconnect(node)) {\n                    throw new Error(\"Disconnect failed\");\n                }\n            }\n            this._downstreamNodes.clear();\n        }\n\n        if (this._upstreamNodes) {\n            for (const node of Array.from(this._upstreamNodes)) {\n                if (!node._disconnect(this)) {\n                    throw new Error(\"Disconnect failed\");\n                }\n            }\n            this._upstreamNodes.clear();\n        }\n\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n    }\n\n    /**\n     * Gets a string identifying the name of the class\n     * @returns the class's name as a string\n     */\n    public abstract getClassName(): string;\n\n    /**\n     * Connect to a downstream audio input node.\n     * @param node - The downstream audio input node to connect\n     * @returns `true` if the node is successfully connected; otherwise `false`\n     */\n    protected _connect(node: AbstractAudioNode): boolean {\n        if (!this._downstreamNodes) {\n            return false;\n        }\n\n        if (this._downstreamNodes.has(node)) {\n            return false;\n        }\n\n        if (!node._onConnect(this)) {\n            return false;\n        }\n\n        this._downstreamNodes.add(node);\n\n        return true;\n    }\n\n    /**\n     * Disconnects a downstream audio input node.\n     * @param node - The downstream audio input node to disconnect\n     * @returns `true` if the node is successfully disconnected; otherwise `false`\n     */\n    protected _disconnect(node: AbstractAudioNode): boolean {\n        if (!this._downstreamNodes) {\n            return false;\n        }\n\n        if (!this._downstreamNodes.delete(node)) {\n            return false;\n        }\n\n        return node._onDisconnect(this);\n    }\n\n    /**\n     * Called when an upstream audio output node is connecting.\n     * @param node - The connecting upstream audio node\n     * @returns `true` if the node is successfully connected; otherwise `false`\n     */\n    private _onConnect(node: AbstractAudioNode): boolean {\n        if (!this._upstreamNodes) {\n            return false;\n        }\n\n        if (this._upstreamNodes.has(node)) {\n            return false;\n        }\n\n        this._upstreamNodes.add(node);\n\n        return true;\n    }\n\n    /**\n     * Called when an upstream audio output node disconnects.\n     * @param node - The disconnecting upstream audio node\n     * @returns `true` if node is sucessfully disconnected; otherwise `false`\n     */\n    private _onDisconnect(node: AbstractAudioNode): boolean {\n        return this._upstreamNodes?.delete(node) ?? false;\n    }\n}\n\n/**\n * Abstract class for a named audio node.\n */\nexport abstract class AbstractNamedAudioNode extends AbstractAudioNode {\n    private _name: string;\n\n    /**\n     * Observable for when the audio node is renamed.\n     */\n    public readonly onNameChangedObservable = new Observable<{ newName: string; oldName: string; node: AbstractNamedAudioNode }>();\n\n    protected constructor(name: string, engine: AudioEngineV2, nodeType: AudioNodeType) {\n        super(engine, nodeType);\n\n        this._name = name;\n    }\n\n    /**\n     * The name of the audio node.\n     * - Triggers `onNameChangedObservable` when changed.\n     * @see {@link onNameChangedObservable}\n     */\n    public get name(): string {\n        return this._name;\n    }\n\n    public set name(newName: string) {\n        if (this._name === newName) {\n            return;\n        }\n\n        const oldName = this._name;\n\n        this._name = newName;\n\n        this.onNameChangedObservable.notifyObservers({ newName, oldName, node: this });\n    }\n\n    public override dispose(): void {\n        super.dispose();\n\n        this.onNameChangedObservable.clear();\n    }\n}\n", "export type AudioAnalyzerFFTSizeType = 32 | 64 | 128 | 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768;\n\nexport const _AudioAnalyzerDefaults = {\n    fftSize: 2048 as AudioAnalyzerFFTSizeType,\n    minDecibels: -100 as number,\n    maxDecibels: -30 as number,\n    smoothing: 0.8 as number,\n} as const;\n\n/**\n * Options for the AudioAnalyzer\n */\nexport interface IAudioAnalyzerOptions {\n    /**\n     * Enable the audio analyzer. Defaults to false.\n     */\n    analyzerEnabled: boolean;\n    /**\n     * The size of the FFT (fast fourier transform) to use when converting time-domain data to frequency-domain data. Default is 2048.\n     */\n    analyzerFFTSize: AudioAnalyzerFFTSizeType;\n\n    /**\n     * The minimum decibel value for the range of the analyzer. Default is -100.\n     */\n    analyzerMinDecibels: number;\n\n    /**\n     * The maximum decibel value for the range of the analyzer. Default is -30.\n     */\n    analyzerMaxDecibels: number;\n\n    /**\n     * A number between 0 and 1 that determines how quickly the analyzer's value changes. Default is 0.8.\n     */\n    analyzerSmoothing: number;\n}\n\n/**\n * @param options The audio analyzer options to check.\n * @returns `true` if audio analyzer options are defined, otherwise `false`.\n */\nexport function _HasAudioAnalyzerOptions(options: Partial<IAudioAnalyzerOptions>): boolean {\n    return (\n        options.analyzerEnabled ||\n        options.analyzerFFTSize !== undefined ||\n        options.analyzerMinDecibels !== undefined ||\n        options.analyzerMaxDecibels !== undefined ||\n        options.analyzerSmoothing !== undefined\n    );\n}\n\n/**\n * An AudioAnalyzer converts time-domain audio data into the frequency-domain.\n */\nexport abstract class AbstractAudioAnalyzer {\n    /**\n     * The size of the FFT (fast fourier transform) to use when converting time-domain data to frequency-domain data. Default is 2048.\n     */\n    public abstract fftSize: AudioAnalyzerFFTSizeType;\n\n    /**\n     * The number of data values that will be returned when calling getByteFrequencyData() or getFloatFrequencyData(). This is always half the `fftSize`.\n     */\n    public get frequencyBinCount(): number {\n        return this.fftSize / 2;\n    }\n\n    /**\n     * Whether the analyzer is enabled or not.\n     * - The `getByteFrequencyData` and `getFloatFrequencyData` functions return `null` if the analyzer is not enabled.\n     * @see {@link enableAsync}\n     */\n    public abstract isEnabled: boolean;\n\n    /**\n     * The minimum decibel value for the range of the analyzer. Default is -100.\n     */\n    public abstract minDecibels: number;\n\n    /**\n     * The maximum decibel value for the range of the analyzer. Default is -30.\n     */\n    public abstract maxDecibels: number;\n\n    /**\n     * A number between 0 and 1 that determines how quickly the analyzer's value changes. Default is 0.8.\n     */\n    public abstract smoothing: number;\n\n    /**\n     * Releases associated resources.\n     */\n    public abstract dispose(): void;\n\n    /**\n     * Enables the analyzer\n     */\n    public abstract enableAsync(): Promise<void>;\n\n    /**\n     * Gets the current frequency data as a byte array\n     * @returns a Uint8Array if the analyzer is enabled, otherwise `null`\n     */\n    public abstract getByteFrequencyData(): Uint8Array;\n\n    /**\n     * Gets the current frequency data as a float array\n     * @returns a Float32Array if the analyzer is enabled, otherwise `null`\n     */\n    public abstract getFloatFrequencyData(): Float32Array;\n}\n", "import type { Nullable } from \"../../../types\";\nimport type { AbstractAudioNode, AbstractNamedAudioNode } from \"../abstractAudioNode\";\nimport type { _AbstractAudioSubNode } from \"./abstractAudioSubNode\";\nimport type { AudioSubNode } from \"./audioSubNode\";\n\n/**\n * Adds common sub graph functionality to an audio node.\n *\n * Audio nodes such as static sounds, streaming sounds, and buses can use audio sub graphs to process audio internally\n * before sending it to connected downstream audio nodes. This is useful for applying effects, spatial audio, and other\n * audio processing tasks common to multiple audio node classes.\n *\n * A key feature of audio sub graphs is their audio sub nodes are created asynchronously on demand so the minimum set\n * of sub nodes are used at all times to save memory and CPU resources. The tradeoff is a small delay when first\n * setting a property backed by a sub node. This delay is avoided by using the appropriate options to initialize the\n * sub node on creation, e.g. `spatialEnabled` and `stereoEnabled`, or by setting any creation option backed by the\n * sub node, e.g. `spatialPosition` and `stereoPan`.\n *\n * @internal\n */\nexport abstract class _AbstractAudioSubGraph {\n    private _createSubNodePromises: { [key: string]: Promise<_AbstractAudioSubNode> } = {};\n    private _isDisposed = false;\n    private _subNodes: { [key: string]: _AbstractAudioSubNode } = {};\n\n    /**\n     * Executes the given callback with the named sub node, creating the sub node if needed.\n     *\n     * @param name The name of the sub node\n     * @param callback The function to call with the named sub node\n     *\n     * @internal\n     */\n    public callOnSubNode<T extends _AbstractAudioSubNode>(name: AudioSubNode, callback: (node: T) => void): void {\n        const node = this.getSubNode(name);\n        if (node) {\n            callback(node as T);\n            return;\n        }\n\n        this._createSubNodePromisesResolved().then(() => {\n            const node = this.getSubNode(name);\n            if (node) {\n                callback(node as T);\n                return;\n            }\n\n            this.createAndAddSubNode(name).then((node) => {\n                callback(node as T);\n            });\n        });\n    }\n\n    /**\n     * Creates the named subnode and adds it to the sub graph.\n     *\n     * @param name The name of the sub node.\n     * @returns A promise that resolves to the created sub node.\n     *\n     * @internal\n     */\n    public createAndAddSubNode(name: AudioSubNode): Promise<_AbstractAudioSubNode> {\n        this._createSubNodePromises[name] ||= this._createSubNode(name).then((node) => {\n            this._addSubNode(node);\n            return node;\n        });\n\n        return this._createSubNodePromises[name];\n    }\n\n    /**\n     * Releases associated resources.\n     *\n     * @internal\n     */\n    public dispose() {\n        this._isDisposed = true;\n\n        const subNodes = Object.values(this._subNodes);\n        for (const subNode of subNodes) {\n            subNode.dispose();\n        }\n\n        this._subNodes = {};\n        this._createSubNodePromises = {};\n    }\n\n    /**\n     * Gets a previously created sub node.\n     *\n     * @param name - The name of the sub node\n     * @returns The named sub node, or `null` if it has not been created, yet\n     *\n     * @internal\n     * */\n    public getSubNode<T extends _AbstractAudioSubNode>(name: string): Nullable<T> {\n        return (this._subNodes[name] as T) ?? null;\n    }\n\n    /**\n     * Removes a sub node from the sub graph.\n     *\n     * @param subNode - The sub node to remove\n     * @returns A promise that resolves when the sub node is removed\n     *\n     * @internal\n     */\n    public async removeSubNode(subNode: _AbstractAudioSubNode): Promise<void> {\n        await this._createSubNodePromisesResolved();\n\n        const name = subNode.name;\n        if (this._subNodes[name]) {\n            delete this._subNodes[name];\n        }\n\n        delete this._createSubNodePromises[name];\n\n        this._onSubNodesChanged();\n    }\n\n    protected abstract _createSubNode(name: string): Promise<_AbstractAudioSubNode>;\n\n    /**\n     * Called when sub-nodes are added or removed.\n     * - Override this to connect and reconnect sub-nodes as needed.\n     */\n    protected abstract _onSubNodesChanged(): void;\n\n    protected _createSubNodePromisesResolved(): Promise<_AbstractAudioSubNode[]> {\n        return Promise.all(Object.values(this._createSubNodePromises));\n    }\n\n    private _addSubNode(node: _AbstractAudioSubNode): void {\n        if (this._isDisposed) {\n            node.dispose();\n            return;\n        }\n\n        this._subNodes[node.name] = node;\n\n        node.onDisposeObservable.addOnce(this._onSubNodeDisposed);\n\n        this._onSubNodesChanged();\n    }\n\n    private _onSubNodeDisposed = (node: AbstractAudioNode) => {\n        const subNode = node as AbstractNamedAudioNode;\n\n        delete this._subNodes[subNode.name];\n\n        this._onSubNodesChanged();\n    };\n}\n", "import { AudioNodeType, AbstractNamedAudioNode } from \"../abstractAudioNode\";\nimport type { AudioEngineV2 } from \"../audioEngineV2\";\n\n/** @internal */\nexport abstract class _AbstractAudioSubNode extends AbstractNamedAudioNode {\n    /** @internal */\n    protected constructor(name: string, engine: AudioEngineV2) {\n        super(name, engine, AudioNodeType.HAS_INPUTS_AND_OUTPUTS);\n    }\n\n    /** @internal */\n    public connect(node: _AbstractAudioSubNode): void {\n        if (!this._connect(node)) {\n            throw new Error(\"Connect failed\");\n        }\n    }\n\n    /** @internal */\n    public disconnect(node: _AbstractAudioSubNode): void {\n        if (!this._disconnect(node)) {\n            throw new Error(\"Disconnect failed\");\n        }\n    }\n\n    /** @internal */\n    public disconnectAll(): void {\n        if (!this._downstreamNodes) {\n            throw new Error(\"Disconnect failed\");\n        }\n\n        const it = this._downstreamNodes.values();\n\n        for (let next = it.next(); !next.done; next = it.next()) {\n            if (!this._disconnect(next.value)) {\n                throw new Error(\"Disconnect failed\");\n            }\n        }\n    }\n}\n", "import type { Nullable } from \"../../../types\";\nimport type { AudioEngineV2 } from \"../audioEngineV2\";\nimport type { AudioAnalyzerFFTSizeType, IAudioAnalyzerOptions } from \"../subProperties/abstractAudioAnalyzer\";\nimport { _AudioAnalyzerDefaults } from \"../subProperties/abstractAudioAnalyzer\";\nimport type { _AbstractAudioSubGraph } from \"./abstractAudioSubGraph\";\nimport { _AbstractAudioSubNode } from \"./abstractAudioSubNode\";\nimport { AudioSubNode } from \"./audioSubNode\";\n\n/** @internal */\nexport abstract class _AudioAnalyzerSubNode extends _AbstractAudioSubNode {\n    protected constructor(engine: AudioEngineV2) {\n        super(AudioSubNode.ANALYZER, engine);\n    }\n\n    public abstract fftSize: AudioAnalyzerFFTSizeType;\n    public abstract minDecibels: number;\n    public abstract maxDecibels: number;\n    public abstract smoothing: number;\n\n    public abstract getByteFrequencyData(): Uint8Array;\n    public abstract getFloatFrequencyData(): Float32Array;\n\n    /** @internal */\n    public setOptions(options: Partial<IAudioAnalyzerOptions>): void {\n        this.fftSize = options.analyzerFFTSize ?? _AudioAnalyzerDefaults.fftSize;\n        this.minDecibels = options.analyzerMinDecibels ?? _AudioAnalyzerDefaults.minDecibels;\n        this.maxDecibels = options.analyzerMaxDecibels ?? _AudioAnalyzerDefaults.maxDecibels;\n        this.smoothing = options.analyzerSmoothing ?? _AudioAnalyzerDefaults.smoothing;\n    }\n}\n\n/** @internal */\nexport function _GetAudioAnalyzerSubNode(subGraph: _AbstractAudioSubGraph): Nullable<_AudioAnalyzerSubNode> {\n    return subGraph.getSubNode<_AudioAnalyzerSubNode>(AudioSubNode.ANALYZER);\n}\n\n/** @internal */\nexport function _SetAudioAnalyzerProperty<K extends keyof typeof _AudioAnalyzerDefaults>(subGraph: _AbstractAudioSubGraph, property: K, value: _AudioAnalyzerSubNode[K]): void {\n    subGraph.callOnSubNode<_AudioAnalyzerSubNode>(AudioSubNode.ANALYZER, (node) => {\n        node[property] = value;\n    });\n}\n", "import type { Nullable } from \"../../../types\";\nimport type { AudioEngineV2 } from \"../audioEngineV2\";\nimport { _AbstractAudioSubNode } from \"../subNodes/abstractAudioSubNode\";\nimport { AudioSubNode } from \"../subNodes/audioSubNode\";\nimport type { _AbstractAudioSubGraph } from \"./abstractAudioSubGraph\";\n\n/** @internal */\nexport const _VolumeAudioDefaults = {\n    volume: 1 as number,\n} as const;\n\n/**\n * Volume options.\n */\nexport interface IVolumeAudioOptions {\n    /**\n     * The volume/gain. Defaults to 1.\n     */\n    volume: number;\n}\n\n/** @internal */\nexport abstract class _VolumeAudioSubNode extends _AbstractAudioSubNode {\n    protected constructor(engine: AudioEngineV2) {\n        super(AudioSubNode.VOLUME, engine);\n    }\n\n    public abstract volume: number;\n\n    /** @internal */\n    public setOptions(options: Partial<IVolumeAudioOptions>): void {\n        this.volume = options.volume ?? _VolumeAudioDefaults.volume;\n    }\n}\n\n/** @internal */\nexport function _GetVolumeAudioSubNode(subGraph: _AbstractAudioSubGraph): Nullable<_VolumeAudioSubNode> {\n    return subGraph.getSubNode<_VolumeAudioSubNode>(AudioSubNode.VOLUME);\n}\n\n/** @internal */\nexport function _GetVolumeAudioProperty<K extends keyof typeof _VolumeAudioDefaults>(subGraph: _AbstractAudioSubGraph, property: K): (typeof _VolumeAudioDefaults)[K] {\n    return _GetVolumeAudioSubNode(subGraph)?.[property] ?? _VolumeAudioDefaults[property];\n}\n", "import { _VolumeAudioSubNode } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport type { _WebAudioEngine } from \"../webAudioEngine\";\nimport type { IWebAudioInNode, IWebAudioSubNode } from \"../webAudioNode\";\n\n/** @internal */\nexport async function _CreateVolumeAudioSubNodeAsync(engine: _WebAudioEngine): Promise<_VolumeAudioSubNode> {\n    return new _VolumeWebAudioSubNode(engine);\n}\n\n/** @internal */\nexport class _VolumeWebAudioSubNode extends _VolumeAudioSubNode implements IWebAudioSubNode {\n    private _volume: number = 1;\n\n    /** @internal */\n    public override readonly engine: _WebAudioEngine;\n\n    /** @internal */\n    public readonly node: GainNode;\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine) {\n        super(engine);\n\n        this.node = new GainNode(engine._audioContext);\n    }\n\n    /** @internal */\n    public get volume(): number {\n        return this._volume;\n    }\n\n    /** @internal */\n    public set volume(value: number) {\n        this._volume = value;\n        this.engine._setAudioParam(this.node.gain, value);\n    }\n\n    /** @internal */\n    public get _inNode(): AudioNode {\n        return this.node;\n    }\n\n    /** @internal */\n    public get _outNode(): AudioNode {\n        return this.node;\n    }\n\n    protected override _connect(node: IWebAudioInNode): boolean {\n        const connected = super._connect(node);\n\n        if (!connected) {\n            return false;\n        }\n\n        // If the wrapped node is not available now, it will be connected later by the subgraph.\n        if (node._inNode) {\n            this.node.connect(node._inNode);\n        }\n\n        return true;\n    }\n\n    protected override _disconnect(node: IWebAudioInNode): boolean {\n        const disconnected = super._disconnect(node);\n\n        if (!disconnected) {\n            return false;\n        }\n\n        if (node._inNode) {\n            this.node.disconnect(node._inNode);\n        }\n\n        return true;\n    }\n\n    /** @internal */\n    public getClassName(): string {\n        return \"_VolumeWebAudioSubNode\";\n    }\n}\n", "import { Logger } from \"../../../Misc/logger\";\nimport type { Nullable } from \"../../../types\";\nimport type { AudioAnalyzerFFTSizeType } from \"../../abstractAudio/subProperties/abstractAudioAnalyzer\";\nimport { _AudioAnalyzerDefaults, AbstractAudioAnalyzer } from \"../../abstractAudio/subProperties/abstractAudioAnalyzer\";\nimport type { _AbstractAudioSubGraph } from \"../subNodes/abstractAudioSubGraph\";\nimport { _GetAudioAnalyzerSubNode, _SetAudioAnalyzerProperty } from \"../subNodes/audioAnalyzerSubNode\";\nimport { AudioSubNode } from \"../subNodes/audioSubNode\";\n\nlet _emptyByteFrequencyData: Nullable<Uint8Array> = null;\nlet _emptyFloatFrequencyData: Nullable<Float32Array> = null;\n\n/** @internal */\nexport function _GetEmptyByteFrequencyData(): Uint8Array {\n    if (!_emptyByteFrequencyData) {\n        _emptyByteFrequencyData = new Uint8Array();\n    }\n    return _emptyByteFrequencyData;\n}\n\n/** @internal */\nexport function _GetEmptyFloatFrequencyData(): Float32Array {\n    if (!_emptyFloatFrequencyData) {\n        _emptyFloatFrequencyData = new Float32Array();\n    }\n    return _emptyFloatFrequencyData;\n}\n\n/** @internal */\nexport class _AudioAnalyzer extends AbstractAudioAnalyzer {\n    private _fftSize: AudioAnalyzerFFTSizeType = _AudioAnalyzerDefaults.fftSize;\n    private _maxDecibels: number = _AudioAnalyzerDefaults.maxDecibels;\n    private _minDecibels: number = _AudioAnalyzerDefaults.minDecibels;\n    private _smoothing: number = _AudioAnalyzerDefaults.smoothing;\n    private _subGraph: _AbstractAudioSubGraph;\n\n    /** @internal */\n    public constructor(subGraph: _AbstractAudioSubGraph) {\n        super();\n        this._subGraph = subGraph;\n    }\n\n    /** @internal */\n    public get fftSize(): AudioAnalyzerFFTSizeType {\n        return this._fftSize;\n    }\n\n    public set fftSize(value: AudioAnalyzerFFTSizeType) {\n        this._fftSize = value;\n        _SetAudioAnalyzerProperty(this._subGraph, \"fftSize\", value);\n    }\n\n    /** @internal */\n    public get isEnabled(): boolean {\n        return _GetAudioAnalyzerSubNode(this._subGraph) !== null;\n    }\n\n    /** @internal */\n    public get minDecibels(): number {\n        return this._minDecibels;\n    }\n\n    public set minDecibels(value: number) {\n        this._minDecibels = value;\n        _SetAudioAnalyzerProperty(this._subGraph, \"minDecibels\", value);\n    }\n\n    /** @internal */\n    public get maxDecibels(): number {\n        return this._maxDecibels;\n    }\n\n    public set maxDecibels(value: number) {\n        this._maxDecibels = value;\n        _SetAudioAnalyzerProperty(this._subGraph, \"maxDecibels\", value);\n    }\n\n    /** @internal */\n    public get smoothing(): number {\n        return this._smoothing;\n    }\n\n    public set smoothing(value: number) {\n        this._smoothing = value;\n        _SetAudioAnalyzerProperty(this._subGraph, \"smoothing\", value);\n    }\n\n    /** @internal */\n    public dispose(): void {\n        const subNode = _GetAudioAnalyzerSubNode(this._subGraph);\n        if (subNode) {\n            this._subGraph.removeSubNode(subNode);\n            subNode.dispose();\n        }\n    }\n\n    /** @internal */\n    public async enableAsync(): Promise<void> {\n        const subNode = _GetAudioAnalyzerSubNode(this._subGraph);\n        if (!subNode) {\n            await this._subGraph.createAndAddSubNode(AudioSubNode.ANALYZER);\n        }\n        return Promise.resolve();\n    }\n\n    /** @internal */\n    public getByteFrequencyData(): Uint8Array {\n        const subNode = _GetAudioAnalyzerSubNode(this._subGraph);\n        if (!subNode) {\n            Logger.Warn(\"AudioAnalyzer not enabled\");\n            this.enableAsync();\n            return _GetEmptyByteFrequencyData();\n        }\n        return subNode.getByteFrequencyData();\n    }\n\n    /** @internal */\n    public getFloatFrequencyData(): Float32Array {\n        const subNode = _GetAudioAnalyzerSubNode(this._subGraph);\n        if (!subNode) {\n            Logger.Warn(\"AudioAnalyzer not enabled\");\n            this.enableAsync();\n            return _GetEmptyFloatFrequencyData();\n        }\n        return subNode.getFloatFrequencyData();\n    }\n}\n", "import type { Nullable } from \"../../../types\";\nimport { _AudioAnalyzerSubNode } from \"../../abstractAudio/subNodes/audioAnalyzerSubNode\";\nimport type { AudioAnalyzerFFTSizeType } from \"../../abstractAudio/subProperties/abstractAudioAnalyzer\";\nimport { _GetEmptyByteFrequencyData, _GetEmptyFloatFrequencyData } from \"../../abstractAudio/subProperties/audioAnalyzer\";\nimport type { _WebAudioEngine } from \"../webAudioEngine\";\nimport type { IWebAudioInNode } from \"../webAudioNode\";\n\n/** @internal */\nexport async function _CreateAudioAnalyzerSubNodeAsync(engine: _WebAudioEngine): Promise<_AudioAnalyzerSubNode> {\n    return new _WebAudioAnalyzerSubNode(engine);\n}\n\n/** @internal */\nexport class _WebAudioAnalyzerSubNode extends _AudioAnalyzerSubNode implements IWebAudioInNode {\n    private readonly _analyzerNode: AnalyserNode;\n    private _byteFrequencyData: Nullable<Uint8Array> = null;\n    private _floatFrequencyData: Nullable<Float32Array> = null;\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine) {\n        super(engine);\n\n        this._analyzerNode = new AnalyserNode(engine._audioContext);\n    }\n\n    /** @internal */\n    public get fftSize(): AudioAnalyzerFFTSizeType {\n        return this._analyzerNode.fftSize as AudioAnalyzerFFTSizeType;\n    }\n\n    public set fftSize(value: AudioAnalyzerFFTSizeType) {\n        if (value === this._analyzerNode.fftSize) {\n            return;\n        }\n\n        this._analyzerNode.fftSize = value;\n\n        this._clearArrays();\n    }\n\n    /** @internal */\n    public get _inNode(): AudioNode {\n        return this._analyzerNode;\n    }\n\n    /** @internal */\n    public get minDecibels(): number {\n        return this._analyzerNode.minDecibels;\n    }\n\n    public set minDecibels(value: number) {\n        this._analyzerNode.minDecibels = value;\n    }\n\n    /** @internal */\n    public get maxDecibels(): number {\n        return this._analyzerNode.maxDecibels;\n    }\n\n    public set maxDecibels(value: number) {\n        this._analyzerNode.maxDecibels = value;\n    }\n\n    /** @internal */\n    public get smoothing(): number {\n        return this._analyzerNode.smoothingTimeConstant;\n    }\n\n    public set smoothing(value: number) {\n        this._analyzerNode.smoothingTimeConstant = value;\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._clearArrays();\n        this._byteFrequencyData = null;\n        this._floatFrequencyData = null;\n\n        this._analyzerNode.disconnect();\n    }\n\n    /** @internal */\n    public getClassName(): string {\n        return \"_WebAudioAnalyzerSubNode\";\n    }\n\n    /** @internal */\n    public getByteFrequencyData(): Uint8Array {\n        if (!this._byteFrequencyData || this._byteFrequencyData.length === 0) {\n            this._byteFrequencyData = new Uint8Array(this._analyzerNode.frequencyBinCount);\n        }\n        this._analyzerNode.getByteFrequencyData(this._byteFrequencyData);\n        return this._byteFrequencyData;\n    }\n\n    /** @internal */\n    public getFloatFrequencyData(): Float32Array {\n        if (!this._floatFrequencyData || this._floatFrequencyData.length === 0) {\n            this._floatFrequencyData = new Float32Array(this._analyzerNode.frequencyBinCount);\n        }\n        this._analyzerNode.getFloatFrequencyData(this._floatFrequencyData);\n        return this._floatFrequencyData;\n    }\n\n    private _clearArrays(): void {\n        this._byteFrequencyData?.set(_GetEmptyByteFrequencyData());\n        this._floatFrequencyData?.set(_GetEmptyFloatFrequencyData());\n    }\n}\n", "import type { Nullable } from \"../../../types\";\nimport type { AbstractAudioNode } from \"../../abstractAudio/abstractAudioNode\";\nimport { _AbstractAudioSubGraph } from \"../../abstractAudio/subNodes/abstractAudioSubGraph\";\nimport type { _AbstractAudioSubNode } from \"../../abstractAudio/subNodes/abstractAudioSubNode\";\nimport { _GetAudioAnalyzerSubNode } from \"../../abstractAudio/subNodes/audioAnalyzerSubNode\";\nimport { AudioSubNode } from \"../../abstractAudio/subNodes/audioSubNode\";\nimport type { IVolumeAudioOptions } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport { _GetVolumeAudioSubNode } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport type { IAudioAnalyzerOptions } from \"../../abstractAudio/subProperties/abstractAudioAnalyzer\";\nimport { _HasAudioAnalyzerOptions } from \"../../abstractAudio/subProperties/abstractAudioAnalyzer\";\nimport type { IWebAudioInNode, IWebAudioSuperNode } from \"../webAudioNode\";\nimport type { _VolumeWebAudioSubNode } from \"./volumeWebAudioSubNode\";\nimport { _CreateVolumeAudioSubNodeAsync } from \"./volumeWebAudioSubNode\";\nimport { _CreateAudioAnalyzerSubNodeAsync } from \"./webAudioAnalyzerSubNode\";\n\n/**\n * Options for creating a WebAudioBaseSubGraph.\n */\nexport interface IWebAudioBaseSubGraphOptions extends IAudioAnalyzerOptions, IVolumeAudioOptions {}\n\n/** @internal */\nexport abstract class _WebAudioBaseSubGraph extends _AbstractAudioSubGraph {\n    protected _owner: IWebAudioSuperNode;\n    protected _outputNode: Nullable<AudioNode> = null;\n\n    /** @internal */\n    public constructor(owner: IWebAudioSuperNode) {\n        super();\n\n        this._owner = owner;\n    }\n\n    /** @internal */\n    public async init(options: Partial<IWebAudioBaseSubGraphOptions>): Promise<void> {\n        const hasAnalyzerOptions = _HasAudioAnalyzerOptions(options);\n\n        if (hasAnalyzerOptions) {\n            await this.createAndAddSubNode(AudioSubNode.ANALYZER);\n        }\n\n        await this.createAndAddSubNode(AudioSubNode.VOLUME);\n\n        await this._createSubNodePromisesResolved();\n\n        if (hasAnalyzerOptions) {\n            const analyzerNode = _GetAudioAnalyzerSubNode(this);\n            if (!analyzerNode) {\n                throw new Error(\"No analyzer subnode.\");\n            }\n\n            analyzerNode.setOptions(options);\n        }\n\n        const volumeNode = _GetVolumeAudioSubNode(this);\n        if (!volumeNode) {\n            throw new Error(\"No volume subnode.\");\n        }\n\n        volumeNode.setOptions(options);\n\n        if (volumeNode.getClassName() !== \"_VolumeWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n\n        this._outputNode = (volumeNode as _VolumeWebAudioSubNode).node;\n\n        // Connect the new wrapped WebAudio node to the wrapped downstream WebAudio nodes.\n        // The wrapper nodes are unaware of this change.\n        if (this._outputNode && this._downstreamNodes) {\n            const it = this._downstreamNodes.values();\n            for (let next = it.next(); !next.done; next = it.next()) {\n                const inNode = (next.value as IWebAudioInNode)._inNode;\n                if (inNode) {\n                    this._outputNode.connect(inNode);\n                }\n            }\n        }\n    }\n\n    protected abstract readonly _downstreamNodes: Nullable<Set<AbstractAudioNode>>;\n\n    /** @internal */\n    public get _inNode(): Nullable<AudioNode> {\n        return this._outputNode;\n    }\n\n    /** @internal */\n    public get _outNode(): Nullable<AudioNode> {\n        return this._outputNode;\n    }\n\n    protected _createSubNode(name: string): Promise<_AbstractAudioSubNode> {\n        switch (name) {\n            case AudioSubNode.ANALYZER:\n                return _CreateAudioAnalyzerSubNodeAsync(this._owner.engine);\n            case AudioSubNode.VOLUME:\n                return _CreateVolumeAudioSubNodeAsync(this._owner.engine);\n            default:\n                throw new Error(`Unknown subnode name: ${name}`);\n        }\n    }\n\n    protected _onSubNodesChanged(): void {\n        const analyzerNode = _GetAudioAnalyzerSubNode(this);\n        const volumeNode = _GetVolumeAudioSubNode(this);\n\n        if (analyzerNode && volumeNode) {\n            volumeNode.connect(analyzerNode);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["AudioNodeType", "node"]
}
