{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphBranchBlock.ts"],
  "sourcesContent": ["import { RichTypeBoolean } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\n\r\n/**\r\n * A block that evaluates a condition and activates one of two branches.\r\n */\r\nexport class FlowGraphBranchBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Input connection: The condition to evaluate.\r\n     */\r\n    public readonly condition: FlowGraphDataConnection<boolean>;\r\n    /**\r\n     * Output connection: The branch to execute if the condition is true.\r\n     */\r\n    public readonly onTrue: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connection: The branch to execute if the condition is false.\r\n     */\r\n    public readonly onFalse: FlowGraphSignalConnection;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.condition = this.registerDataInput(\"condition\", RichTypeBoolean);\r\n\r\n        this.onTrue = this._registerSignalOutput(\"onTrue\");\r\n        this.onFalse = this._registerSignalOutput(\"onFalse\");\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        if (this.condition.getValue(context)) {\r\n            this.onTrue._activateSignal(context);\r\n        } else {\r\n            this.onFalse._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.Branch;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Branch, FlowGraphBranchBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA,IAYa;AAZb;;;AAGA;AAEA;AAOM,IAAO,uBAAP,cAAoC,wBAAuB;MAc7D,YAAY,QAAqC;AAC7C,cAAM,MAAM;AAEZ,aAAK,YAAY,KAAK,kBAAkB,aAAa,eAAe;AAEpE,aAAK,SAAS,KAAK,sBAAsB,QAAQ;AACjD,aAAK,UAAU,KAAK,sBAAsB,SAAS;MACvD;MAEO,SAAS,SAAyB;AACrC,YAAI,KAAK,UAAU,SAAS,OAAO,GAAG;AAClC,eAAK,OAAO,gBAAgB,OAAO;QACvC,OAAO;AACH,eAAK,QAAQ,gBAAgB,OAAO;QACxC;MACJ;;;;MAKgB,eAAY;AACxB,eAAA;MACJ;;AAEJ,kBAAa,wBAA6B,oBAAoB;;;",
  "names": []
}
