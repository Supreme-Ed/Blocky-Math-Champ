{
  "version": 3,
  "sources": ["../../../dev/core/src/Engines/shaderStore.ts"],
  "sourcesContent": ["import { ShaderLanguage } from \"../Materials/shaderLanguage\";\r\n\r\n/**\r\n * Defines the shader related stores and directory\r\n */\r\nexport class ShaderStore {\r\n    /**\r\n     * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\r\n     */\r\n    public static ShadersRepository = \"src/Shaders/\";\r\n    /**\r\n     * Store of each shader (The can be looked up using effect.key)\r\n     */\r\n    public static ShadersStore: { [key: string]: string } = {};\r\n    /**\r\n     * Store of each included file for a shader (The can be looked up using effect.key)\r\n     */\r\n    public static IncludesShadersStore: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets or sets the relative url used to load shaders (WGSL) if using the engine in non-minified mode\r\n     */\r\n    public static ShadersRepositoryWGSL = \"src/ShadersWGSL/\";\r\n    /**\r\n     * Store of each shader  (WGSL)\r\n     */\r\n    public static ShadersStoreWGSL: { [key: string]: string } = {};\r\n    /**\r\n     * Store of each included file for a shader (WGSL)\r\n     */\r\n    public static IncludesShadersStoreWGSL: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets the shaders repository path for a given shader language\r\n     * @param shaderLanguage the shader language\r\n     * @returns the path to the shaders repository\r\n     */\r\n    public static GetShadersRepository(shaderLanguage = ShaderLanguage.GLSL): string {\r\n        return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersRepository : ShaderStore.ShadersRepositoryWGSL;\r\n    }\r\n\r\n    /**\r\n     * Gets the shaders store of a given shader language\r\n     * @param shaderLanguage the shader language\r\n     * @returns the shaders store\r\n     */\r\n    public static GetShadersStore(shaderLanguage = ShaderLanguage.GLSL): { [key: string]: string } {\r\n        return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersStore : ShaderStore.ShadersStoreWGSL;\r\n    }\r\n\r\n    /**\r\n     * Gets the include shaders store of a given shader language\r\n     * @param shaderLanguage the shader language\r\n     * @returns the include shaders store\r\n     */\r\n    public static GetIncludesShadersStore(shaderLanguage = ShaderLanguage.GLSL): { [key: string]: string } {\r\n        return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.IncludesShadersStore : ShaderStore.IncludesShadersStoreWGSL;\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;AAEA,IAGa;AAHb;;AAGM,IAAO,cAAP,MAAO,aAAW;;;;;;MAgCb,OAAO,qBAAqB,iBAAc,GAAsB;AACnE,eAAO,mBAAc,IAA2B,aAAY,oBAAoB,aAAY;MAChG;;;;;;MAOO,OAAO,gBAAgB,iBAAc,GAAsB;AAC9D,eAAO,mBAAc,IAA2B,aAAY,eAAe,aAAY;MAC3F;;;;;;MAOO,OAAO,wBAAwB,iBAAc,GAAsB;AACtE,eAAO,mBAAc,IAA2B,aAAY,uBAAuB,aAAY;MACnG;;AAhDc,gBAAA,oBAAoB;AAIpB,gBAAA,eAA0C,CAAA;AAI1C,gBAAA,uBAAkD,CAAA;AAKlD,gBAAA,wBAAwB;AAIxB,gBAAA,mBAA8C,CAAA;AAI9C,gBAAA,2BAAsD,CAAA;;;",
  "names": []
}
