{
  "version": 3,
  "sources": ["../../../dev/core/src/Maths/math.vertexFormat.ts", "../../../dev/core/src/Maths/math.ts", "../../../dev/core/src/Maths/sphericalPolynomial.ts", "../../../dev/core/src/PostProcesses/postProcess.ts", "../../../dev/core/src/Misc/performanceMonitor.ts", "../../../dev/core/src/Engines/Extensions/engine.readTexture.ts", "../../../dev/core/src/Engines/renderTargetWrapper.ts", "../../../dev/core/src/Engines/engine.common.ts", "../../../dev/core/src/Engines/Extensions/engine.alpha.ts", "../../../dev/core/src/Engines/Extensions/engine.rawTexture.ts", "../../../dev/core/src/Engines/Extensions/engine.dynamicBuffer.ts", "../../../dev/core/src/Engines/Extensions/engine.cubeTexture.ts", "../../../dev/core/src/Engines/WebGL/webGLRenderTargetWrapper.ts", "../../../dev/core/src/Engines/AbstractEngine/abstractEngine.texture.ts", "../../../dev/core/src/Engines/Extensions/engine.renderTarget.ts", "../../../dev/core/src/Engines/Extensions/engine.renderTargetTexture.ts", "../../../dev/core/src/Engines/Extensions/engine.renderTargetCube.ts", "../../../dev/core/src/Engines/Extensions/engine.prefilteredCubeTexture.ts", "../../../dev/core/src/Engines/Extensions/engine.uniformBuffer.ts", "../../../dev/core/src/Engines/AbstractEngine/abstractEngine.loadingScreen.ts", "../../../dev/core/src/Engines/AbstractEngine/abstractEngine.dom.ts", "../../../dev/core/src/Engines/AbstractEngine/abstractEngine.alpha.ts", "../../../dev/core/src/Engines/AbstractEngine/abstractEngine.states.ts", "../../../dev/core/src/Engines/AbstractEngine/abstractEngine.renderPass.ts", "../../../dev/core/src/Engines/engine.ts"],
  "sourcesContent": ["import { Vector3, Vector2 } from \"./math.vector\";\r\n\r\n/**\r\n * Contains position and normal vectors for a vertex\r\n */\r\nexport class PositionNormalVertex {\r\n    /**\r\n     * Creates a PositionNormalVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     */\r\n    constructor(\r\n        /** [Vector3.Zero()] the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** [Vector3.Up()] the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up()\r\n    ) {}\r\n\r\n    /**\r\n     * Clones the PositionNormalVertex\r\n     * @returns the cloned PositionNormalVertex\r\n     */\r\n    public clone(): PositionNormalVertex {\r\n        return new PositionNormalVertex(this.position.clone(), this.normal.clone());\r\n    }\r\n}\r\n\r\n/**\r\n * Contains position, normal and uv vectors for a vertex\r\n */\r\nexport class PositionNormalTextureVertex {\r\n    /**\r\n     * Creates a PositionNormalTextureVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     * @param uv the uv of the vertex (default: 0,0)\r\n     */\r\n    constructor(\r\n        /** [Vector3.Zero()] the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** [Vector3.Up()] the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up(),\r\n        /** [Vector3.Zero()] the uv of the vertex (default: 0,0) */\r\n        public uv: Vector2 = Vector2.Zero()\r\n    ) {}\r\n    /**\r\n     * Clones the PositionNormalTextureVertex\r\n     * @returns the cloned PositionNormalTextureVertex\r\n     */\r\n    public clone(): PositionNormalTextureVertex {\r\n        return new PositionNormalTextureVertex(this.position.clone(), this.normal.clone(), this.uv.clone());\r\n    }\r\n}\r\n", "export * from \"./math.axis\";\r\nexport * from \"./math.color\";\r\nexport * from \"./math.constants\";\r\nexport * from \"./math.frustum\";\r\nexport * from \"./math.path\";\r\nexport * from \"./math.plane\";\r\nexport * from \"./math.size\";\r\nexport * from \"./math.vector\";\r\nexport * from \"./math.vertexFormat\";\r\nexport * from \"./math.viewport\";\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Color3 } from \"../Maths/math.color\";\r\nimport { TmpVectors } from \"./math\";\r\n\r\n// https://dickyjim.wordpress.com/2013/09/04/spherical-harmonics-for-beginners/\r\n// http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\r\n// https://www.ppsloan.org/publications/StupidSH36.pdf\r\n// http://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf\r\n// https://www.ppsloan.org/publications/SHJCGT.pdf\r\n// https://www.ppsloan.org/publications/shdering.pdf\r\n// https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\r\n// https://patapom.com/blog/SHPortal/\r\n// https://imdoingitwrong.wordpress.com/2011/04/14/spherical-harmonics-wtf/\r\n\r\n// Using real SH basis:\r\n//  m>0             m   m\r\n// y   = sqrt(2) * K * P * cos(m*phi) * cos(theta)\r\n//  l               l   l\r\n//\r\n//  m<0             m   |m|\r\n// y   = sqrt(2) * K * P * sin(m*phi) * cos(theta)\r\n//  l               l   l\r\n//\r\n//  m=0   0   0\r\n// y   = K * P * trigono terms\r\n//  l     l   l\r\n//\r\n//  m       (2l + 1)(l - |m|)!\r\n// K = sqrt(------------------)\r\n//  l           4pi(l + |m|)!\r\n//\r\n// and P by recursion:\r\n//\r\n// P00(x) = 1\r\n// P01(x) = x\r\n// Pll(x) = (-1^l)(2l - 1)!!(1-x*x)^(1/2)\r\n//          ((2l - 1)x[Pl-1/m]-(l + m - 1)[Pl-2/m])\r\n// Plm(x) = ---------------------------------------\r\n//                         l - m\r\n// Leaving the trigonometric terms aside we can precompute the constants to :\r\nconst SH3ylmBasisConstants = [\r\n    Math.sqrt(1 / (4 * Math.PI)), // l00\r\n\r\n    -Math.sqrt(3 / (4 * Math.PI)), // l1_1\r\n    Math.sqrt(3 / (4 * Math.PI)), // l10\r\n    -Math.sqrt(3 / (4 * Math.PI)), // l11\r\n\r\n    Math.sqrt(15 / (4 * Math.PI)), // l2_2\r\n    -Math.sqrt(15 / (4 * Math.PI)), // l2_1\r\n    Math.sqrt(5 / (16 * Math.PI)), // l20\r\n    -Math.sqrt(15 / (4 * Math.PI)), // l21\r\n    Math.sqrt(15 / (16 * Math.PI)), // l22\r\n];\r\n\r\n// cm = cos(m * phi)\r\n// sm = sin(m * phi)\r\n// {x,y,z} = {cos(phi)sin(theta), sin(phi)sin(theta), cos(theta)}\r\n// By recursion on using trigo identities:\r\nconst SH3ylmBasisTrigonometricTerms = [\r\n    () => 1, // l00\r\n\r\n    (direction: Vector3) => direction.y, // l1_1\r\n    (direction: Vector3) => direction.z, // l10\r\n    (direction: Vector3) => direction.x, // l11\r\n\r\n    (direction: Vector3) => direction.x * direction.y, // l2_2\r\n    (direction: Vector3) => direction.y * direction.z, // l2_1\r\n    (direction: Vector3) => 3 * direction.z * direction.z - 1, // l20\r\n    (direction: Vector3) => direction.x * direction.z, // l21\r\n    (direction: Vector3) => direction.x * direction.x - direction.y * direction.y, // l22\r\n];\r\n\r\n// Wrap the full compute\r\nconst applySH3 = (lm: number, direction: Vector3) => {\r\n    return SH3ylmBasisConstants[lm] * SH3ylmBasisTrigonometricTerms[lm](direction);\r\n};\r\n\r\n// Derived from the integration of the a kernel convolution to SH.\r\n// Great explanation here: https://patapom.com/blog/SHPortal/#about-distant-radiance-and-irradiance-environments\r\nconst SHCosKernelConvolution = [Math.PI, (2 * Math.PI) / 3, (2 * Math.PI) / 3, (2 * Math.PI) / 3, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4];\r\n\r\n/**\r\n * Class representing spherical harmonics coefficients to the 3rd degree\r\n */\r\nexport class SphericalHarmonics {\r\n    /**\r\n     * Defines whether or not the harmonics have been prescaled for rendering.\r\n     */\r\n    public preScaled = false;\r\n\r\n    /**\r\n     * The l0,0 coefficients of the spherical harmonics\r\n     */\r\n    public l00: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,-1 coefficients of the spherical harmonics\r\n     */\r\n    public l1_1: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,0 coefficients of the spherical harmonics\r\n     */\r\n    public l10: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,1 coefficients of the spherical harmonics\r\n     */\r\n    public l11: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,-2 coefficients of the spherical harmonics\r\n     */\r\n    public l2_2: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,-1 coefficients of the spherical harmonics\r\n     */\r\n    public l2_1: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,0 coefficients of the spherical harmonics\r\n     */\r\n    public l20: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,1 coefficients of the spherical harmonics\r\n     */\r\n    public l21: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,2 coefficients of the spherical harmonics\r\n     */\r\n    public l22: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Adds a light to the spherical harmonics\r\n     * @param direction the direction of the light\r\n     * @param color the color of the light\r\n     * @param deltaSolidAngle the delta solid angle of the light\r\n     */\r\n    public addLight(direction: Vector3, color: Color3, deltaSolidAngle: number): void {\r\n        TmpVectors.Vector3[0].set(color.r, color.g, color.b);\r\n        const colorVector = TmpVectors.Vector3[0];\r\n        const c = TmpVectors.Vector3[1];\r\n        colorVector.scaleToRef(deltaSolidAngle, c);\r\n\r\n        c.scaleToRef(applySH3(0, direction), TmpVectors.Vector3[2]);\r\n        this.l00.addInPlace(TmpVectors.Vector3[2]);\r\n\r\n        c.scaleToRef(applySH3(1, direction), TmpVectors.Vector3[2]);\r\n        this.l1_1.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(2, direction), TmpVectors.Vector3[2]);\r\n        this.l10.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(3, direction), TmpVectors.Vector3[2]);\r\n        this.l11.addInPlace(TmpVectors.Vector3[2]);\r\n\r\n        c.scaleToRef(applySH3(4, direction), TmpVectors.Vector3[2]);\r\n        this.l2_2.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(5, direction), TmpVectors.Vector3[2]);\r\n        this.l2_1.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(6, direction), TmpVectors.Vector3[2]);\r\n        this.l20.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(7, direction), TmpVectors.Vector3[2]);\r\n        this.l21.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(8, direction), TmpVectors.Vector3[2]);\r\n        this.l22.addInPlace(TmpVectors.Vector3[2]);\r\n    }\r\n\r\n    /**\r\n     * Scales the spherical harmonics by the given amount\r\n     * @param scale the amount to scale\r\n     */\r\n    public scaleInPlace(scale: number): void {\r\n        this.l00.scaleInPlace(scale);\r\n        this.l1_1.scaleInPlace(scale);\r\n        this.l10.scaleInPlace(scale);\r\n        this.l11.scaleInPlace(scale);\r\n        this.l2_2.scaleInPlace(scale);\r\n        this.l2_1.scaleInPlace(scale);\r\n        this.l20.scaleInPlace(scale);\r\n        this.l21.scaleInPlace(scale);\r\n        this.l22.scaleInPlace(scale);\r\n    }\r\n\r\n    /**\r\n     * Convert from incident radiance (Li) to irradiance (E) by applying convolution with the cosine-weighted hemisphere.\r\n     *\r\n     * ```\r\n     * E_lm = A_l * L_lm\r\n     * ```\r\n     *\r\n     * In spherical harmonics this convolution amounts to scaling factors for each frequency band.\r\n     * This corresponds to equation 5 in \"An Efficient Representation for Irradiance Environment Maps\", where\r\n     * the scaling factors are given in equation 9.\r\n     */\r\n    public convertIncidentRadianceToIrradiance(): void {\r\n        // Constant (Band 0)\r\n        this.l00.scaleInPlace(SHCosKernelConvolution[0]);\r\n\r\n        // Linear (Band 1)\r\n        this.l1_1.scaleInPlace(SHCosKernelConvolution[1]);\r\n        this.l10.scaleInPlace(SHCosKernelConvolution[2]);\r\n        this.l11.scaleInPlace(SHCosKernelConvolution[3]);\r\n\r\n        // Quadratic (Band 2)\r\n        this.l2_2.scaleInPlace(SHCosKernelConvolution[4]);\r\n        this.l2_1.scaleInPlace(SHCosKernelConvolution[5]);\r\n        this.l20.scaleInPlace(SHCosKernelConvolution[6]);\r\n        this.l21.scaleInPlace(SHCosKernelConvolution[7]);\r\n        this.l22.scaleInPlace(SHCosKernelConvolution[8]);\r\n    }\r\n\r\n    /**\r\n     * Convert from irradiance to outgoing radiance for Lambertian BDRF, suitable for efficient shader evaluation.\r\n     *\r\n     * ```\r\n     * L = (1/pi) * E * rho\r\n     * ```\r\n     *\r\n     * This is done by an additional scale by 1/pi, so is a fairly trivial operation but important conceptually.\r\n     */\r\n    public convertIrradianceToLambertianRadiance(): void {\r\n        this.scaleInPlace(1.0 / Math.PI);\r\n\r\n        // The resultant SH now represents outgoing radiance, so includes the Lambert 1/pi normalisation factor but without albedo (rho) applied\r\n        // (The pixel shader must apply albedo after texture fetches, etc).\r\n    }\r\n\r\n    /**\r\n     * Integrates the reconstruction coefficients directly in to the SH preventing further\r\n     * required operations at run time.\r\n     *\r\n     * This is simply done by scaling back the SH with Ylm constants parameter.\r\n     * The trigonometric part being applied by the shader at run time.\r\n     */\r\n    public preScaleForRendering(): void {\r\n        this.preScaled = true;\r\n\r\n        this.l00.scaleInPlace(SH3ylmBasisConstants[0]);\r\n\r\n        this.l1_1.scaleInPlace(SH3ylmBasisConstants[1]);\r\n        this.l10.scaleInPlace(SH3ylmBasisConstants[2]);\r\n        this.l11.scaleInPlace(SH3ylmBasisConstants[3]);\r\n\r\n        this.l2_2.scaleInPlace(SH3ylmBasisConstants[4]);\r\n        this.l2_1.scaleInPlace(SH3ylmBasisConstants[5]);\r\n        this.l20.scaleInPlace(SH3ylmBasisConstants[6]);\r\n        this.l21.scaleInPlace(SH3ylmBasisConstants[7]);\r\n        this.l22.scaleInPlace(SH3ylmBasisConstants[8]);\r\n    }\r\n\r\n    /**\r\n     * update the spherical harmonics coefficients from the given array\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics (this)\r\n     */\r\n    public updateFromArray(data: ArrayLike<ArrayLike<number>>): SphericalHarmonics {\r\n        Vector3.FromArrayToRef(data[0], 0, this.l00);\r\n        Vector3.FromArrayToRef(data[1], 0, this.l1_1);\r\n        Vector3.FromArrayToRef(data[2], 0, this.l10);\r\n        Vector3.FromArrayToRef(data[3], 0, this.l11);\r\n        Vector3.FromArrayToRef(data[4], 0, this.l2_2);\r\n        Vector3.FromArrayToRef(data[5], 0, this.l2_1);\r\n        Vector3.FromArrayToRef(data[6], 0, this.l20);\r\n        Vector3.FromArrayToRef(data[7], 0, this.l21);\r\n        Vector3.FromArrayToRef(data[8], 0, this.l22);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * update the spherical harmonics coefficients from the given floats array\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics (this)\r\n     */\r\n    public updateFromFloatsArray(data: ArrayLike<number>): SphericalHarmonics {\r\n        Vector3.FromFloatsToRef(data[0], data[1], data[2], this.l00);\r\n        Vector3.FromFloatsToRef(data[3], data[4], data[5], this.l1_1);\r\n        Vector3.FromFloatsToRef(data[6], data[7], data[8], this.l10);\r\n        Vector3.FromFloatsToRef(data[9], data[10], data[11], this.l11);\r\n        Vector3.FromFloatsToRef(data[12], data[13], data[14], this.l2_2);\r\n        Vector3.FromFloatsToRef(data[15], data[16], data[17], this.l2_1);\r\n        Vector3.FromFloatsToRef(data[18], data[19], data[20], this.l20);\r\n        Vector3.FromFloatsToRef(data[21], data[22], data[23], this.l21);\r\n        Vector3.FromFloatsToRef(data[24], data[25], data[26], this.l22);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Constructs a spherical harmonics from an array.\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics\r\n     */\r\n    public static FromArray(data: ArrayLike<ArrayLike<number>>): SphericalHarmonics {\r\n        const sh = new SphericalHarmonics();\r\n        return sh.updateFromArray(data);\r\n    }\r\n\r\n    // Keep for references.\r\n    /**\r\n     * Gets the spherical harmonics from polynomial\r\n     * @param polynomial the spherical polynomial\r\n     * @returns the spherical harmonics\r\n     */\r\n    public static FromPolynomial(polynomial: SphericalPolynomial): SphericalHarmonics {\r\n        const result = new SphericalHarmonics();\r\n\r\n        result.l00 = polynomial.xx.scale(0.376127).add(polynomial.yy.scale(0.376127)).add(polynomial.zz.scale(0.376126));\r\n        result.l1_1 = polynomial.y.scale(0.977204);\r\n        result.l10 = polynomial.z.scale(0.977204);\r\n        result.l11 = polynomial.x.scale(0.977204);\r\n        result.l2_2 = polynomial.xy.scale(1.16538);\r\n        result.l2_1 = polynomial.yz.scale(1.16538);\r\n        result.l20 = polynomial.zz.scale(1.34567).subtract(polynomial.xx.scale(0.672834)).subtract(polynomial.yy.scale(0.672834));\r\n        result.l21 = polynomial.zx.scale(1.16538);\r\n        result.l22 = polynomial.xx.scale(1.16538).subtract(polynomial.yy.scale(1.16538));\r\n\r\n        result.l1_1.scaleInPlace(-1);\r\n        result.l11.scaleInPlace(-1);\r\n        result.l2_1.scaleInPlace(-1);\r\n        result.l21.scaleInPlace(-1);\r\n\r\n        result.scaleInPlace(Math.PI);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Class representing spherical polynomial coefficients to the 3rd degree\r\n */\r\nexport class SphericalPolynomial {\r\n    private _harmonics: Nullable<SphericalHarmonics>;\r\n\r\n    /**\r\n     * The spherical harmonics used to create the polynomials.\r\n     */\r\n    public get preScaledHarmonics(): SphericalHarmonics {\r\n        if (!this._harmonics) {\r\n            this._harmonics = SphericalHarmonics.FromPolynomial(this);\r\n        }\r\n        if (!this._harmonics.preScaled) {\r\n            this._harmonics.preScaleForRendering();\r\n        }\r\n        return this._harmonics;\r\n    }\r\n\r\n    /**\r\n     * The x coefficients of the spherical polynomial\r\n     */\r\n    public x: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The y coefficients of the spherical polynomial\r\n     */\r\n    public y: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The z coefficients of the spherical polynomial\r\n     */\r\n    public z: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The xx coefficients of the spherical polynomial\r\n     */\r\n    public xx: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The yy coefficients of the spherical polynomial\r\n     */\r\n    public yy: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The zz coefficients of the spherical polynomial\r\n     */\r\n    public zz: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The xy coefficients of the spherical polynomial\r\n     */\r\n    public xy: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The yz coefficients of the spherical polynomial\r\n     */\r\n    public yz: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The zx coefficients of the spherical polynomial\r\n     */\r\n    public zx: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Adds an ambient color to the spherical polynomial\r\n     * @param color the color to add\r\n     */\r\n    public addAmbient(color: Color3): void {\r\n        TmpVectors.Vector3[0].copyFromFloats(color.r, color.g, color.b);\r\n        const colorVector = TmpVectors.Vector3[0];\r\n        this.xx.addInPlace(colorVector);\r\n        this.yy.addInPlace(colorVector);\r\n        this.zz.addInPlace(colorVector);\r\n    }\r\n\r\n    /**\r\n     * Scales the spherical polynomial by the given amount\r\n     * @param scale the amount to scale\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.x.scaleInPlace(scale);\r\n        this.y.scaleInPlace(scale);\r\n        this.z.scaleInPlace(scale);\r\n        this.xx.scaleInPlace(scale);\r\n        this.yy.scaleInPlace(scale);\r\n        this.zz.scaleInPlace(scale);\r\n        this.yz.scaleInPlace(scale);\r\n        this.zx.scaleInPlace(scale);\r\n        this.xy.scaleInPlace(scale);\r\n    }\r\n\r\n    /**\r\n     * Updates the spherical polynomial from harmonics\r\n     * @param harmonics the spherical harmonics\r\n     * @returns the spherical polynomial\r\n     */\r\n    public updateFromHarmonics(harmonics: SphericalHarmonics): SphericalPolynomial {\r\n        this._harmonics = harmonics;\r\n\r\n        this.x.copyFrom(harmonics.l11);\r\n        this.x.scaleInPlace(1.02333).scaleInPlace(-1);\r\n        this.y.copyFrom(harmonics.l1_1);\r\n        this.y.scaleInPlace(1.02333).scaleInPlace(-1);\r\n        this.z.copyFrom(harmonics.l10);\r\n        this.z.scaleInPlace(1.02333);\r\n\r\n        this.xx.copyFrom(harmonics.l00);\r\n        TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.247708);\r\n        TmpVectors.Vector3[1].copyFrom(harmonics.l22).scaleInPlace(0.429043);\r\n        this.xx.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).addInPlace(TmpVectors.Vector3[1]);\r\n        this.yy.copyFrom(harmonics.l00);\r\n        this.yy.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).subtractInPlace(TmpVectors.Vector3[1]);\r\n        this.zz.copyFrom(harmonics.l00);\r\n        TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.495417);\r\n        this.zz.scaleInPlace(0.886277).addInPlace(TmpVectors.Vector3[0]);\r\n\r\n        this.yz.copyFrom(harmonics.l2_1);\r\n        this.yz.scaleInPlace(0.858086).scaleInPlace(-1);\r\n        this.zx.copyFrom(harmonics.l21);\r\n        this.zx.scaleInPlace(0.858086).scaleInPlace(-1);\r\n        this.xy.copyFrom(harmonics.l2_2);\r\n        this.xy.scaleInPlace(0.858086);\r\n\r\n        this.scaleInPlace(1.0 / Math.PI);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the spherical polynomial from harmonics\r\n     * @param harmonics the spherical harmonics\r\n     * @returns the spherical polynomial\r\n     */\r\n    public static FromHarmonics(harmonics: SphericalHarmonics): SphericalPolynomial {\r\n        const result = new SphericalPolynomial();\r\n        return result.updateFromHarmonics(harmonics);\r\n    }\r\n\r\n    /**\r\n     * Constructs a spherical polynomial from an array.\r\n     * @param data defines the 9x3 coefficients (x, y, z, xx, yy, zz, yz, zx, xy)\r\n     * @returns the spherical polynomial\r\n     */\r\n    public static FromArray(data: ArrayLike<ArrayLike<number>>): SphericalPolynomial {\r\n        const sp = new SphericalPolynomial();\r\n        Vector3.FromArrayToRef(data[0], 0, sp.x);\r\n        Vector3.FromArrayToRef(data[1], 0, sp.y);\r\n        Vector3.FromArrayToRef(data[2], 0, sp.z);\r\n        Vector3.FromArrayToRef(data[3], 0, sp.xx);\r\n        Vector3.FromArrayToRef(data[4], 0, sp.yy);\r\n        Vector3.FromArrayToRef(data[5], 0, sp.zz);\r\n        Vector3.FromArrayToRef(data[6], 0, sp.yz);\r\n        Vector3.FromArrayToRef(data[7], 0, sp.zx);\r\n        Vector3.FromArrayToRef(data[8], 0, sp.xy);\r\n        return sp;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { RenderTargetCreationOptions } from \"../Materials/Textures/textureCreationOptions\";\r\nimport type { IInspectable } from \"../Misc/iInspectable\";\r\nimport type { Color4 } from \"../Maths/math.color\";\r\n\r\nimport type { NodeMaterial } from \"../Materials/Node/nodeMaterial\";\r\nimport { serialize, serializeAsColor4 } from \"../Misc/decorators\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { GetClass, RegisterClass } from \"../Misc/typeStore\";\r\nimport type { RenderTargetWrapper } from \"../Engines/renderTargetWrapper\";\r\nimport { ShaderLanguage } from \"../Materials/shaderLanguage\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { Animation } from \"../Animations/animation\";\r\nimport type { PrePassRenderer } from \"../Rendering/prePassRenderer\";\r\nimport type { PrePassEffectConfiguration } from \"../Rendering/prePassEffectConfiguration\";\r\nimport { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { GetExponentOfTwo } from \"../Misc/tools.functions\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\nimport type { EffectWrapperCustomShaderCodeProcessing, EffectWrapperCreationOptions } from \"../Materials/effectRenderer\";\r\nimport { EffectWrapper } from \"../Materials/effectRenderer\";\r\n\r\ndeclare module \"../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Sets a texture to the context from a postprocess\r\n         * @param channel defines the channel to use\r\n         * @param postProcess defines the source postprocess\r\n         * @param name name of the channel\r\n         */\r\n        setTextureFromPostProcess(channel: number, postProcess: Nullable<PostProcess>, name: string): void;\r\n\r\n        /**\r\n         * Binds the output of the passed in post process to the texture channel specified\r\n         * @param channel The channel the texture should be bound to\r\n         * @param postProcess The post process which's output should be bound\r\n         * @param name name of the channel\r\n         */\r\n        setTextureFromPostProcessOutput(channel: number, postProcess: Nullable<PostProcess>, name: string): void;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype.setTextureFromPostProcess = function (channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n    let postProcessInput = null;\r\n    if (postProcess) {\r\n        if (postProcess._forcedOutputTexture) {\r\n            postProcessInput = postProcess._forcedOutputTexture;\r\n        } else if (postProcess._textures.data[postProcess._currentRenderTextureInd]) {\r\n            postProcessInput = postProcess._textures.data[postProcess._currentRenderTextureInd];\r\n        }\r\n    }\r\n\r\n    this._bindTexture(channel, postProcessInput?.texture ?? null, name);\r\n};\r\n\r\nAbstractEngine.prototype.setTextureFromPostProcessOutput = function (channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n    this._bindTexture(channel, postProcess?._outputTexture?.texture ?? null, name);\r\n};\r\n\r\ndeclare module \"../Materials/effect\" {\r\n    export interface Effect {\r\n        /**\r\n         * Sets a texture to be the input of the specified post process. (To use the output, pass in the next post process in the pipeline)\r\n         * @param channel Name of the sampler variable.\r\n         * @param postProcess Post process to get the input texture from.\r\n         */\r\n        setTextureFromPostProcess(channel: string, postProcess: Nullable<PostProcess>): void;\r\n\r\n        /**\r\n         * (Warning! setTextureFromPostProcessOutput may be desired instead)\r\n         * Sets the input texture of the passed in post process to be input of this effect. (To use the output of the passed in post process use setTextureFromPostProcessOutput)\r\n         * @param channel Name of the sampler variable.\r\n         * @param postProcess Post process to get the output texture from.\r\n         */\r\n        setTextureFromPostProcessOutput(channel: string, postProcess: Nullable<PostProcess>): void;\r\n    }\r\n}\r\n\r\n/**\r\n * Sets a texture to be the input of the specified post process. (To use the output, pass in the next post process in the pipeline)\r\n * @param channel Name of the sampler variable.\r\n * @param postProcess Post process to get the input texture from.\r\n */\r\nEffect.prototype.setTextureFromPostProcess = function (channel: string, postProcess: Nullable<PostProcess>): void {\r\n    this._engine.setTextureFromPostProcess(this._samplers[channel], postProcess, channel);\r\n};\r\n\r\n/**\r\n * (Warning! setTextureFromPostProcessOutput may be desired instead)\r\n * Sets the input texture of the passed in post process to be input of this effect. (To use the output of the passed in post process use setTextureFromPostProcessOutput)\r\n * @param channel Name of the sampler variable.\r\n * @param postProcess Post process to get the output texture from.\r\n */\r\nEffect.prototype.setTextureFromPostProcessOutput = function (channel: string, postProcess: Nullable<PostProcess>): void {\r\n    this._engine.setTextureFromPostProcessOutput(this._samplers[channel], postProcess, channel);\r\n};\r\n\r\n/**\r\n * Options for the PostProcess constructor\r\n */\r\nexport type PostProcessOptions = EffectWrapperCreationOptions & {\r\n    /**\r\n     * The width of the texture created for this post process.\r\n     * This parameter (and height) is only used when passing a value for the 5th parameter (options) to the PostProcess constructor function.\r\n     * If you use a PostProcessOptions for the 3rd parameter of the constructor, size is used instead of width and height.\r\n     */\r\n    width?: number;\r\n    /**\r\n     * The height of the texture created for this post process.\r\n     * This parameter (and width) is only used when passing a value for the 5th parameter (options) to the PostProcess constructor function.\r\n     * If you use a PostProcessOptions for the 3rd parameter of the constructor, size is used instead of width and height.\r\n     */\r\n    height?: number;\r\n\r\n    /**\r\n     * The size of the post process texture.\r\n     * It is either a ratio to downscale or upscale the texture create for this post process, or an object containing width and height values.\r\n     * Default: 1\r\n     */\r\n    size?: number | { width: number; height: number };\r\n    /**\r\n     * The camera that the post process will be attached to (default: null)\r\n     */\r\n    camera?: Nullable<Camera>;\r\n    /**\r\n     * The sampling mode to be used by the shader (default: Constants.TEXTURE_NEAREST_SAMPLINGMODE)\r\n     */\r\n    samplingMode?: number;\r\n    /**\r\n     * The engine to be used to render the post process (default: engine from scene)\r\n     */\r\n    engine?: AbstractEngine;\r\n    /**\r\n     * If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    reusable?: boolean;\r\n    /**\r\n     * Type of the texture created for this post process (default: Constants.TEXTURETYPE_UNSIGNED_BYTE)\r\n     */\r\n    textureType?: number;\r\n    /**\r\n     * Format of the texture created for this post process (default: TEXTUREFORMAT_RGBA)\r\n     */\r\n    textureFormat?: number;\r\n    /**\r\n     * The effect wrapper instance used by the post process. If not provided, a new one will be created.\r\n     */\r\n    effectWrapper?: EffectWrapper;\r\n};\r\n\r\ntype TextureCache = { texture: RenderTargetWrapper; postProcessChannel: number; lastUsedRenderId: number };\r\n\r\n/**\r\n * PostProcess can be used to apply a shader to a texture after it has been rendered\r\n * See https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\r\n */\r\nexport class PostProcess {\r\n    /**\r\n     * Force all the postprocesses to compile to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static get ForceGLSL(): boolean {\r\n        return EffectWrapper.ForceGLSL;\r\n    }\r\n\r\n    public static set ForceGLSL(force: boolean) {\r\n        EffectWrapper.ForceGLSL = force;\r\n    }\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<IAssetContainer> = null;\r\n\r\n    /**\r\n     * Registers a shader code processing with a post process name.\r\n     * @param postProcessName name of the post process. Use null for the fallback shader code processing. This is the shader code processing that will be used in case no specific shader code processing has been associated to a post process name\r\n     * @param customShaderCodeProcessing shader code processing to associate to the post process name\r\n     */\r\n    public static RegisterShaderCodeProcessing(postProcessName: Nullable<string>, customShaderCodeProcessing?: EffectWrapperCustomShaderCodeProcessing) {\r\n        EffectWrapper.RegisterShaderCodeProcessing(postProcessName, customShaderCodeProcessing);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the unique id of the post process\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /** Name of the PostProcess. */\r\n    @serialize()\r\n    public get name() {\r\n        return this._effectWrapper.name;\r\n    }\r\n\r\n    public set name(value: string) {\r\n        this._effectWrapper.name = value;\r\n    }\r\n\r\n    /**\r\n     * Width of the texture to apply the post process on\r\n     */\r\n    @serialize()\r\n    public width = -1;\r\n\r\n    /**\r\n     * Height of the texture to apply the post process on\r\n     */\r\n    @serialize()\r\n    public height = -1;\r\n\r\n    /**\r\n     * Gets the node material used to create this postprocess (null if the postprocess was manually created)\r\n     */\r\n    public nodeMaterialSource: Nullable<NodeMaterial> = null;\r\n\r\n    /**\r\n     * Internal, reference to the location where this postprocess was output to. (Typically the texture on the next postprocess in the chain)\r\n     * @internal\r\n     */\r\n    public _outputTexture: Nullable<RenderTargetWrapper> = null;\r\n    /**\r\n     * Sampling mode used by the shader\r\n     */\r\n    @serialize()\r\n    public renderTargetSamplingMode: number;\r\n    /**\r\n     * Clear color to use when screen clearing\r\n     */\r\n    @serializeAsColor4()\r\n    public clearColor: Color4;\r\n    /**\r\n     * If the buffer needs to be cleared before applying the post process. (default: true)\r\n     * Should be set to false if shader will overwrite all previous pixels.\r\n     */\r\n    @serialize()\r\n    public autoClear = true;\r\n    /**\r\n     * If clearing the buffer should be forced in autoClear mode, even when alpha mode is enabled (default: false).\r\n     * By default, the buffer will only be cleared if alpha mode is disabled (and autoClear is true).\r\n     */\r\n    @serialize()\r\n    public forceAutoClearInAlphaMode = false;\r\n\r\n    /**\r\n     * Type of alpha mode to use when performing the post process (default: Engine.ALPHA_DISABLE)\r\n     */\r\n    @serialize()\r\n    public get alphaMode() {\r\n        return this._effectWrapper.alphaMode;\r\n    }\r\n\r\n    public set alphaMode(value: number) {\r\n        this._effectWrapper.alphaMode = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the setAlphaBlendConstants of the babylon engine\r\n     */\r\n    @serialize()\r\n    public alphaConstants: Color4;\r\n\r\n    /**\r\n     * Animations to be used for the post processing\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * Enable Pixel Perfect mode where texture is not scaled to be power of 2.\r\n     * Can only be used on a single postprocess or on the last one of a chain. (default: false)\r\n     */\r\n    @serialize()\r\n    public enablePixelPerfectMode = false;\r\n\r\n    /**\r\n     * Force the postprocess to be applied without taking in account viewport\r\n     */\r\n    @serialize()\r\n    public forceFullscreenViewport = true;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Scale mode for the post process (default: Engine.SCALEMODE_FLOOR)\r\n     *\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 1     | SCALEMODE_FLOOR                     | [engine.scalemode_floor](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_floor) |\r\n     * | 2     | SCALEMODE_NEAREST                   | [engine.scalemode_nearest](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_nearest) |\r\n     * | 3     | SCALEMODE_CEILING                   | [engine.scalemode_ceiling](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_ceiling) |\r\n     *\r\n     */\r\n    @serialize()\r\n    public scaleMode = Constants.SCALEMODE_FLOOR;\r\n    /**\r\n     * Force textures to be a power of two (default: false)\r\n     */\r\n    @serialize()\r\n    public alwaysForcePOT = false;\r\n\r\n    @serialize(\"samples\")\r\n    private _samples = 1;\r\n\r\n    /**\r\n     * Number of sample textures (default: 1)\r\n     */\r\n    public get samples() {\r\n        return this._samples;\r\n    }\r\n\r\n    public set samples(n: number) {\r\n        this._samples = Math.min(n, this._engine.getCaps().maxMSAASamples);\r\n\r\n        this._textures.forEach((texture) => {\r\n            texture.setSamples(this._samples);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Modify the scale of the post process to be the same as the viewport (default: false)\r\n     */\r\n    @serialize()\r\n    public adaptScaleToCurrentViewport = false;\r\n\r\n    private _camera: Camera;\r\n    protected _scene: Scene;\r\n    private _engine: AbstractEngine;\r\n\r\n    protected _webGPUReady = false;\r\n\r\n    private _options: number | { width: number; height: number };\r\n    private _reusable = false;\r\n    private _renderId = 0;\r\n    private _textureType: number;\r\n    private _textureFormat: number;\r\n    /** @internal */\r\n    private _shaderLanguage: ShaderLanguage;\r\n\r\n    /**\r\n     * Gets the shader language type used to generate vertex and fragment source code.\r\n     */\r\n    public get shaderLanguage(): ShaderLanguage {\r\n        return this._shaderLanguage;\r\n    }\r\n\r\n    /**\r\n     * if externalTextureSamplerBinding is true, the \"apply\" method won't bind the textureSampler texture, it is expected to be done by the \"outside\" (by the onApplyObservable observer most probably).\r\n     * counter-productive in some cases because if the texture bound by \"apply\" is different from the currently texture bound, (the one set by the onApplyObservable observer, for eg) some\r\n     * internal structures (materialContext) will be dirtified, which may impact performances\r\n     */\r\n    public externalTextureSamplerBinding = false;\r\n\r\n    /**\r\n     * Smart array of input and output textures for the post process.\r\n     * @internal\r\n     */\r\n    public _textures = new SmartArray<RenderTargetWrapper>(2);\r\n    /**\r\n     * Smart array of input and output textures for the post process.\r\n     * @internal\r\n     */\r\n    private _textureCache: TextureCache[] = [];\r\n    /**\r\n     * The index in _textures that corresponds to the output texture.\r\n     * @internal\r\n     */\r\n    public _currentRenderTextureInd = 0;\r\n    private _samplers: string[];\r\n    private _fragmentUrl: string;\r\n    private _vertexUrl: string;\r\n    private _parameters: string[];\r\n    private _uniformBuffers: string[];\r\n    protected _postProcessDefines: Nullable<string>;\r\n    private _scaleRatio = new Vector2(1, 1);\r\n    protected _indexParameters: any;\r\n    private _shareOutputWithPostProcess: Nullable<PostProcess>;\r\n    private _texelSize = Vector2.Zero();\r\n\r\n    /** @internal */\r\n    public _forcedOutputTexture: Nullable<RenderTargetWrapper>;\r\n\r\n    /**\r\n     * Prepass configuration in case this post process needs a texture from prepass\r\n     * @internal\r\n     */\r\n    public _prePassEffectConfiguration: PrePassEffectConfiguration;\r\n\r\n    /**\r\n     * Returns the fragment url or shader name used in the post process.\r\n     * @returns the fragment url or name in the shader store.\r\n     */\r\n    public getEffectName(): string {\r\n        return this._fragmentUrl;\r\n    }\r\n\r\n    /**\r\n     * Executed when the effect was created\r\n     * @returns effect that was created for this post process\r\n     */\r\n    public onEffectCreatedObservable;\r\n\r\n    // Events\r\n\r\n    /**\r\n     * An event triggered when the postprocess is activated.\r\n     */\r\n    public onActivateObservable = new Observable<Camera>();\r\n\r\n    private _onActivateObserver: Nullable<Observer<Camera>>;\r\n    /**\r\n     * A function that is added to the onActivateObservable\r\n     */\r\n    public set onActivate(callback: Nullable<(camera: Camera) => void>) {\r\n        if (this._onActivateObserver) {\r\n            this.onActivateObservable.remove(this._onActivateObserver);\r\n        }\r\n        if (callback) {\r\n            this._onActivateObserver = this.onActivateObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the postprocess changes its size.\r\n     */\r\n    public onSizeChangedObservable = new Observable<PostProcess>();\r\n\r\n    private _onSizeChangedObserver: Nullable<Observer<PostProcess>>;\r\n    /**\r\n     * A function that is added to the onSizeChangedObservable\r\n     */\r\n    public set onSizeChanged(callback: (postProcess: PostProcess) => void) {\r\n        if (this._onSizeChangedObserver) {\r\n            this.onSizeChangedObservable.remove(this._onSizeChangedObserver);\r\n        }\r\n        this._onSizeChangedObserver = this.onSizeChangedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the postprocess applies its effect.\r\n     */\r\n    public onApplyObservable = new Observable<Effect>();\r\n\r\n    private _onApplyObserver: Nullable<Observer<Effect>>;\r\n    /**\r\n     * A function that is added to the onApplyObservable\r\n     */\r\n    public set onApply(callback: (effect: Effect) => void) {\r\n        if (this._onApplyObserver) {\r\n            this.onApplyObservable.remove(this._onApplyObserver);\r\n        }\r\n        this._onApplyObserver = this.onApplyObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the postprocess\r\n     */\r\n    public onBeforeRenderObservable = new Observable<Effect>();\r\n\r\n    private _onBeforeRenderObserver: Nullable<Observer<Effect>>;\r\n    /**\r\n     * A function that is added to the onBeforeRenderObservable\r\n     */\r\n    public set onBeforeRender(callback: (effect: Effect) => void) {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        }\r\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the postprocess\r\n     */\r\n    public onAfterRenderObservable = new Observable<Effect>();\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Effect>>;\r\n    /**\r\n     * A function that is added to the onAfterRenderObservable\r\n     */\r\n    public set onAfterRender(callback: (efect: Effect) => void) {\r\n        if (this._onAfterRenderObserver) {\r\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        }\r\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the post-process is disposed\r\n     */\r\n    public readonly onDisposeObservable = new Observable<void>();\r\n\r\n    /**\r\n     * The input texture for this post process and the output texture of the previous post process. When added to a pipeline the previous post process will\r\n     * render it's output into this texture and this texture will be used as textureSampler in the fragment shader of this post process.\r\n     */\r\n    public get inputTexture(): RenderTargetWrapper {\r\n        return this._textures.data[this._currentRenderTextureInd];\r\n    }\r\n\r\n    public set inputTexture(value: RenderTargetWrapper) {\r\n        this._forcedOutputTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Since inputTexture should always be defined, if we previously manually set `inputTexture`,\r\n     * the only way to unset it is to use this function to restore its internal state\r\n     */\r\n    public restoreDefaultInputTexture() {\r\n        if (this._forcedOutputTexture) {\r\n            this._forcedOutputTexture = null;\r\n            this.markTextureDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the camera which post process is applied to.\r\n     * @returns The camera the post process is applied to.\r\n     */\r\n    public getCamera(): Camera {\r\n        return this._camera;\r\n    }\r\n\r\n    /**\r\n     * Gets the texel size of the postprocess.\r\n     * See https://en.wikipedia.org/wiki/Texel_(graphics)\r\n     */\r\n    public get texelSize(): Vector2 {\r\n        if (this._shareOutputWithPostProcess) {\r\n            return this._shareOutputWithPostProcess.texelSize;\r\n        }\r\n\r\n        if (this._forcedOutputTexture) {\r\n            this._texelSize.copyFromFloats(1.0 / this._forcedOutputTexture.width, 1.0 / this._forcedOutputTexture.height);\r\n        }\r\n\r\n        return this._texelSize;\r\n    }\r\n\r\n    protected readonly _effectWrapper: EffectWrapper;\r\n    protected readonly _useExistingThinPostProcess: boolean;\r\n\r\n    /**\r\n     * Creates a new instance PostProcess\r\n     * @param name The name of the PostProcess.\r\n     * @param fragmentUrl The url of the fragment shader to be used.\r\n     * @param options The options to be used when constructing the post process.\r\n     */\r\n    constructor(name: string, fragmentUrl: string, options?: PostProcessOptions);\r\n\r\n    /**\r\n     * Creates a new instance PostProcess\r\n     * @param name The name of the PostProcess.\r\n     * @param fragmentUrl The url of the fragment shader to be used.\r\n     * @param parameters Array of the names of uniform non-sampler2D variables that will be passed to the shader.\r\n     * @param samplers Array of the names of uniform sampler2D variables that will be passed to the shader.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param defines String of defines that will be set when running the fragment shader. (default: null)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param vertexUrl The url of the vertex shader to be used. (default: \"postprocess\")\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param blockCompilation If the shader should not be compiled immediatly. (default: false)\r\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\r\n     * @param shaderLanguage The shader language of the shader. (default: GLSL)\r\n     * @param extraInitializations Defines additional code to call to prepare the shader code\r\n     */\r\n    constructor(\r\n        name: string,\r\n        fragmentUrl: string,\r\n        parameters: Nullable<string[]>,\r\n        samplers: Nullable<string[]>,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: AbstractEngine,\r\n        reusable?: boolean,\r\n        defines?: Nullable<string>,\r\n        textureType?: number,\r\n        vertexUrl?: string,\r\n        indexParameters?: any,\r\n        blockCompilation?: boolean,\r\n        textureFormat?: number,\r\n        shaderLanguage?: ShaderLanguage,\r\n        extraInitializations?: (useWebGPU: boolean, list: Promise<any>[]) => void\r\n    );\r\n\r\n    /** @internal */\r\n    constructor(\r\n        name: string,\r\n        fragmentUrl: string,\r\n        parameters?: Nullable<string[]> | PostProcessOptions,\r\n        samplers?: Nullable<string[]>,\r\n        _size?: number | PostProcessOptions,\r\n        camera?: Nullable<Camera>,\r\n        samplingMode: number = Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n        engine?: AbstractEngine,\r\n        reusable?: boolean,\r\n        defines: Nullable<string> = null,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        vertexUrl: string = \"postprocess\",\r\n        indexParameters?: any,\r\n        blockCompilation = false,\r\n        textureFormat = Constants.TEXTUREFORMAT_RGBA,\r\n        shaderLanguage?: ShaderLanguage,\r\n        extraInitializations?: (useWebGPU: boolean, list: Promise<any>[]) => void\r\n    ) {\r\n        let size: number | { width: number; height: number } = 1;\r\n        let uniformBuffers: Nullable<string[]> = null;\r\n        let effectWrapper: EffectWrapper | undefined;\r\n        if (parameters && !Array.isArray(parameters)) {\r\n            const options = parameters;\r\n            parameters = options.uniforms ?? null;\r\n            samplers = options.samplers ?? null;\r\n            size = options.size ?? 1;\r\n            camera = options.camera ?? null;\r\n            samplingMode = options.samplingMode ?? Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n            engine = options.engine;\r\n            reusable = options.reusable;\r\n            defines = Array.isArray(options.defines) ? options.defines.join(\"\\n\") : (options.defines ?? null);\r\n            textureType = options.textureType ?? Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n            vertexUrl = options.vertexUrl ?? \"postprocess\";\r\n            indexParameters = options.indexParameters;\r\n            blockCompilation = options.blockCompilation ?? false;\r\n            textureFormat = options.textureFormat ?? Constants.TEXTUREFORMAT_RGBA;\r\n            shaderLanguage = options.shaderLanguage ?? ShaderLanguage.GLSL;\r\n            uniformBuffers = options.uniformBuffers ?? null;\r\n            extraInitializations = options.extraInitializations;\r\n            effectWrapper = options.effectWrapper;\r\n        } else if (_size) {\r\n            if (typeof _size === \"number\") {\r\n                size = _size;\r\n            } else {\r\n                size = { width: _size.width!, height: _size.height! };\r\n            }\r\n        }\r\n\r\n        this._useExistingThinPostProcess = !!effectWrapper;\r\n\r\n        this._effectWrapper =\r\n            effectWrapper ??\r\n            new EffectWrapper({\r\n                name,\r\n                useShaderStore: true,\r\n                useAsPostProcess: true,\r\n                fragmentShader: fragmentUrl,\r\n                engine: engine || camera?.getScene().getEngine(),\r\n                uniforms: parameters,\r\n                samplers,\r\n                uniformBuffers,\r\n                defines,\r\n                vertexUrl,\r\n                indexParameters,\r\n                blockCompilation: true,\r\n                shaderLanguage,\r\n                extraInitializations: undefined,\r\n            });\r\n\r\n        this.name = name;\r\n        this.onEffectCreatedObservable = this._effectWrapper.onEffectCreatedObservable;\r\n\r\n        if (camera != null) {\r\n            this._camera = camera;\r\n            this._scene = camera.getScene();\r\n            camera.attachPostProcess(this);\r\n            this._engine = this._scene.getEngine();\r\n\r\n            this._scene.postProcesses.push(this);\r\n            this.uniqueId = this._scene.getUniqueId();\r\n        } else if (engine) {\r\n            this._engine = engine;\r\n            this._engine.postProcesses.push(this);\r\n        }\r\n\r\n        this._options = size;\r\n        this.renderTargetSamplingMode = samplingMode ? samplingMode : Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        this._reusable = reusable || false;\r\n        this._textureType = textureType;\r\n        this._textureFormat = textureFormat;\r\n        this._shaderLanguage = shaderLanguage || ShaderLanguage.GLSL;\r\n\r\n        this._samplers = samplers || [];\r\n        if (this._samplers.indexOf(\"textureSampler\") === -1) {\r\n            this._samplers.push(\"textureSampler\");\r\n        }\r\n\r\n        this._fragmentUrl = fragmentUrl;\r\n        this._vertexUrl = vertexUrl;\r\n        this._parameters = parameters || [];\r\n\r\n        if (this._parameters.indexOf(\"scale\") === -1) {\r\n            this._parameters.push(\"scale\");\r\n        }\r\n        this._uniformBuffers = uniformBuffers || [];\r\n\r\n        this._indexParameters = indexParameters;\r\n\r\n        if (!this._useExistingThinPostProcess) {\r\n            this._webGPUReady = this._shaderLanguage === ShaderLanguage.WGSL;\r\n\r\n            const importPromises: Array<Promise<any>> = [];\r\n\r\n            this._gatherImports(this._engine.isWebGPU && !PostProcess.ForceGLSL, importPromises);\r\n\r\n            this._effectWrapper._webGPUReady = this._webGPUReady;\r\n            this._effectWrapper._postConstructor(blockCompilation, defines, extraInitializations, importPromises);\r\n        }\r\n    }\r\n\r\n    protected _gatherImports(useWebGPU = false, list: Promise<any>[]) {\r\n        // this._webGPUReady is used to detect when a postprocess is intended to be used with WebGPU\r\n        if (useWebGPU && this._webGPUReady) {\r\n            list.push(Promise.all([import(\"../ShadersWGSL/postprocess.vertex\")]));\r\n        } else {\r\n            list.push(Promise.all([import(\"../Shaders/postprocess.vertex\")]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"PostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"PostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Gets the engine which this post process belongs to.\r\n     * @returns The engine the post process was enabled with.\r\n     */\r\n    public getEngine(): AbstractEngine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * The effect that is created when initializing the post process.\r\n     * @returns The created effect corresponding to the postprocess.\r\n     */\r\n    public getEffect(): Effect {\r\n        return this._effectWrapper.drawWrapper.effect!;\r\n    }\r\n\r\n    /**\r\n     * To avoid multiple redundant textures for multiple post process, the output the output texture for this post process can be shared with another.\r\n     * @param postProcess The post process to share the output with.\r\n     * @returns This post process.\r\n     */\r\n    public shareOutputWith(postProcess: PostProcess): PostProcess {\r\n        this._disposeTextures();\r\n\r\n        this._shareOutputWithPostProcess = postProcess;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reverses the effect of calling shareOutputWith and returns the post process back to its original state.\r\n     * This should be called if the post process that shares output with this post process is disabled/disposed.\r\n     */\r\n    public useOwnOutput() {\r\n        if (this._textures.length == 0) {\r\n            this._textures = new SmartArray<RenderTargetWrapper>(2);\r\n        }\r\n\r\n        this._shareOutputWithPostProcess = null;\r\n    }\r\n\r\n    /**\r\n     * Updates the effect with the current post process compile time values and recompiles the shader.\r\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param onCompiled Called when the shader has been compiled.\r\n     * @param onError Called if there is an error when compiling a shader.\r\n     * @param vertexUrl The url of the vertex shader to be used (default: the one given at construction time)\r\n     * @param fragmentUrl The url of the fragment shader to be used (default: the one given at construction time)\r\n     */\r\n    public updateEffect(\r\n        defines: Nullable<string> = null,\r\n        uniforms: Nullable<string[]> = null,\r\n        samplers: Nullable<string[]> = null,\r\n        indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void,\r\n        onError?: (effect: Effect, errors: string) => void,\r\n        vertexUrl?: string,\r\n        fragmentUrl?: string\r\n    ) {\r\n        this._effectWrapper.updateEffect(defines, uniforms, samplers, indexParameters, onCompiled, onError, vertexUrl, fragmentUrl);\r\n        this._postProcessDefines = Array.isArray(this._effectWrapper.options.defines) ? this._effectWrapper.options.defines.join(\"\\n\") : this._effectWrapper.options.defines;\r\n    }\r\n\r\n    /**\r\n     * The post process is reusable if it can be used multiple times within one frame.\r\n     * @returns If the post process is reusable\r\n     */\r\n    public isReusable(): boolean {\r\n        return this._reusable;\r\n    }\r\n\r\n    /** invalidate frameBuffer to hint the postprocess to create a depth buffer */\r\n    public markTextureDirty(): void {\r\n        this.width = -1;\r\n    }\r\n\r\n    private _createRenderTargetTexture(textureSize: { width: number; height: number }, textureOptions: RenderTargetCreationOptions, channel = 0) {\r\n        for (let i = 0; i < this._textureCache.length; i++) {\r\n            if (\r\n                this._textureCache[i].texture.width === textureSize.width &&\r\n                this._textureCache[i].texture.height === textureSize.height &&\r\n                this._textureCache[i].postProcessChannel === channel &&\r\n                this._textureCache[i].texture._generateDepthBuffer === textureOptions.generateDepthBuffer &&\r\n                this._textureCache[i].texture.samples === textureOptions.samples\r\n            ) {\r\n                return this._textureCache[i].texture;\r\n            }\r\n        }\r\n\r\n        const tex = this._engine.createRenderTargetTexture(textureSize, textureOptions);\r\n        this._textureCache.push({ texture: tex, postProcessChannel: channel, lastUsedRenderId: -1 });\r\n\r\n        return tex;\r\n    }\r\n\r\n    private _flushTextureCache() {\r\n        const currentRenderId = this._renderId;\r\n\r\n        for (let i = this._textureCache.length - 1; i >= 0; i--) {\r\n            if (currentRenderId - this._textureCache[i].lastUsedRenderId > 100) {\r\n                let currentlyUsed = false;\r\n                for (let j = 0; j < this._textures.length; j++) {\r\n                    if (this._textures.data[j] === this._textureCache[i].texture) {\r\n                        currentlyUsed = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!currentlyUsed) {\r\n                    this._textureCache[i].texture.dispose();\r\n                    this._textureCache.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resizes the post-process texture\r\n     * @param width Width of the texture\r\n     * @param height Height of the texture\r\n     * @param camera The camera this post-process is applied to. Pass null if the post-process is used outside the context of a camera post-process chain (default: null)\r\n     * @param needMipMaps True if mip maps need to be generated after render (default: false)\r\n     * @param forceDepthStencil True to force post-process texture creation with stencil depth and buffer (default: false)\r\n     */\r\n    public resize(width: number, height: number, camera: Nullable<Camera> = null, needMipMaps = false, forceDepthStencil = false) {\r\n        if (this._textures.length > 0) {\r\n            this._textures.reset();\r\n        }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        let firstPP = null;\r\n        if (camera) {\r\n            for (let i = 0; i < camera._postProcesses.length; i++) {\r\n                if (camera._postProcesses[i] !== null) {\r\n                    firstPP = camera._postProcesses[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const textureSize = { width: this.width, height: this.height };\r\n        const textureOptions = {\r\n            generateMipMaps: needMipMaps,\r\n            generateDepthBuffer: forceDepthStencil || firstPP === this,\r\n            generateStencilBuffer: (forceDepthStencil || firstPP === this) && this._engine.isStencilEnable,\r\n            samplingMode: this.renderTargetSamplingMode,\r\n            type: this._textureType,\r\n            format: this._textureFormat,\r\n            samples: this._samples,\r\n            label: \"PostProcessRTT-\" + this.name,\r\n        };\r\n\r\n        this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 0));\r\n\r\n        if (this._reusable) {\r\n            this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 1));\r\n        }\r\n\r\n        this._texelSize.copyFromFloats(1.0 / this.width, 1.0 / this.height);\r\n\r\n        this.onSizeChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    private _getTarget() {\r\n        let target: RenderTargetWrapper;\r\n\r\n        if (this._shareOutputWithPostProcess) {\r\n            target = this._shareOutputWithPostProcess.inputTexture;\r\n        } else if (this._forcedOutputTexture) {\r\n            target = this._forcedOutputTexture;\r\n\r\n            this.width = this._forcedOutputTexture.width;\r\n            this.height = this._forcedOutputTexture.height;\r\n        } else {\r\n            target = this.inputTexture;\r\n\r\n            let cache;\r\n            for (let i = 0; i < this._textureCache.length; i++) {\r\n                if (this._textureCache[i].texture === target) {\r\n                    cache = this._textureCache[i];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (cache) {\r\n                cache.lastUsedRenderId = this._renderId;\r\n            }\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * Activates the post process by intializing the textures to be used when executed. Notifies onActivateObservable.\r\n     * When this post process is used in a pipeline, this is call will bind the input texture of this post process to the output of the previous.\r\n     * @param cameraOrScene The camera that will be used in the post process. This camera will be used when calling onActivateObservable. You can also pass the scene if no camera is available.\r\n     * @param sourceTexture The source texture to be inspected to get the width and height if not specified in the post process constructor. (default: null)\r\n     * @param forceDepthStencil If true, a depth and stencil buffer will be generated. (default: false)\r\n     * @returns The render target wrapper that was bound to be written to.\r\n     */\r\n    public activate(cameraOrScene: Nullable<Camera> | Scene, sourceTexture: Nullable<InternalTexture> = null, forceDepthStencil?: boolean): RenderTargetWrapper {\r\n        const camera = cameraOrScene === null || (cameraOrScene as Camera).cameraRigMode !== undefined ? (cameraOrScene as Camera) || this._camera : null;\r\n\r\n        const scene = camera?.getScene() ?? (cameraOrScene as Scene);\r\n        const engine = scene.getEngine();\r\n        const maxSize = engine.getCaps().maxTextureSize;\r\n\r\n        const requiredWidth = ((sourceTexture ? sourceTexture.width : this._engine.getRenderWidth(true)) * <number>this._options) | 0;\r\n        const requiredHeight = ((sourceTexture ? sourceTexture.height : this._engine.getRenderHeight(true)) * <number>this._options) | 0;\r\n\r\n        let desiredWidth = (<PostProcessOptions>this._options).width || requiredWidth;\r\n        let desiredHeight = (<PostProcessOptions>this._options).height || requiredHeight;\r\n\r\n        const needMipMaps =\r\n            this.renderTargetSamplingMode !== Constants.TEXTURE_NEAREST_LINEAR &&\r\n            this.renderTargetSamplingMode !== Constants.TEXTURE_NEAREST_NEAREST &&\r\n            this.renderTargetSamplingMode !== Constants.TEXTURE_LINEAR_LINEAR;\r\n\r\n        let target: Nullable<RenderTargetWrapper> = null;\r\n\r\n        if (!this._shareOutputWithPostProcess && !this._forcedOutputTexture) {\r\n            if (this.adaptScaleToCurrentViewport) {\r\n                const currentViewport = engine.currentViewport;\r\n\r\n                if (currentViewport) {\r\n                    desiredWidth *= currentViewport.width;\r\n                    desiredHeight *= currentViewport.height;\r\n                }\r\n            }\r\n\r\n            if (needMipMaps || this.alwaysForcePOT) {\r\n                if (!(<PostProcessOptions>this._options).width) {\r\n                    desiredWidth = engine.needPOTTextures ? GetExponentOfTwo(desiredWidth, maxSize, this.scaleMode) : desiredWidth;\r\n                }\r\n\r\n                if (!(<PostProcessOptions>this._options).height) {\r\n                    desiredHeight = engine.needPOTTextures ? GetExponentOfTwo(desiredHeight, maxSize, this.scaleMode) : desiredHeight;\r\n                }\r\n            }\r\n\r\n            if (this.width !== desiredWidth || this.height !== desiredHeight || !(target = this._getTarget())) {\r\n                this.resize(desiredWidth, desiredHeight, camera, needMipMaps, forceDepthStencil);\r\n            }\r\n\r\n            this._textures.forEach((texture) => {\r\n                if (texture.samples !== this.samples) {\r\n                    this._engine.updateRenderTargetTextureSampleCount(texture, this.samples);\r\n                }\r\n            });\r\n\r\n            this._flushTextureCache();\r\n            this._renderId++;\r\n        }\r\n\r\n        if (!target) {\r\n            target = this._getTarget();\r\n        }\r\n\r\n        // Bind the input of this post process to be used as the output of the previous post process.\r\n        if (this.enablePixelPerfectMode) {\r\n            this._scaleRatio.copyFromFloats(requiredWidth / desiredWidth, requiredHeight / desiredHeight);\r\n            this._engine.bindFramebuffer(target, 0, requiredWidth, requiredHeight, this.forceFullscreenViewport);\r\n        } else {\r\n            this._scaleRatio.copyFromFloats(1, 1);\r\n            this._engine.bindFramebuffer(target, 0, undefined, undefined, this.forceFullscreenViewport);\r\n        }\r\n\r\n        this._engine._debugInsertMarker?.(`post process ${this.name} input`);\r\n\r\n        this.onActivateObservable.notifyObservers(camera!);\r\n\r\n        // Clear\r\n        if (this.autoClear && (this.alphaMode === Constants.ALPHA_DISABLE || this.forceAutoClearInAlphaMode)) {\r\n            this._engine.clear(this.clearColor ? this.clearColor : scene.clearColor, scene._allowPostProcessClearColor, true, true);\r\n        }\r\n\r\n        if (this._reusable) {\r\n            this._currentRenderTextureInd = (this._currentRenderTextureInd + 1) % 2;\r\n        }\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * If the post process is supported.\r\n     */\r\n    public get isSupported(): boolean {\r\n        return this._effectWrapper.drawWrapper.effect!.isSupported;\r\n    }\r\n\r\n    /**\r\n     * The aspect ratio of the output texture.\r\n     */\r\n    public get aspectRatio(): number {\r\n        if (this._shareOutputWithPostProcess) {\r\n            return this._shareOutputWithPostProcess.aspectRatio;\r\n        }\r\n\r\n        if (this._forcedOutputTexture) {\r\n            return this._forcedOutputTexture.width / this._forcedOutputTexture.height;\r\n        }\r\n        return this.width / this.height;\r\n    }\r\n\r\n    /**\r\n     * Get a value indicating if the post-process is ready to be used\r\n     * @returns true if the post-process is ready (shader is compiled)\r\n     */\r\n    public isReady(): boolean {\r\n        return this._effectWrapper.isReady();\r\n    }\r\n\r\n    /**\r\n     * Binds all textures and uniforms to the shader, this will be run on every pass.\r\n     * @returns the effect corresponding to this post process. Null if not compiled or not ready.\r\n     */\r\n    public apply(): Nullable<Effect> {\r\n        // Check\r\n        if (!this._effectWrapper.isReady()) {\r\n            return null;\r\n        }\r\n\r\n        // States\r\n        this._engine.enableEffect(this._effectWrapper.drawWrapper);\r\n        this._engine.setState(false);\r\n        this._engine.setDepthBuffer(false);\r\n        this._engine.setDepthWrite(false);\r\n\r\n        // Alpha\r\n        if (this.alphaConstants) {\r\n            this.getEngine().setAlphaConstants(this.alphaConstants.r, this.alphaConstants.g, this.alphaConstants.b, this.alphaConstants.a);\r\n        }\r\n\r\n        this._engine.setAlphaMode(this.alphaMode);\r\n\r\n        // Bind the output texture of the preivous post process as the input to this post process.\r\n        let source: RenderTargetWrapper;\r\n        if (this._shareOutputWithPostProcess) {\r\n            source = this._shareOutputWithPostProcess.inputTexture;\r\n        } else if (this._forcedOutputTexture) {\r\n            source = this._forcedOutputTexture;\r\n        } else {\r\n            source = this.inputTexture;\r\n        }\r\n\r\n        if (!this.externalTextureSamplerBinding) {\r\n            this._effectWrapper.drawWrapper.effect!._bindTexture(\"textureSampler\", source?.texture);\r\n        }\r\n\r\n        // Parameters\r\n        this._effectWrapper.drawWrapper.effect!.setVector2(\"scale\", this._scaleRatio);\r\n        this.onApplyObservable.notifyObservers(this._effectWrapper.drawWrapper.effect!);\r\n\r\n        this._effectWrapper.bind(true);\r\n\r\n        return this._effectWrapper.drawWrapper.effect;\r\n    }\r\n\r\n    private _disposeTextures() {\r\n        if (this._shareOutputWithPostProcess || this._forcedOutputTexture) {\r\n            this._disposeTextureCache();\r\n            return;\r\n        }\r\n\r\n        this._disposeTextureCache();\r\n        this._textures.dispose();\r\n    }\r\n\r\n    private _disposeTextureCache() {\r\n        for (let i = this._textureCache.length - 1; i >= 0; i--) {\r\n            this._textureCache[i].texture.dispose();\r\n        }\r\n\r\n        this._textureCache.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * @param prePassRenderer defines the prepass renderer to setup.\r\n     * @returns true if the pre pass is needed.\r\n     */\r\n    public setPrePassRenderer(prePassRenderer: PrePassRenderer): boolean {\r\n        if (this._prePassEffectConfiguration) {\r\n            this._prePassEffectConfiguration = prePassRenderer.addEffectConfiguration(this._prePassEffectConfiguration);\r\n            this._prePassEffectConfiguration.enabled = true;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the post process.\r\n     * @param camera The camera to dispose the post process on.\r\n     */\r\n    public dispose(camera?: Camera): void {\r\n        camera = camera || this._camera;\r\n\r\n        if (!this._useExistingThinPostProcess) {\r\n            this._effectWrapper.dispose();\r\n        }\r\n\r\n        this._disposeTextures();\r\n\r\n        let index;\r\n        if (this._scene) {\r\n            index = this._scene.postProcesses.indexOf(this);\r\n            if (index !== -1) {\r\n                this._scene.postProcesses.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.postProcesses.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.postProcesses.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        index = this._engine.postProcesses.indexOf(this);\r\n        if (index !== -1) {\r\n            this._engine.postProcesses.splice(index, 1);\r\n        }\r\n\r\n        this.onDisposeObservable.notifyObservers();\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n        camera.detachPostProcess(this);\r\n\r\n        index = camera._postProcesses.indexOf(this);\r\n        if (index === 0 && camera._postProcesses.length > 0) {\r\n            const firstPostProcess = this._camera._getFirstPostProcess();\r\n            if (firstPostProcess) {\r\n                firstPostProcess.markTextureDirty();\r\n            }\r\n        }\r\n\r\n        this.onActivateObservable.clear();\r\n        this.onAfterRenderObservable.clear();\r\n        this.onApplyObservable.clear();\r\n        this.onBeforeRenderObservable.clear();\r\n        this.onSizeChangedObservable.clear();\r\n        this.onEffectCreatedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Serializes the post process to a JSON object\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        const camera = this.getCamera() || (this._scene && this._scene.activeCamera);\r\n        serializationObject.customType = \"BABYLON.\" + this.getClassName();\r\n        serializationObject.cameraId = camera ? camera.id : null;\r\n        serializationObject.reusable = this._reusable;\r\n        serializationObject.textureType = this._textureType;\r\n        serializationObject.fragmentUrl = this._fragmentUrl;\r\n        serializationObject.parameters = this._parameters;\r\n        serializationObject.samplers = this._samplers;\r\n        serializationObject.uniformBuffers = this._uniformBuffers;\r\n        serializationObject.options = this._options;\r\n        serializationObject.defines = this._postProcessDefines;\r\n        serializationObject.textureFormat = this._textureFormat;\r\n        serializationObject.vertexUrl = this._vertexUrl;\r\n        serializationObject.indexParameters = this._indexParameters;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Clones this post process\r\n     * @returns a new post process similar to this one\r\n     */\r\n    public clone(): Nullable<PostProcess> {\r\n        const serializationObject = this.serialize();\r\n        serializationObject._engine = this._engine;\r\n        serializationObject.cameraId = null;\r\n\r\n        const result = PostProcess.Parse(serializationObject, this._scene, \"\");\r\n\r\n        if (!result) {\r\n            return null;\r\n        }\r\n\r\n        result.onActivateObservable = this.onActivateObservable.clone();\r\n        result.onSizeChangedObservable = this.onSizeChangedObservable.clone();\r\n        result.onApplyObservable = this.onApplyObservable.clone();\r\n        result.onBeforeRenderObservable = this.onBeforeRenderObservable.clone();\r\n        result.onAfterRenderObservable = this.onAfterRenderObservable.clone();\r\n\r\n        result._prePassEffectConfiguration = this._prePassEffectConfiguration;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a material from parsed material data\r\n     * @param parsedPostProcess defines parsed post process data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns a new post process\r\n     */\r\n    public static Parse(parsedPostProcess: any, scene: Scene, rootUrl: string): Nullable<PostProcess> {\r\n        const postProcessType = GetClass(parsedPostProcess.customType);\r\n\r\n        if (!postProcessType || !postProcessType._Parse) {\r\n            return null;\r\n        }\r\n\r\n        const camera = scene ? scene.getCameraById(parsedPostProcess.cameraId) : null;\r\n        return postProcessType._Parse(parsedPostProcess, camera, scene, rootUrl);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Nullable<Camera>, scene: Nullable<Scene>, rootUrl: string): Nullable<PostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new PostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.fragmentUrl,\r\n                    parsedPostProcess.parameters,\r\n                    parsedPostProcess.samplers,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    parsedPostProcess._engine,\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.defines,\r\n                    parsedPostProcess.textureType,\r\n                    parsedPostProcess.vertexUrl,\r\n                    parsedPostProcess.indexParameters,\r\n                    false,\r\n                    parsedPostProcess.textureFormat\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PostProcess\", PostProcess);\r\n", "import type { Nullable } from \"../types\";\r\nimport { PrecisionDate } from \"./precisionDate\";\r\n\r\n/**\r\n * Performance monitor tracks rolling average frame-time and frame-time variance over a user defined sliding-window\r\n */\r\nexport class PerformanceMonitor {\r\n    private _enabled: boolean = true;\r\n    private _rollingFrameTime: RollingAverage;\r\n    private _lastFrameTimeMs: Nullable<number>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param frameSampleSize The number of samples required to saturate the sliding window\r\n     */\r\n    constructor(frameSampleSize: number = 30) {\r\n        this._rollingFrameTime = new RollingAverage(frameSampleSize);\r\n    }\r\n\r\n    /**\r\n     * Samples current frame\r\n     * @param timeMs A timestamp in milliseconds of the current frame to compare with other frames\r\n     */\r\n    public sampleFrame(timeMs: number = PrecisionDate.Now) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        if (this._lastFrameTimeMs != null) {\r\n            const dt = timeMs - this._lastFrameTimeMs;\r\n            this._rollingFrameTime.add(dt);\r\n        }\r\n\r\n        this._lastFrameTimeMs = timeMs;\r\n    }\r\n\r\n    /**\r\n     * Returns the average frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFrameTime(): number {\r\n        return this._rollingFrameTime.average;\r\n    }\r\n\r\n    /**\r\n     * Returns the variance frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFrameTimeVariance(): number {\r\n        return this._rollingFrameTime.variance;\r\n    }\r\n\r\n    /**\r\n     * Returns the frame time of the most recent frame\r\n     */\r\n    public get instantaneousFrameTime(): number {\r\n        return this._rollingFrameTime.history(0);\r\n    }\r\n\r\n    /**\r\n     * Returns the average framerate in frames per second over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFPS(): number {\r\n        return 1000.0 / this._rollingFrameTime.average;\r\n    }\r\n\r\n    /**\r\n     * Returns the average framerate in frames per second using the most recent frame time\r\n     */\r\n    public get instantaneousFPS(): number {\r\n        const history = this._rollingFrameTime.history(0);\r\n\r\n        if (history === 0) {\r\n            return 0;\r\n        }\r\n\r\n        return 1000.0 / history;\r\n    }\r\n\r\n    /**\r\n     * Returns true if enough samples have been taken to completely fill the sliding window\r\n     */\r\n    public get isSaturated(): boolean {\r\n        return this._rollingFrameTime.isSaturated();\r\n    }\r\n\r\n    /**\r\n     * Enables contributions to the sliding window sample set\r\n     */\r\n    public enable() {\r\n        this._enabled = true;\r\n    }\r\n\r\n    /**\r\n     * Disables contributions to the sliding window sample set\r\n     * Samples will not be interpolated over the disabled period\r\n     */\r\n    public disable() {\r\n        this._enabled = false;\r\n        //clear last sample to avoid interpolating over the disabled period when next enabled\r\n        this._lastFrameTimeMs = null;\r\n    }\r\n\r\n    /**\r\n     * Returns true if sampling is enabled\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Resets performance monitor\r\n     */\r\n    public reset() {\r\n        //clear last sample to avoid interpolating over the disabled period when next enabled\r\n        this._lastFrameTimeMs = null;\r\n        //wipe record\r\n        this._rollingFrameTime.reset();\r\n    }\r\n}\r\n\r\n/**\r\n * RollingAverage\r\n *\r\n * Utility to efficiently compute the rolling average and variance over a sliding window of samples\r\n */\r\nexport class RollingAverage {\r\n    /**\r\n     * Current average\r\n     */\r\n    public average: number;\r\n    /**\r\n     * Current variance\r\n     */\r\n    public variance: number;\r\n\r\n    protected _samples: Array<number>;\r\n    protected _sampleCount: number;\r\n    protected _pos: number;\r\n    protected _m2: number; //sum of squares of differences from the (current) mean\r\n\r\n    /**\r\n     * constructor\r\n     * @param length The number of samples required to saturate the sliding window\r\n     */\r\n    constructor(length: number) {\r\n        this._samples = new Array<number>(length);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Adds a sample to the sample set\r\n     * @param v The sample value\r\n     */\r\n    public add(v: number) {\r\n        //http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\r\n        let delta: number;\r\n\r\n        //we need to check if we've already wrapped round\r\n        if (this.isSaturated()) {\r\n            //remove bottom of stack from mean\r\n            const bottomValue = this._samples[this._pos];\r\n            delta = bottomValue - this.average;\r\n            this.average -= delta / (this._sampleCount - 1);\r\n            this._m2 -= delta * (bottomValue - this.average);\r\n        } else {\r\n            this._sampleCount++;\r\n        }\r\n\r\n        //add new value to mean\r\n        delta = v - this.average;\r\n        this.average += delta / this._sampleCount;\r\n        this._m2 += delta * (v - this.average);\r\n\r\n        //set the new variance\r\n        this.variance = this._m2 / (this._sampleCount - 1);\r\n\r\n        this._samples[this._pos] = v;\r\n        this._pos++;\r\n\r\n        this._pos %= this._samples.length; //positive wrap around\r\n    }\r\n\r\n    /**\r\n     * Returns previously added values or null if outside of history or outside the sliding window domain\r\n     * @param i Index in history. For example, pass 0 for the most recent value and 1 for the value before that\r\n     * @returns Value previously recorded with add() or null if outside of range\r\n     */\r\n    public history(i: number): number {\r\n        if (i >= this._sampleCount || i >= this._samples.length) {\r\n            return 0;\r\n        }\r\n\r\n        const i0 = this._wrapPosition(this._pos - 1.0);\r\n        return this._samples[this._wrapPosition(i0 - i)];\r\n    }\r\n\r\n    /**\r\n     * Returns true if enough samples have been taken to completely fill the sliding window\r\n     * @returns true if sample-set saturated\r\n     */\r\n    public isSaturated(): boolean {\r\n        return this._sampleCount >= this._samples.length;\r\n    }\r\n\r\n    /**\r\n     * Resets the rolling average (equivalent to 0 samples taken so far)\r\n     */\r\n    public reset() {\r\n        this.average = 0;\r\n        this.variance = 0;\r\n        this._sampleCount = 0;\r\n        this._pos = 0;\r\n        this._m2 = 0;\r\n    }\r\n\r\n    /**\r\n     * Wraps a value around the sample range boundaries\r\n     * @param i Position in sample range, for example if the sample length is 5, and i is -3, then 2 will be returned.\r\n     * @returns Wrapped position in sample range\r\n     */\r\n    protected _wrapPosition(i: number): number {\r\n        const max = this._samples.length;\r\n        return ((i % max) + max) % max;\r\n    }\r\n}\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /** @internal */\r\n        _readTexturePixels(\r\n            texture: InternalTexture,\r\n            width: number,\r\n            height: number,\r\n            faceIndex?: number,\r\n            level?: number,\r\n            buffer?: Nullable<ArrayBufferView>,\r\n            flushRenderer?: boolean,\r\n            noDataConversion?: boolean,\r\n            x?: number,\r\n            y?: number\r\n        ): Promise<ArrayBufferView>;\r\n\r\n        /** @internal */\r\n        _readTexturePixelsSync(\r\n            texture: InternalTexture,\r\n            width: number,\r\n            height: number,\r\n            faceIndex?: number,\r\n            level?: number,\r\n            buffer?: Nullable<ArrayBufferView>,\r\n            flushRenderer?: boolean,\r\n            noDataConversion?: boolean,\r\n            x?: number,\r\n            y?: number\r\n        ): ArrayBufferView;\r\n    }\r\n}\r\n\r\n// back-compat\r\nimport { allocateAndCopyTypedBuffer } from \"../../Engines/abstractEngine.functions\";\r\nexport { allocateAndCopyTypedBuffer };\r\n\r\nThinEngine.prototype._readTexturePixelsSync = function (\r\n    texture: InternalTexture,\r\n    width: number,\r\n    height: number,\r\n    faceIndex = -1,\r\n    level = 0,\r\n    buffer: Nullable<ArrayBufferView> = null,\r\n    flushRenderer = true,\r\n    noDataConversion = false,\r\n    x = 0,\r\n    y = 0\r\n): ArrayBufferView {\r\n    const gl = this._gl;\r\n    if (!gl) {\r\n        throw new Error(\"Engine does not have gl rendering context.\");\r\n    }\r\n    if (!this._dummyFramebuffer) {\r\n        const dummy = gl.createFramebuffer();\r\n\r\n        if (!dummy) {\r\n            throw new Error(\"Unable to create dummy framebuffer\");\r\n        }\r\n\r\n        this._dummyFramebuffer = dummy;\r\n    }\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._dummyFramebuffer);\r\n\r\n    if (faceIndex > -1) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, texture._hardwareTexture?.underlyingResource, level);\r\n    } else {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture?.underlyingResource, level);\r\n    }\r\n\r\n    let readType = texture.type !== undefined ? this._getWebGLTextureType(texture.type) : gl.UNSIGNED_BYTE;\r\n\r\n    if (!noDataConversion) {\r\n        switch (readType) {\r\n            case gl.UNSIGNED_BYTE:\r\n                if (!buffer) {\r\n                    buffer = new Uint8Array(4 * width * height);\r\n                }\r\n                readType = gl.UNSIGNED_BYTE;\r\n                break;\r\n            default:\r\n                if (!buffer) {\r\n                    buffer = new Float32Array(4 * width * height);\r\n                }\r\n                readType = gl.FLOAT;\r\n                break;\r\n        }\r\n    } else if (!buffer) {\r\n        buffer = allocateAndCopyTypedBuffer(texture.type, 4 * width * height);\r\n    }\r\n\r\n    if (flushRenderer) {\r\n        this.flushFramebuffer();\r\n    }\r\n\r\n    gl.readPixels(x, y, width, height, gl.RGBA, readType, <DataView>buffer);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._currentFramebuffer);\r\n\r\n    return buffer;\r\n};\r\n\r\nThinEngine.prototype._readTexturePixels = function (\r\n    texture: InternalTexture,\r\n    width: number,\r\n    height: number,\r\n    faceIndex = -1,\r\n    level = 0,\r\n    buffer: Nullable<ArrayBufferView> = null,\r\n    flushRenderer = true,\r\n    noDataConversion = false,\r\n    x = 0,\r\n    y = 0\r\n): Promise<ArrayBufferView> {\r\n    return Promise.resolve(this._readTexturePixelsSync(texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y));\r\n};\r\n", "import type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { InternalTextureSource } from \"../Materials/Textures/internalTexture\";\r\nimport type { RenderTargetCreationOptions, TextureSize } from \"../Materials/Textures/textureCreationOptions\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Constants } from \"./constants\";\r\nimport type { AbstractEngine } from \"./abstractEngine\";\r\nimport type { IMultiRenderTargetOptions } from \"../Materials/Textures/multiRenderTarget\";\r\nimport { HasStencilAspect } from \"core/Materials/Textures/textureHelper.functions\";\r\n\r\n/**\r\n * An interface enforcing the renderTarget accessor to used by render target textures.\r\n */\r\nexport interface IRenderTargetTexture {\r\n    /**\r\n     * Entry point to access the wrapper on a texture.\r\n     */\r\n    renderTarget: Nullable<RenderTargetWrapper>;\r\n}\r\n\r\n/**\r\n * Wrapper around a render target (either single or multi textures)\r\n */\r\nexport class RenderTargetWrapper {\r\n    protected _engine: AbstractEngine;\r\n    private _size: TextureSize;\r\n    private _isCube: boolean;\r\n    private _isMulti: boolean;\r\n    private _textures: Nullable<InternalTexture[]> = null;\r\n    private _faceIndices: Nullable<number[]> = null;\r\n    private _layerIndices: Nullable<number[]> = null;\r\n    private _depthStencilTextureLabel?: string;\r\n    /** @internal */\r\n    public _samples = 1;\r\n\r\n    /** @internal */\r\n    public _attachments: Nullable<number[]> = null;\r\n    /** @internal */\r\n    public _generateStencilBuffer: boolean = false;\r\n    /** @internal */\r\n    public _generateDepthBuffer: boolean = false;\r\n\r\n    /** @internal */\r\n    public _depthStencilTexture: Nullable<InternalTexture>;\r\n    /** @internal */\r\n    public _depthStencilTextureWithStencil: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets the label of the render target wrapper (optional, for debugging purpose)\r\n     */\r\n    public label?: string;\r\n\r\n    /**\r\n     * Gets the depth/stencil texture\r\n     */\r\n    public get depthStencilTexture() {\r\n        return this._depthStencilTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the depth/stencil texture\r\n     * @param texture The depth/stencil texture to set\r\n     * @param disposeExisting True to dispose the existing depth/stencil texture (if any) before replacing it (default: true)\r\n     */\r\n    public setDepthStencilTexture(texture: Nullable<InternalTexture>, disposeExisting = true) {\r\n        if (disposeExisting && this._depthStencilTexture) {\r\n            this._depthStencilTexture.dispose();\r\n        }\r\n\r\n        this._depthStencilTexture = texture;\r\n\r\n        this._generateDepthBuffer = this._generateStencilBuffer = this._depthStencilTextureWithStencil = false;\r\n\r\n        if (texture) {\r\n            this._generateDepthBuffer = true;\r\n            this._generateStencilBuffer = this._depthStencilTextureWithStencil = HasStencilAspect(texture.format);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if the depth/stencil texture has a stencil aspect\r\n     */\r\n    public get depthStencilTextureWithStencil() {\r\n        return this._depthStencilTextureWithStencil;\r\n    }\r\n\r\n    /**\r\n     * Defines if the render target wrapper is for a cube texture or if false a 2d texture\r\n     */\r\n    public get isCube(): boolean {\r\n        return this._isCube;\r\n    }\r\n\r\n    /**\r\n     * Defines if the render target wrapper is for a single or multi target render wrapper\r\n     */\r\n    public get isMulti(): boolean {\r\n        return this._isMulti;\r\n    }\r\n\r\n    /**\r\n     * Defines if the render target wrapper is for a single or an array of textures\r\n     */\r\n    public get is2DArray(): boolean {\r\n        return this.layers > 0;\r\n    }\r\n\r\n    /**\r\n     * Defines if the render target wrapper is for a 3D texture\r\n     */\r\n    public get is3D(): boolean {\r\n        return this.depth > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the size of the render target wrapper (used for cubes, as width=height in this case)\r\n     */\r\n    public get size(): number {\r\n        return this.width;\r\n    }\r\n\r\n    /**\r\n     * Gets the width of the render target wrapper\r\n     */\r\n    public get width(): number {\r\n        return (<{ width: number; height: number }>this._size).width ?? <number>this._size;\r\n    }\r\n\r\n    /**\r\n     * Gets the height of the render target wrapper\r\n     */\r\n    public get height(): number {\r\n        return (<{ width: number; height: number }>this._size).height ?? <number>this._size;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of layers of the render target wrapper (only used if is2DArray is true and wrapper is not a multi render target)\r\n     */\r\n    public get layers(): number {\r\n        return (<{ width: number; height: number; depth?: number; layers?: number }>this._size).layers || 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the depth of the render target wrapper (only used if is3D is true and wrapper is not a multi render target)\r\n     */\r\n    public get depth(): number {\r\n        return (<{ width: number; height: number; depth?: number; layers?: number }>this._size).depth || 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the render texture. If this is a multi render target, gets the first texture\r\n     */\r\n    public get texture(): Nullable<InternalTexture> {\r\n        return this._textures?.[0] ?? null;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of render textures. If we are not in a multi render target, the list will be null (use the texture getter instead)\r\n     */\r\n    public get textures(): Nullable<InternalTexture[]> {\r\n        return this._textures;\r\n    }\r\n\r\n    /**\r\n     * Gets the face indices that correspond to the list of render textures. If we are not in a multi render target, the list will be null\r\n     */\r\n    public get faceIndices(): Nullable<number[]> {\r\n        return this._faceIndices;\r\n    }\r\n\r\n    /**\r\n     * Gets the layer indices that correspond to the list of render textures. If we are not in a multi render target, the list will be null\r\n     */\r\n    public get layerIndices(): Nullable<number[]> {\r\n        return this._layerIndices;\r\n    }\r\n\r\n    /**\r\n     * Sets this property to true to disable the automatic MSAA resolve that happens when the render target wrapper is unbound (default is false)\r\n     */\r\n    public disableAutomaticMSAAResolve = false;\r\n\r\n    /**\r\n     * Indicates if MSAA color texture(s) should be resolved when a resolve occur (either automatically by the engine or manually by the user) (default is true)\r\n     * Note that you can trigger a MSAA resolve at any time by calling resolveMSAATextures()\r\n     */\r\n    public resolveMSAAColors = true;\r\n\r\n    /**\r\n     * Indicates if MSAA depth texture should be resolved when a resolve occur (either automatically by the engine or manually by the user) (default is false)\r\n     */\r\n    public resolveMSAADepth = false;\r\n\r\n    /**\r\n     * Indicates if MSAA stencil texture should be resolved when a resolve occur (either automatically by the engine or manually by the user) (default is false)\r\n     */\r\n    public resolveMSAAStencil = false;\r\n\r\n    /**\r\n     * Gets the base array layer of a texture in the textures array\r\n     * This is an number that is calculated based on the layer and face indices set for this texture at that index\r\n     * @param index The index of the texture in the textures array to get the base array layer for\r\n     * @returns the base array layer of the texture at the given index\r\n     */\r\n    public getBaseArrayLayer(index: number): number {\r\n        if (!this._textures) {\r\n            return -1;\r\n        }\r\n\r\n        const texture = this._textures[index];\r\n        const layerIndex = this._layerIndices?.[index] ?? 0;\r\n        const faceIndex = this._faceIndices?.[index] ?? 0;\r\n\r\n        return texture.isCube ? layerIndex * 6 + faceIndex : texture.is3D ? 0 : layerIndex;\r\n    }\r\n\r\n    /**\r\n     * Gets the sample count of the render target\r\n     */\r\n    public get samples(): number {\r\n        return this._samples;\r\n    }\r\n\r\n    /**\r\n     * Sets the sample count of the render target\r\n     * @param value sample count\r\n     * @param initializeBuffers If set to true, the engine will make an initializing call to drawBuffers (only used when isMulti=true).\r\n     * @param force true to force calling the update sample count engine function even if the current sample count is equal to value\r\n     * @returns the sample count that has been set\r\n     */\r\n    public setSamples(value: number, initializeBuffers = true, force = false): number {\r\n        if (this.samples === value && !force) {\r\n            return value;\r\n        }\r\n\r\n        const result = this._isMulti\r\n            ? this._engine.updateMultipleRenderTargetTextureSampleCount(this, value, initializeBuffers)\r\n            : this._engine.updateRenderTargetTextureSampleCount(this, value);\r\n        this._samples = value;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Resolves the MSAA textures into their non-MSAA version.\r\n     * Note that if samples equals 1 (no MSAA), no resolve is performed.\r\n     */\r\n    public resolveMSAATextures(): void {\r\n        if (this.isMulti) {\r\n            this._engine.resolveMultiFramebuffer(this);\r\n        } else {\r\n            this._engine.resolveFramebuffer(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates mipmaps for each texture of the render target\r\n     */\r\n    public generateMipMaps(): void {\r\n        if (this._engine._currentRenderTarget === this) {\r\n            this._engine.unBindFramebuffer(this, true);\r\n        }\r\n        if (this.isMulti) {\r\n            this._engine.generateMipMapsMultiFramebuffer(this);\r\n        } else {\r\n            this._engine.generateMipMapsFramebuffer(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the render target wrapper\r\n     * @param isMulti true if the wrapper is a multi render target\r\n     * @param isCube true if the wrapper should render to a cube texture\r\n     * @param size size of the render target (width/height/layers)\r\n     * @param engine engine used to create the render target\r\n     * @param label defines the label to use for the wrapper (for debugging purpose only)\r\n     */\r\n    constructor(isMulti: boolean, isCube: boolean, size: TextureSize, engine: AbstractEngine, label?: string) {\r\n        this._isMulti = isMulti;\r\n        this._isCube = isCube;\r\n        this._size = size;\r\n        this._engine = engine;\r\n        this._depthStencilTexture = null;\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * Sets the render target texture(s)\r\n     * @param textures texture(s) to set\r\n     */\r\n    public setTextures(textures: Nullable<InternalTexture> | Nullable<InternalTexture[]>): void {\r\n        if (Array.isArray(textures)) {\r\n            this._textures = textures;\r\n        } else if (textures) {\r\n            this._textures = [textures];\r\n        } else {\r\n            this._textures = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the textures array\r\n     * @param texture The texture to set\r\n     * @param index The index in the textures array to set\r\n     * @param disposePrevious If this function should dispose the previous texture\r\n     */\r\n    public setTexture(texture: InternalTexture, index: number = 0, disposePrevious: boolean = true): void {\r\n        if (!this._textures) {\r\n            this._textures = [];\r\n        }\r\n        if (this._textures[index] === texture) {\r\n            return;\r\n        }\r\n\r\n        if (this._textures[index] && disposePrevious) {\r\n            this._textures[index].dispose();\r\n        }\r\n\r\n        this._textures[index] = texture;\r\n    }\r\n\r\n    /**\r\n     * Sets the layer and face indices of every render target texture bound to each color attachment\r\n     * @param layers The layers of each texture to be set\r\n     * @param faces The faces of each texture to be set\r\n     */\r\n    public setLayerAndFaceIndices(layers: number[], faces: number[]) {\r\n        this._layerIndices = layers;\r\n        this._faceIndices = faces;\r\n    }\r\n\r\n    /**\r\n     * Sets the layer and face indices of a texture in the textures array that should be bound to each color attachment\r\n     * @param index The index of the texture in the textures array to modify\r\n     * @param layer The layer of the texture to be set\r\n     * @param face The face of the texture to be set\r\n     */\r\n    public setLayerAndFaceIndex(index: number = 0, layer?: number, face?: number): void {\r\n        if (!this._layerIndices) {\r\n            this._layerIndices = [];\r\n        }\r\n        if (!this._faceIndices) {\r\n            this._faceIndices = [];\r\n        }\r\n\r\n        if (layer !== undefined && layer >= 0) {\r\n            this._layerIndices[index] = layer;\r\n        }\r\n        if (face !== undefined && face >= 0) {\r\n            this._faceIndices[index] = face;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the depth/stencil texture\r\n     * @param comparisonFunction Comparison function to use for the texture\r\n     * @param bilinearFiltering true if bilinear filtering should be used when sampling the texture\r\n     * @param generateStencil Not used anymore. \"format\" will be used to determine if stencil should be created\r\n     * @param samples sample count to use when creating the texture (default: 1)\r\n     * @param format format of the depth texture (default: Constants.TEXTUREFORMAT_DEPTH32_FLOAT)\r\n     * @param label defines the label to use for the texture (for debugging purpose only)\r\n     * @returns the depth/stencil created texture\r\n     */\r\n    public createDepthStencilTexture(\r\n        comparisonFunction: number = 0,\r\n        bilinearFiltering: boolean = true,\r\n        generateStencil: boolean = false,\r\n        samples: number = 1,\r\n        format: number = Constants.TEXTUREFORMAT_DEPTH32_FLOAT,\r\n        label?: string\r\n    ): InternalTexture {\r\n        this._depthStencilTexture?.dispose();\r\n\r\n        this._depthStencilTextureWithStencil = generateStencil;\r\n        this._depthStencilTextureLabel = label;\r\n        this._depthStencilTexture = this._engine.createDepthStencilTexture(\r\n            this._size,\r\n            {\r\n                bilinearFiltering,\r\n                comparisonFunction,\r\n                generateStencil,\r\n                isCube: this._isCube,\r\n                samples,\r\n                depthTextureFormat: format,\r\n                label,\r\n            },\r\n            this\r\n        );\r\n\r\n        return this._depthStencilTexture;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use shareDepth instead\r\n     * @param renderTarget Destination renderTarget\r\n     */\r\n    public _shareDepth(renderTarget: RenderTargetWrapper): void {\r\n        this.shareDepth(renderTarget);\r\n    }\r\n\r\n    /**\r\n     * Shares the depth buffer of this render target with another render target.\r\n     * @param renderTarget Destination renderTarget\r\n     */\r\n    public shareDepth(renderTarget: RenderTargetWrapper): void {\r\n        if (this._depthStencilTexture) {\r\n            if (renderTarget._depthStencilTexture) {\r\n                renderTarget._depthStencilTexture.dispose();\r\n            }\r\n\r\n            renderTarget._depthStencilTexture = this._depthStencilTexture;\r\n            renderTarget._depthStencilTextureWithStencil = this._depthStencilTextureWithStencil;\r\n            this._depthStencilTexture.incrementReferences();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _swapAndDie(target: InternalTexture): void {\r\n        if (this.texture) {\r\n            this.texture._swapAndDie(target);\r\n        }\r\n        this._textures = null;\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected _cloneRenderTargetWrapper(): Nullable<RenderTargetWrapper> {\r\n        let rtw: Nullable<RenderTargetWrapper> = null;\r\n\r\n        if (this._isMulti) {\r\n            const textureArray = this.textures;\r\n            if (textureArray && textureArray.length > 0) {\r\n                let generateDepthTexture = false;\r\n                let textureCount = textureArray.length;\r\n                let depthTextureFormat = -1;\r\n\r\n                const lastTextureSource = textureArray[textureArray.length - 1]._source;\r\n                if (lastTextureSource === InternalTextureSource.Depth || lastTextureSource === InternalTextureSource.DepthStencil) {\r\n                    generateDepthTexture = true;\r\n                    depthTextureFormat = textureArray[textureArray.length - 1].format;\r\n                    textureCount--;\r\n                }\r\n\r\n                const samplingModes: number[] = [];\r\n                const types: number[] = [];\r\n                const formats: number[] = [];\r\n                const targetTypes: number[] = [];\r\n                const faceIndex: number[] = [];\r\n                const layerIndex: number[] = [];\r\n                const layerCounts: number[] = [];\r\n                const internalTexture2Index: { [id: number]: number } = {};\r\n\r\n                for (let i = 0; i < textureCount; ++i) {\r\n                    const texture = textureArray[i];\r\n\r\n                    samplingModes.push(texture.samplingMode);\r\n                    types.push(texture.type);\r\n                    formats.push(texture.format);\r\n\r\n                    const index = internalTexture2Index[texture.uniqueId];\r\n                    if (index !== undefined) {\r\n                        targetTypes.push(-1);\r\n                        layerCounts.push(0);\r\n                    } else {\r\n                        internalTexture2Index[texture.uniqueId] = i;\r\n                        if (texture.is2DArray) {\r\n                            targetTypes.push(Constants.TEXTURE_2D_ARRAY);\r\n                            layerCounts.push(texture.depth);\r\n                        } else if (texture.isCube) {\r\n                            targetTypes.push(Constants.TEXTURE_CUBE_MAP);\r\n                            layerCounts.push(0);\r\n                        } /*else if (texture.isCubeArray) {\r\n                            targetTypes.push(Constants.TEXTURE_CUBE_MAP_ARRAY);\r\n                            layerCounts.push(texture.depth);\r\n                        }*/ else if (texture.is3D) {\r\n                            targetTypes.push(Constants.TEXTURE_3D);\r\n                            layerCounts.push(texture.depth);\r\n                        } else {\r\n                            targetTypes.push(Constants.TEXTURE_2D);\r\n                            layerCounts.push(0);\r\n                        }\r\n                    }\r\n\r\n                    if (this._faceIndices) {\r\n                        faceIndex.push(this._faceIndices[i] ?? 0);\r\n                    }\r\n                    if (this._layerIndices) {\r\n                        layerIndex.push(this._layerIndices[i] ?? 0);\r\n                    }\r\n                }\r\n\r\n                const optionsMRT: IMultiRenderTargetOptions = {\r\n                    samplingModes,\r\n                    generateMipMaps: textureArray[0].generateMipMaps,\r\n                    generateDepthBuffer: this._generateDepthBuffer,\r\n                    generateStencilBuffer: this._generateStencilBuffer,\r\n                    generateDepthTexture,\r\n                    depthTextureFormat,\r\n                    types,\r\n                    formats,\r\n                    textureCount,\r\n                    targetTypes,\r\n                    faceIndex,\r\n                    layerIndex,\r\n                    layerCounts,\r\n                    label: this.label,\r\n                };\r\n                const size = {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                    depth: this.depth,\r\n                };\r\n\r\n                rtw = this._engine.createMultipleRenderTarget(size, optionsMRT);\r\n\r\n                for (let i = 0; i < textureCount; ++i) {\r\n                    if (targetTypes[i] !== -1) {\r\n                        continue;\r\n                    }\r\n                    const index = internalTexture2Index[textureArray[i].uniqueId];\r\n                    rtw.setTexture(rtw.textures![index], i);\r\n                }\r\n            }\r\n        } else {\r\n            const options: RenderTargetCreationOptions = {};\r\n\r\n            options.generateDepthBuffer = this._generateDepthBuffer;\r\n            options.generateMipMaps = this.texture?.generateMipMaps ?? false;\r\n            options.generateStencilBuffer = this._generateStencilBuffer;\r\n            options.samplingMode = this.texture?.samplingMode;\r\n            options.type = this.texture?.type;\r\n            options.format = this.texture?.format;\r\n            options.noColorAttachment = !this._textures;\r\n            options.label = this.label;\r\n\r\n            if (this.isCube) {\r\n                rtw = this._engine.createRenderTargetCubeTexture(this.width, options);\r\n            } else {\r\n                const size = {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                    layers: this.is2DArray || this.is3D ? this.texture?.depth : undefined,\r\n                };\r\n\r\n                rtw = this._engine.createRenderTargetTexture(size, options);\r\n            }\r\n            if (rtw.texture) {\r\n                rtw.texture!.isReady = true;\r\n            }\r\n        }\r\n\r\n        return rtw;\r\n    }\r\n\r\n    protected _swapRenderTargetWrapper(target: RenderTargetWrapper): void {\r\n        if (this._textures && target._textures) {\r\n            for (let i = 0; i < this._textures.length; ++i) {\r\n                this._textures[i]._swapAndDie(target._textures[i], false);\r\n                target._textures[i].isReady = true;\r\n            }\r\n        }\r\n        if (this._depthStencilTexture && target._depthStencilTexture) {\r\n            this._depthStencilTexture._swapAndDie(target._depthStencilTexture);\r\n            target._depthStencilTexture.isReady = true;\r\n        }\r\n\r\n        this._textures = null;\r\n        this._depthStencilTexture = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        const rtw = this._cloneRenderTargetWrapper();\r\n        if (!rtw) {\r\n            return;\r\n        }\r\n\r\n        if (this._depthStencilTexture) {\r\n            const samplingMode = this._depthStencilTexture.samplingMode;\r\n            const format = this._depthStencilTexture.format;\r\n            const bilinear =\r\n                samplingMode === Constants.TEXTURE_BILINEAR_SAMPLINGMODE ||\r\n                samplingMode === Constants.TEXTURE_TRILINEAR_SAMPLINGMODE ||\r\n                samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST;\r\n\r\n            rtw.createDepthStencilTexture(\r\n                this._depthStencilTexture._comparisonFunction,\r\n                bilinear,\r\n                this._depthStencilTextureWithStencil,\r\n                this._depthStencilTexture.samples,\r\n                format,\r\n                this._depthStencilTextureLabel\r\n            );\r\n        }\r\n\r\n        if (this.samples > 1) {\r\n            rtw.setSamples(this.samples);\r\n        }\r\n\r\n        rtw._swapRenderTargetWrapper(this);\r\n        rtw.dispose();\r\n    }\r\n\r\n    /**\r\n     * Releases the internal render textures\r\n     */\r\n    public releaseTextures(): void {\r\n        if (this._textures) {\r\n            for (let i = 0; i < this._textures.length; ++i) {\r\n                this._textures[i].dispose();\r\n            }\r\n        }\r\n        this._textures = null;\r\n    }\r\n\r\n    /**\r\n     * Disposes the whole render target wrapper\r\n     * @param disposeOnlyFramebuffers true if only the frame buffers should be released (used for the WebGL engine). If false, all the textures will also be released\r\n     */\r\n    public dispose(disposeOnlyFramebuffers = false): void {\r\n        if (!disposeOnlyFramebuffers) {\r\n            this._depthStencilTexture?.dispose();\r\n            this._depthStencilTexture = null;\r\n            this.releaseTextures();\r\n        }\r\n\r\n        this._engine._releaseRenderTargetWrapper(this);\r\n    }\r\n}\r\n", "import { IsDocumentAvailable } from \"../Misc/domManagement\";\r\nimport type { Nullable } from \"../types\";\r\nimport { AbstractEngine } from \"./abstractEngine\";\r\nimport type { AbstractEngineOptions } from \"./abstractEngine\";\r\nimport { EngineStore } from \"./engineStore\";\r\n\r\n/** @internal */\r\nfunction _DisableTouchAction(canvas: Nullable<HTMLCanvasElement>): void {\r\n    if (!canvas || !canvas.setAttribute) {\r\n        return;\r\n    }\r\n\r\n    canvas.setAttribute(\"touch-action\", \"none\");\r\n    canvas.style.touchAction = \"none\";\r\n    (canvas.style as any).webkitTapHighlightColor = \"transparent\";\r\n}\r\n\r\n/** @internal */\r\nexport function _CommonInit(commonEngine: AbstractEngine, canvas: HTMLCanvasElement, creationOptions: AbstractEngineOptions) {\r\n    commonEngine._onCanvasFocus = () => {\r\n        commonEngine.onCanvasFocusObservable.notifyObservers(commonEngine);\r\n    };\r\n\r\n    commonEngine._onCanvasBlur = () => {\r\n        commonEngine.onCanvasBlurObservable.notifyObservers(commonEngine);\r\n    };\r\n\r\n    commonEngine._onCanvasContextMenu = (evt: Event) => {\r\n        if (commonEngine.disableContextMenu) {\r\n            evt.preventDefault();\r\n        }\r\n    };\r\n\r\n    canvas.addEventListener(\"focus\", commonEngine._onCanvasFocus);\r\n    canvas.addEventListener(\"blur\", commonEngine._onCanvasBlur);\r\n    canvas.addEventListener(\"contextmenu\", commonEngine._onCanvasContextMenu);\r\n\r\n    commonEngine._onBlur = () => {\r\n        if (commonEngine.disablePerformanceMonitorInBackground) {\r\n            commonEngine.performanceMonitor.disable();\r\n        }\r\n        commonEngine._windowIsBackground = true;\r\n    };\r\n\r\n    commonEngine._onFocus = () => {\r\n        if (commonEngine.disablePerformanceMonitorInBackground) {\r\n            commonEngine.performanceMonitor.enable();\r\n        }\r\n        commonEngine._windowIsBackground = false;\r\n    };\r\n\r\n    commonEngine._onCanvasPointerOut = (ev) => {\r\n        // Check that the element at the point of the pointer out isn't the canvas and if it isn't, notify observers\r\n        // Note: This is a workaround for a bug with Safari\r\n        if (document.elementFromPoint(ev.clientX, ev.clientY) !== canvas) {\r\n            commonEngine.onCanvasPointerOutObservable.notifyObservers(ev);\r\n        }\r\n    };\r\n\r\n    const hostWindow = commonEngine.getHostWindow(); // it calls IsWindowObjectExist()\r\n    if (hostWindow && typeof hostWindow.addEventListener === \"function\") {\r\n        hostWindow.addEventListener(\"blur\", commonEngine._onBlur);\r\n        hostWindow.addEventListener(\"focus\", commonEngine._onFocus);\r\n    }\r\n\r\n    canvas.addEventListener(\"pointerout\", commonEngine._onCanvasPointerOut);\r\n\r\n    if (!creationOptions.doNotHandleTouchAction) {\r\n        _DisableTouchAction(canvas);\r\n    }\r\n\r\n    // Create Audio Engine if needed.\r\n    if (!AbstractEngine.audioEngine && creationOptions.audioEngine && AbstractEngine.AudioEngineFactory) {\r\n        AbstractEngine.audioEngine = AbstractEngine.AudioEngineFactory(commonEngine.getRenderingCanvas(), commonEngine.getAudioContext(), commonEngine.getAudioDestination());\r\n    }\r\n\r\n    if (IsDocumentAvailable()) {\r\n        // Fullscreen\r\n        commonEngine._onFullscreenChange = () => {\r\n            commonEngine.isFullscreen = !!document.fullscreenElement;\r\n\r\n            // Pointer lock\r\n            if (commonEngine.isFullscreen && commonEngine._pointerLockRequested && canvas) {\r\n                RequestPointerlock(canvas);\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"fullscreenchange\", commonEngine._onFullscreenChange, false);\r\n        document.addEventListener(\"webkitfullscreenchange\", commonEngine._onFullscreenChange, false);\r\n\r\n        // Pointer lock\r\n        commonEngine._onPointerLockChange = () => {\r\n            commonEngine.isPointerLock = document.pointerLockElement === canvas;\r\n        };\r\n\r\n        document.addEventListener(\"pointerlockchange\", commonEngine._onPointerLockChange, false);\r\n        document.addEventListener(\"webkitpointerlockchange\", commonEngine._onPointerLockChange, false);\r\n    }\r\n\r\n    commonEngine.enableOfflineSupport = AbstractEngine.OfflineProviderFactory !== undefined;\r\n\r\n    commonEngine._deterministicLockstep = !!creationOptions.deterministicLockstep;\r\n    commonEngine._lockstepMaxSteps = creationOptions.lockstepMaxSteps || 0;\r\n    commonEngine._timeStep = creationOptions.timeStep || 1 / 60;\r\n}\r\n\r\n/** @internal */\r\nexport function _CommonDispose(commonEngine: AbstractEngine, canvas: Nullable<HTMLCanvasElement>) {\r\n    // Release audio engine\r\n    if (EngineStore.Instances.length === 1 && AbstractEngine.audioEngine) {\r\n        AbstractEngine.audioEngine.dispose();\r\n        AbstractEngine.audioEngine = null;\r\n    }\r\n\r\n    // Events\r\n    const hostWindow = commonEngine.getHostWindow(); // it calls IsWindowObjectExist()\r\n    if (hostWindow && typeof hostWindow.removeEventListener === \"function\") {\r\n        hostWindow.removeEventListener(\"blur\", commonEngine._onBlur);\r\n        hostWindow.removeEventListener(\"focus\", commonEngine._onFocus);\r\n    }\r\n\r\n    if (canvas) {\r\n        canvas.removeEventListener(\"focus\", commonEngine._onCanvasFocus);\r\n        canvas.removeEventListener(\"blur\", commonEngine._onCanvasBlur);\r\n        canvas.removeEventListener(\"pointerout\", commonEngine._onCanvasPointerOut);\r\n        canvas.removeEventListener(\"contextmenu\", commonEngine._onCanvasContextMenu);\r\n    }\r\n\r\n    if (IsDocumentAvailable()) {\r\n        document.removeEventListener(\"fullscreenchange\", commonEngine._onFullscreenChange);\r\n        document.removeEventListener(\"mozfullscreenchange\", commonEngine._onFullscreenChange);\r\n        document.removeEventListener(\"webkitfullscreenchange\", commonEngine._onFullscreenChange);\r\n        document.removeEventListener(\"msfullscreenchange\", commonEngine._onFullscreenChange);\r\n        document.removeEventListener(\"pointerlockchange\", commonEngine._onPointerLockChange);\r\n        document.removeEventListener(\"mspointerlockchange\", commonEngine._onPointerLockChange);\r\n        document.removeEventListener(\"mozpointerlockchange\", commonEngine._onPointerLockChange);\r\n        document.removeEventListener(\"webkitpointerlockchange\", commonEngine._onPointerLockChange);\r\n    }\r\n}\r\n\r\n/**\r\n * Get Font size information\r\n * @param font font name\r\n * @returns an object containing ascent, height and descent\r\n */\r\nexport function GetFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n    const text = document.createElement(\"span\");\r\n    text.textContent = \"Hg\";\r\n    text.style.font = font;\r\n\r\n    const block = document.createElement(\"div\");\r\n    block.style.display = \"inline-block\";\r\n    block.style.width = \"1px\";\r\n    block.style.height = \"0px\";\r\n    block.style.verticalAlign = \"bottom\";\r\n\r\n    const div = document.createElement(\"div\");\r\n    div.style.whiteSpace = \"nowrap\";\r\n    div.appendChild(text);\r\n    div.appendChild(block);\r\n\r\n    document.body.appendChild(div);\r\n\r\n    let fontAscent = 0;\r\n    let fontHeight = 0;\r\n    try {\r\n        fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        block.style.verticalAlign = \"baseline\";\r\n        fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n    } finally {\r\n        document.body.removeChild(div);\r\n    }\r\n    return { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n}\r\n\r\n/** @internal */\r\nexport function CreateImageBitmapFromSource(engine: AbstractEngine, imageSource: string, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n    const promise = new Promise<ImageBitmap>((resolve, reject) => {\r\n        const image = new Image();\r\n        image.onload = () => {\r\n            image.decode().then(() => {\r\n                engine.createImageBitmap(image, options).then((imageBitmap) => {\r\n                    resolve(imageBitmap);\r\n                });\r\n            });\r\n        };\r\n        image.onerror = () => {\r\n            reject(`Error loading image ${image.src}`);\r\n        };\r\n\r\n        image.src = imageSource;\r\n    });\r\n\r\n    return promise;\r\n}\r\n\r\n/** @internal */\r\nexport function ResizeImageBitmap(engine: AbstractEngine, image: HTMLImageElement | ImageBitmap, bufferWidth: number, bufferHeight: number): Uint8Array {\r\n    const canvas = engine.createCanvas(bufferWidth, bufferHeight);\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    if (!context) {\r\n        throw new Error(\"Unable to get 2d context for resizeImageBitmap\");\r\n    }\r\n\r\n    context.drawImage(image, 0, 0);\r\n\r\n    // Create VertexData from map data\r\n    // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n    const buffer = <Uint8Array>(<any>context.getImageData(0, 0, bufferWidth, bufferHeight).data);\r\n    return buffer;\r\n}\r\n\r\n/**\r\n * Ask the browser to promote the current element to fullscreen rendering mode\r\n * @param element defines the DOM element to promote\r\n */\r\nexport function RequestFullscreen(element: HTMLElement): void {\r\n    const requestFunction = element.requestFullscreen || (<any>element).webkitRequestFullscreen;\r\n    if (!requestFunction) {\r\n        return;\r\n    }\r\n    requestFunction.call(element);\r\n}\r\n\r\n/**\r\n * Asks the browser to exit fullscreen mode\r\n */\r\nexport function ExitFullscreen(): void {\r\n    const anyDoc = document as any;\r\n\r\n    if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n    } else if (anyDoc.webkitCancelFullScreen) {\r\n        anyDoc.webkitCancelFullScreen();\r\n    }\r\n}\r\n\r\n/**\r\n * Ask the browser to promote the current element to pointerlock mode\r\n * @param element defines the DOM element to promote\r\n */\r\nexport function RequestPointerlock(element: HTMLElement): void {\r\n    if (element.requestPointerLock) {\r\n        // In some browsers, requestPointerLock returns a promise.\r\n        // Handle possible rejections to avoid an unhandled top-level exception.\r\n        const promise: unknown = element.requestPointerLock();\r\n        if (promise instanceof Promise)\r\n            promise\r\n                .then(() => {\r\n                    element.focus();\r\n                })\r\n                .catch(() => {});\r\n        else element.focus();\r\n    }\r\n}\r\n\r\n/**\r\n * Asks the browser to exit pointerlock mode\r\n */\r\nexport function ExitPointerlock(): void {\r\n    if (document.exitPointerLock) {\r\n        document.exitPointerLock();\r\n    }\r\n}\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { Constants } from \"../constants\";\r\n\r\ndeclare module \"../abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Sets the current alpha mode\r\n         * @param mode defines the mode to use (one of the Engine.ALPHA_XXX)\r\n         * @param noDepthWriteChange defines if depth writing state should remains unchanged (false by default)\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering\r\n         */\r\n        setAlphaMode(mode: number, noDepthWriteChange?: boolean): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.setAlphaMode = function (mode: number, noDepthWriteChange: boolean = false): void {\r\n    if (this._alphaMode === mode) {\r\n        if (!noDepthWriteChange) {\r\n            // Make sure we still have the correct depth mask according to the alpha mode (a transparent material could have forced writting to the depth buffer, for instance)\r\n            const depthMask = mode === Constants.ALPHA_DISABLE;\r\n            if (this.depthCullingState.depthMask !== depthMask) {\r\n                this.depthCullingState.depthMask = depthMask;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    switch (mode) {\r\n        case Constants.ALPHA_DISABLE:\r\n            this._alphaState.alphaBlend = false;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED_PORTERDUFF:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_COMBINE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ADD:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SUBTRACT:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ZERO, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MULTIPLY:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_COLOR, this._gl.ZERO, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MAXIMIZED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_INTERPOLATE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                this._gl.CONSTANT_COLOR,\r\n                this._gl.ONE_MINUS_CONSTANT_COLOR,\r\n                this._gl.CONSTANT_ALPHA,\r\n                this._gl.ONE_MINUS_CONSTANT_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SCREENMODE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ALPHATOCOLOR:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_REVERSEONEMINUS:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                this._gl.ONE_MINUS_DST_COLOR,\r\n                this._gl.ONE_MINUS_SRC_COLOR,\r\n                this._gl.ONE_MINUS_DST_ALPHA,\r\n                this._gl.ONE_MINUS_SRC_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SRC_DSTONEMINUSSRCALPHA:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEZERO:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_EXCLUSION:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_LAYER_ACCUMULATE:\r\n            // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n    }\r\n    if (!noDepthWriteChange) {\r\n        this.depthCullingState.depthMask = mode === Constants.ALPHA_DISABLE;\r\n    }\r\n    this._alphaMode = mode;\r\n};\r\n", "import type { Nullable } from \"../../types\";\r\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Constants } from \"../constants\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { IWebRequest } from \"../../Misc/interfaces/iWebRequest\";\r\nimport { IsExponentOfTwo } from \"../../Misc/tools.functions\";\r\n\r\ndeclare module \"../abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Update a raw texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store in the texture\r\n         * @param format defines the format of the data\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         */\r\n        updateRawTexture(texture: Nullable<InternalTexture>, data: Nullable<ArrayBufferView>, format: number, invertY: boolean): void;\r\n\r\n        /**\r\n         * Update a raw texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store in the texture\r\n         * @param format defines the format of the data\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the compression used (null by default)\r\n         * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_BYTE by default)\r\n         * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n         */\r\n        updateRawTexture(\r\n            texture: Nullable<InternalTexture>,\r\n            data: Nullable<ArrayBufferView>,\r\n            format: number,\r\n            invertY: boolean,\r\n            compression: Nullable<string>,\r\n            type: number,\r\n            useSRGBBuffer: boolean\r\n        ): void;\r\n        /**\r\n         * Update a raw cube texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_BYTE by default)\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         */\r\n        updateRawCubeTexture(texture: InternalTexture, data: ArrayBufferView[], format: number, type: number, invertY: boolean): void;\r\n\r\n        /**\r\n         * Update a raw cube texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_BYTE by default)\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the compression used (null by default)\r\n         */\r\n        updateRawCubeTexture(texture: InternalTexture, data: ArrayBufferView[], format: number, type: number, invertY: boolean, compression: Nullable<string>): void;\r\n\r\n        /**\r\n         * Update a raw cube texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_BYTE by default)\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the compression used (null by default)\r\n         * @param level defines which level of the texture to update\r\n         */\r\n        updateRawCubeTexture(texture: InternalTexture, data: ArrayBufferView[], format: number, type: number, invertY: boolean, compression: Nullable<string>, level: number): void;\r\n\r\n        /**\r\n         * Creates a new raw cube texture from a specified url\r\n         * @param url defines the url where the data is located\r\n         * @param scene defines the current scene\r\n         * @param size defines the size of the textures\r\n         * @param format defines the format of the data\r\n         * @param type defines the type fo the data (like Engine.TEXTURETYPE_UNSIGNED_BYTE)\r\n         * @param noMipmap defines if the engine should avoid generating the mip levels\r\n         * @param callback defines a callback used to extract texture data from loaded data\r\n         * @param mipmapGenerator defines to provide an optional tool to generate mip levels\r\n         * @param onLoad defines a callback called when texture is loaded\r\n         * @param onError defines a callback called if there is an error\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createRawCubeTextureFromUrl(\r\n            url: string,\r\n            scene: Nullable<Scene>,\r\n            size: number,\r\n            format: number,\r\n            type: number,\r\n            noMipmap: boolean,\r\n            callback: (ArrayBuffer: ArrayBuffer) => Nullable<ArrayBufferView[]>,\r\n            mipmapGenerator: Nullable<(faces: ArrayBufferView[]) => ArrayBufferView[][]>,\r\n            onLoad: Nullable<() => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Creates a new raw cube texture from a specified url\r\n         * @param url defines the url where the data is located\r\n         * @param scene defines the current scene\r\n         * @param size defines the size of the textures\r\n         * @param format defines the format of the data\r\n         * @param type defines the type fo the data (like Engine.TEXTURETYPE_UNSIGNED_BYTE)\r\n         * @param noMipmap defines if the engine should avoid generating the mip levels\r\n         * @param callback defines a callback used to extract texture data from loaded data\r\n         * @param mipmapGenerator defines to provide an optional tool to generate mip levels\r\n         * @param onLoad defines a callback called when texture is loaded\r\n         * @param onError defines a callback called if there is an error\r\n         * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createRawCubeTextureFromUrl(\r\n            url: string,\r\n            scene: Nullable<Scene>,\r\n            size: number,\r\n            format: number,\r\n            type: number,\r\n            noMipmap: boolean,\r\n            callback: (ArrayBuffer: ArrayBuffer) => Nullable<ArrayBufferView[]>,\r\n            mipmapGenerator: Nullable<(faces: ArrayBufferView[]) => ArrayBufferView[][]>,\r\n            onLoad: Nullable<() => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            samplingMode: number,\r\n            invertY: boolean\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Update a raw 3D texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         */\r\n        updateRawTexture3D(texture: InternalTexture, data: Nullable<ArrayBufferView>, format: number, invertY: boolean): void;\r\n\r\n        /**\r\n         * Update a raw 3D texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the used compression (can be null)\r\n         * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_BYTE, Engine.TEXTURETYPE_FLOAT...)\r\n         */\r\n        updateRawTexture3D(texture: InternalTexture, data: Nullable<ArrayBufferView>, format: number, invertY: boolean, compression: Nullable<string>, textureType: number): void;\r\n\r\n        /**\r\n         * Update a raw 2D array texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         */\r\n        updateRawTexture2DArray(texture: InternalTexture, data: Nullable<ArrayBufferView>, format: number, invertY: boolean): void;\r\n\r\n        /**\r\n         * Update a raw 2D array texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the used compression (can be null)\r\n         * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_BYTE, Engine.TEXTURETYPE_FLOAT...)\r\n         */\r\n        updateRawTexture2DArray(\r\n            texture: InternalTexture,\r\n            data: Nullable<ArrayBufferView>,\r\n            format: number,\r\n            invertY: boolean,\r\n            compression: Nullable<string>,\r\n            textureType: number\r\n        ): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.updateRawTexture = function (\r\n    texture: Nullable<InternalTexture>,\r\n    data: Nullable<ArrayBufferView>,\r\n    format: number,\r\n    invertY: boolean,\r\n    compression: Nullable<string> = null,\r\n    type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n    useSRGBBuffer: boolean = false\r\n): void {\r\n    if (!texture) {\r\n        return;\r\n    }\r\n    // Babylon's internalSizedFomat but gl's texImage2D internalFormat\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type, format, useSRGBBuffer);\r\n\r\n    // Babylon's internalFormat but gl's texImage2D format\r\n    const internalFormat = this._getInternalFormat(format);\r\n    const textureType = this._getWebGLTextureType(type);\r\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n    this._unpackFlipY(invertY === undefined ? true : invertY ? true : false);\r\n\r\n    if (!this._doNotHandleContextLost) {\r\n        texture._bufferView = data;\r\n        texture.format = format;\r\n        texture.type = type;\r\n        texture.invertY = invertY;\r\n        texture._compression = compression;\r\n    }\r\n\r\n    if (texture.width % 4 !== 0) {\r\n        this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 1);\r\n    }\r\n\r\n    if (compression && data) {\r\n        this._gl.compressedTexImage2D(this._gl.TEXTURE_2D, 0, (<any>this.getCaps().s3tc)[compression], texture.width, texture.height, 0, <DataView>data);\r\n    } else {\r\n        this._gl.texImage2D(this._gl.TEXTURE_2D, 0, internalSizedFomat, texture.width, texture.height, 0, internalFormat, textureType, data);\r\n    }\r\n\r\n    if (texture.generateMipMaps) {\r\n        this._gl.generateMipmap(this._gl.TEXTURE_2D);\r\n    }\r\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n    //  this.resetTextureCache();\r\n    texture.isReady = true;\r\n};\r\n\r\nThinEngine.prototype.createRawTexture = function (\r\n    data: Nullable<ArrayBufferView>,\r\n    width: number,\r\n    height: number,\r\n    format: number,\r\n    generateMipMaps: boolean,\r\n    invertY: boolean,\r\n    samplingMode: number,\r\n    compression: Nullable<string> = null,\r\n    type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    creationFlags = 0,\r\n    useSRGBBuffer = false\r\n): InternalTexture {\r\n    const texture = new InternalTexture(this, InternalTextureSource.Raw);\r\n    texture.baseWidth = width;\r\n    texture.baseHeight = height;\r\n    texture.width = width;\r\n    texture.height = height;\r\n    texture.format = format;\r\n    texture.generateMipMaps = generateMipMaps;\r\n    texture.samplingMode = samplingMode;\r\n    texture.invertY = invertY;\r\n    texture._compression = compression;\r\n    texture.type = type;\r\n    texture._useSRGBBuffer = this._getUseSRGBBuffer(useSRGBBuffer, !generateMipMaps);\r\n\r\n    if (!this._doNotHandleContextLost) {\r\n        texture._bufferView = data;\r\n    }\r\n\r\n    this.updateRawTexture(texture, data, format, invertY, compression, type, texture._useSRGBBuffer);\r\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n\r\n    // Filters\r\n    const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\r\n\r\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, filters.min);\r\n\r\n    if (generateMipMaps) {\r\n        this._gl.generateMipmap(this._gl.TEXTURE_2D);\r\n    }\r\n\r\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n\r\nThinEngine.prototype.createRawCubeTexture = function (\r\n    data: Nullable<ArrayBufferView[]>,\r\n    size: number,\r\n    format: number,\r\n    type: number,\r\n    generateMipMaps: boolean,\r\n    invertY: boolean,\r\n    samplingMode: number,\r\n    compression: Nullable<string> = null\r\n): InternalTexture {\r\n    const gl = this._gl;\r\n    const texture = new InternalTexture(this, InternalTextureSource.CubeRaw);\r\n    texture.isCube = true;\r\n    texture.format = format;\r\n    texture.type = type;\r\n    if (!this._doNotHandleContextLost) {\r\n        texture._bufferViewArray = data;\r\n    }\r\n\r\n    const textureType = this._getWebGLTextureType(type);\r\n    let internalFormat = this._getInternalFormat(format);\r\n\r\n    if (internalFormat === gl.RGB) {\r\n        internalFormat = gl.RGBA;\r\n    }\r\n\r\n    // Mipmap generation needs a sized internal format that is both color-renderable and texture-filterable\r\n    if (textureType === gl.FLOAT && !this._caps.textureFloatLinearFiltering) {\r\n        generateMipMaps = false;\r\n        samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        Logger.Warn(\"Float texture filtering is not supported. Mipmap generation and sampling mode are forced to false and TEXTURE_NEAREST_SAMPLINGMODE, respectively.\");\r\n    } else if (textureType === this._gl.HALF_FLOAT_OES && !this._caps.textureHalfFloatLinearFiltering) {\r\n        generateMipMaps = false;\r\n        samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        Logger.Warn(\"Half float texture filtering is not supported. Mipmap generation and sampling mode are forced to false and TEXTURE_NEAREST_SAMPLINGMODE, respectively.\");\r\n    } else if (textureType === gl.FLOAT && !this._caps.textureFloatRender) {\r\n        generateMipMaps = false;\r\n        Logger.Warn(\"Render to float textures is not supported. Mipmap generation forced to false.\");\r\n    } else if (textureType === gl.HALF_FLOAT && !this._caps.colorBufferFloat) {\r\n        generateMipMaps = false;\r\n        Logger.Warn(\"Render to half float textures is not supported. Mipmap generation forced to false.\");\r\n    }\r\n\r\n    const width = size;\r\n    const height = width;\r\n\r\n    texture.width = width;\r\n    texture.height = height;\r\n    texture.invertY = invertY;\r\n    texture._compression = compression;\r\n\r\n    // Double check on POT to generate Mips.\r\n    const isPot = !this.needPOTTextures || (IsExponentOfTwo(texture.width) && IsExponentOfTwo(texture.height));\r\n    if (!isPot) {\r\n        generateMipMaps = false;\r\n    }\r\n\r\n    // Upload data if needed. The texture won't be ready until then.\r\n    if (data) {\r\n        this.updateRawCubeTexture(texture, data, format, type, invertY, compression);\r\n    } else {\r\n        const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type);\r\n        const level = 0;\r\n\r\n        this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n        for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\r\n            if (compression) {\r\n                gl.compressedTexImage2D(\r\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\r\n                    level,\r\n                    (<any>this.getCaps().s3tc)[compression],\r\n                    texture.width,\r\n                    texture.height,\r\n                    0,\r\n                    undefined as any\r\n                );\r\n            } else {\r\n                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, level, internalSizedFomat, texture.width, texture.height, 0, internalFormat, textureType, null);\r\n            }\r\n        }\r\n\r\n        this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n    }\r\n\r\n    this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n    // Filters\r\n    if (data && generateMipMaps) {\r\n        this._gl.generateMipmap(this._gl.TEXTURE_CUBE_MAP);\r\n    }\r\n\r\n    const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\r\n\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n\r\n    texture.generateMipMaps = generateMipMaps;\r\n    texture.samplingMode = samplingMode;\r\n    texture.isReady = true;\r\n\r\n    return texture;\r\n};\r\n\r\nThinEngine.prototype.updateRawCubeTexture = function (\r\n    texture: InternalTexture,\r\n    data: ArrayBufferView[],\r\n    format: number,\r\n    type: number,\r\n    invertY: boolean,\r\n    compression: Nullable<string> = null,\r\n    level: number = 0\r\n): void {\r\n    texture._bufferViewArray = data;\r\n    texture.format = format;\r\n    texture.type = type;\r\n    texture.invertY = invertY;\r\n    texture._compression = compression;\r\n\r\n    const gl = this._gl;\r\n    const textureType = this._getWebGLTextureType(type);\r\n    let internalFormat = this._getInternalFormat(format);\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type);\r\n\r\n    let needConversion = false;\r\n    if (internalFormat === gl.RGB) {\r\n        internalFormat = gl.RGBA;\r\n        needConversion = true;\r\n    }\r\n\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n    this._unpackFlipY(invertY === undefined ? true : invertY ? true : false);\r\n\r\n    if (texture.width % 4 !== 0) {\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n    }\r\n\r\n    // Data are known to be in +X +Y +Z -X -Y -Z\r\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\r\n        let faceData = data[faceIndex];\r\n\r\n        if (compression) {\r\n            gl.compressedTexImage2D(\r\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\r\n                level,\r\n                (<any>this.getCaps().s3tc)[compression],\r\n                texture.width,\r\n                texture.height,\r\n                0,\r\n                <DataView>faceData\r\n            );\r\n        } else {\r\n            if (needConversion) {\r\n                faceData = _convertRGBtoRGBATextureData(faceData, texture.width, texture.height, type);\r\n            }\r\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, level, internalSizedFomat, texture.width, texture.height, 0, internalFormat, textureType, faceData);\r\n        }\r\n    }\r\n\r\n    const isPot = !this.needPOTTextures || (IsExponentOfTwo(texture.width) && IsExponentOfTwo(texture.height));\r\n    if (isPot && texture.generateMipMaps && level === 0) {\r\n        this._gl.generateMipmap(this._gl.TEXTURE_CUBE_MAP);\r\n    }\r\n    this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n\r\n    // this.resetTextureCache();\r\n    texture.isReady = true;\r\n};\r\n\r\nThinEngine.prototype.createRawCubeTextureFromUrl = function (\r\n    url: string,\r\n    scene: Nullable<Scene>,\r\n    size: number,\r\n    format: number,\r\n    type: number,\r\n    noMipmap: boolean,\r\n    callback: (ArrayBuffer: ArrayBuffer) => Nullable<ArrayBufferView[]>,\r\n    mipmapGenerator: Nullable<(faces: ArrayBufferView[]) => ArrayBufferView[][]>,\r\n    onLoad: Nullable<() => void> = null,\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n    invertY: boolean = false\r\n): InternalTexture {\r\n    const gl = this._gl;\r\n    const texture = this.createRawCubeTexture(null, size, format, type, !noMipmap, invertY, samplingMode, null);\r\n    scene?.addPendingData(texture);\r\n    texture.url = url;\r\n    texture.isReady = false;\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    const onerror = (request?: IWebRequest, exception?: any) => {\r\n        scene?.removePendingData(texture);\r\n        if (onError && request) {\r\n            onError(request.status + \" \" + request.statusText, exception);\r\n        }\r\n    };\r\n\r\n    const internalCallback = (data: any) => {\r\n        // If the texture has been disposed\r\n        if (!texture._hardwareTexture) {\r\n            return;\r\n        }\r\n\r\n        const width = texture.width;\r\n        const faceDataArrays = callback(data);\r\n\r\n        if (!faceDataArrays) {\r\n            return;\r\n        }\r\n\r\n        if (mipmapGenerator) {\r\n            const textureType = this._getWebGLTextureType(type);\r\n            let internalFormat = this._getInternalFormat(format);\r\n            const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type);\r\n\r\n            let needConversion = false;\r\n            if (internalFormat === gl.RGB) {\r\n                internalFormat = gl.RGBA;\r\n                needConversion = true;\r\n            }\r\n\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n            this._unpackFlipY(false);\r\n\r\n            const mipData = mipmapGenerator(faceDataArrays);\r\n            for (let level = 0; level < mipData.length; level++) {\r\n                const mipSize = width >> level;\r\n\r\n                for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\r\n                    let mipFaceData = mipData[level][faceIndex];\r\n                    if (needConversion) {\r\n                        mipFaceData = _convertRGBtoRGBATextureData(mipFaceData, mipSize, mipSize, type);\r\n                    }\r\n                    gl.texImage2D(faceIndex, level, internalSizedFomat, mipSize, mipSize, 0, internalFormat, textureType, mipFaceData);\r\n                }\r\n            }\r\n\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n        } else {\r\n            this.updateRawCubeTexture(texture, faceDataArrays, format, type, invertY);\r\n        }\r\n\r\n        texture.isReady = true;\r\n        // this.resetTextureCache();\r\n        scene?.removePendingData(texture);\r\n\r\n        texture.onLoadedObservable.notifyObservers(texture);\r\n        texture.onLoadedObservable.clear();\r\n\r\n        if (onLoad) {\r\n            onLoad();\r\n        }\r\n    };\r\n\r\n    this._loadFile(\r\n        url,\r\n        (data) => {\r\n            internalCallback(data);\r\n        },\r\n        undefined,\r\n        scene?.offlineProvider,\r\n        true,\r\n        onerror\r\n    );\r\n\r\n    return texture;\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction _convertRGBtoRGBATextureData(rgbData: any, width: number, height: number, textureType: number): ArrayBufferView {\r\n    // Create new RGBA data container.\r\n    let rgbaData: any;\r\n    let val1 = 1;\r\n    if (textureType === Constants.TEXTURETYPE_FLOAT) {\r\n        rgbaData = new Float32Array(width * height * 4);\r\n    } else if (textureType === Constants.TEXTURETYPE_HALF_FLOAT) {\r\n        rgbaData = new Uint16Array(width * height * 4);\r\n        val1 = 15360; // 15360 is the encoding of 1 in half float\r\n    } else if (textureType === Constants.TEXTURETYPE_UNSIGNED_INTEGER) {\r\n        rgbaData = new Uint32Array(width * height * 4);\r\n    } else {\r\n        rgbaData = new Uint8Array(width * height * 4);\r\n    }\r\n\r\n    // Convert each pixel.\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            const index = (y * width + x) * 3;\r\n            const newIndex = (y * width + x) * 4;\r\n\r\n            // Map Old Value to new value.\r\n            rgbaData[newIndex + 0] = rgbData[index + 0];\r\n            rgbaData[newIndex + 1] = rgbData[index + 1];\r\n            rgbaData[newIndex + 2] = rgbData[index + 2];\r\n\r\n            // Add fully opaque alpha channel.\r\n            rgbaData[newIndex + 3] = val1;\r\n        }\r\n    }\r\n\r\n    return rgbaData;\r\n}\r\n\r\n/**\r\n * Create a function for createRawTexture3D/createRawTexture2DArray\r\n * @param is3D true for TEXTURE_3D and false for TEXTURE_2D_ARRAY\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction _makeCreateRawTextureFunction(is3D: boolean) {\r\n    return function (\r\n        this: ThinEngine,\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        format: number,\r\n        generateMipMaps: boolean,\r\n        invertY: boolean,\r\n        samplingMode: number,\r\n        compression: Nullable<string> = null,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_BYTE\r\n    ): InternalTexture {\r\n        const target = is3D ? this._gl.TEXTURE_3D : this._gl.TEXTURE_2D_ARRAY;\r\n        const source = is3D ? InternalTextureSource.Raw3D : InternalTextureSource.Raw2DArray;\r\n        const texture = new InternalTexture(this, source);\r\n        texture.baseWidth = width;\r\n        texture.baseHeight = height;\r\n        texture.baseDepth = depth;\r\n        texture.width = width;\r\n        texture.height = height;\r\n        texture.depth = depth;\r\n        texture.format = format;\r\n        texture.type = textureType;\r\n        texture.generateMipMaps = generateMipMaps;\r\n        texture.samplingMode = samplingMode;\r\n        if (is3D) {\r\n            texture.is3D = true;\r\n        } else {\r\n            texture.is2DArray = true;\r\n        }\r\n\r\n        if (!this._doNotHandleContextLost) {\r\n            texture._bufferView = data;\r\n        }\r\n\r\n        if (is3D) {\r\n            this.updateRawTexture3D(texture, data, format, invertY, compression, textureType);\r\n        } else {\r\n            this.updateRawTexture2DArray(texture, data, format, invertY, compression, textureType);\r\n        }\r\n        this._bindTextureDirectly(target, texture, true);\r\n\r\n        // Filters\r\n        const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\r\n\r\n        this._gl.texParameteri(target, this._gl.TEXTURE_MAG_FILTER, filters.mag);\r\n        this._gl.texParameteri(target, this._gl.TEXTURE_MIN_FILTER, filters.min);\r\n\r\n        if (generateMipMaps) {\r\n            this._gl.generateMipmap(target);\r\n        }\r\n\r\n        this._bindTextureDirectly(target, null);\r\n\r\n        this._internalTexturesCache.push(texture);\r\n\r\n        return texture;\r\n    };\r\n}\r\n\r\nThinEngine.prototype.createRawTexture2DArray = _makeCreateRawTextureFunction(false);\r\nThinEngine.prototype.createRawTexture3D = _makeCreateRawTextureFunction(true);\r\n\r\n/**\r\n * Create a function for updateRawTexture3D/updateRawTexture2DArray\r\n * @param is3D true for TEXTURE_3D and false for TEXTURE_2D_ARRAY\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction _makeUpdateRawTextureFunction(is3D: boolean) {\r\n    return function (\r\n        this: ThinEngine,\r\n        texture: InternalTexture,\r\n        data: Nullable<ArrayBufferView>,\r\n        format: number,\r\n        invertY: boolean,\r\n        compression: Nullable<string> = null,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_BYTE\r\n    ): void {\r\n        const target = is3D ? this._gl.TEXTURE_3D : this._gl.TEXTURE_2D_ARRAY;\r\n        const internalType = this._getWebGLTextureType(textureType);\r\n        const internalFormat = this._getInternalFormat(format);\r\n        const internalSizedFomat = this._getRGBABufferInternalSizedFormat(textureType, format);\r\n\r\n        this._bindTextureDirectly(target, texture, true);\r\n        this._unpackFlipY(invertY === undefined ? true : invertY ? true : false);\r\n\r\n        if (!this._doNotHandleContextLost) {\r\n            texture._bufferView = data;\r\n            texture.format = format;\r\n            texture.invertY = invertY;\r\n            texture._compression = compression;\r\n        }\r\n\r\n        if (texture.width % 4 !== 0) {\r\n            this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 1);\r\n        }\r\n\r\n        if (compression && data) {\r\n            this._gl.compressedTexImage3D(target, 0, (<any>this.getCaps().s3tc)[compression], texture.width, texture.height, texture.depth, 0, data);\r\n        } else {\r\n            this._gl.texImage3D(target, 0, internalSizedFomat, texture.width, texture.height, texture.depth, 0, internalFormat, internalType, data);\r\n        }\r\n\r\n        if (texture.generateMipMaps) {\r\n            this._gl.generateMipmap(target);\r\n        }\r\n        this._bindTextureDirectly(target, null);\r\n        // this.resetTextureCache();\r\n        texture.isReady = true;\r\n    };\r\n}\r\n\r\nThinEngine.prototype.updateRawTexture2DArray = _makeUpdateRawTextureFunction(false);\r\nThinEngine.prototype.updateRawTexture3D = _makeUpdateRawTextureFunction(true);\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport type { IndicesArray, DataArray } from \"../../types\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Update a dynamic index buffer\r\n         * @param indexBuffer defines the target index buffer\r\n         * @param indices defines the data to update\r\n         * @param offset defines the offset in the target index buffer where update should start\r\n         */\r\n        updateDynamicIndexBuffer(indexBuffer: DataBuffer, indices: IndicesArray, offset?: number): void;\r\n\r\n        /**\r\n         * Updates a dynamic vertex buffer.\r\n         * @param vertexBuffer the vertex buffer to update\r\n         * @param data the data used to update the vertex buffer\r\n         * @param byteOffset the byte offset of the data\r\n         * @param byteLength the byte length of the data\r\n         */\r\n        updateDynamicVertexBuffer(vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.updateDynamicIndexBuffer = function (this: ThinEngine, indexBuffer: DataBuffer, indices: IndicesArray, offset: number = 0): void {\r\n    // Force cache update\r\n    this._currentBoundBuffer[this._gl.ELEMENT_ARRAY_BUFFER] = null;\r\n    this.bindIndexBuffer(indexBuffer);\r\n\r\n    let view: ArrayBufferView;\r\n    if (indexBuffer.is32Bits) {\r\n        // anything else than Uint32Array needs to be converted to Uint32Array\r\n        view = indices instanceof Uint32Array ? indices : new Uint32Array(indices);\r\n    } else {\r\n        // anything else than Uint16Array needs to be converted to Uint16Array\r\n        view = indices instanceof Uint16Array ? indices : new Uint16Array(indices);\r\n    }\r\n\r\n    this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, view, this._gl.DYNAMIC_DRAW);\r\n\r\n    this._resetIndexBufferBinding();\r\n};\r\n\r\nThinEngine.prototype.updateDynamicVertexBuffer = function (this: ThinEngine, vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void {\r\n    this.bindArrayBuffer(vertexBuffer);\r\n\r\n    if (byteOffset === undefined) {\r\n        byteOffset = 0;\r\n    }\r\n\r\n    const dataLength = (data as ArrayBuffer).byteLength || (data as number[]).length;\r\n\r\n    if (byteLength === undefined || (byteLength >= dataLength && byteOffset === 0)) {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data));\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, data);\r\n        }\r\n    } else {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data).subarray(0, byteLength / 4));\r\n        } else {\r\n            if (data instanceof ArrayBuffer) {\r\n                data = new Uint8Array(data, 0, byteLength);\r\n            } else {\r\n                data = new Uint8Array(data.buffer, data.byteOffset, byteLength);\r\n            }\r\n\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, data);\r\n        }\r\n    }\r\n\r\n    this._resetVertexBufferBinding();\r\n};\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Constants } from \"../constants\";\r\nimport type { DepthTextureCreationOptions } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport { GetExponentOfTwo } from \"../../Misc/tools.functions\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * @internal\r\n         */\r\n        _setCubeMapTextureParams(texture: InternalTexture, loadMipmap: boolean, maxLevel?: number): void;\r\n        /**\r\n         * Creates a depth stencil cube texture.\r\n         * This is only available in WebGL 2.\r\n         * @param size The size of face edge in the cube texture.\r\n         * @param options The options defining the cube texture.\r\n         * @returns The cube texture\r\n         */\r\n        _createDepthStencilCubeTexture(size: number, options: DepthTextureCreationOptions): InternalTexture;\r\n\r\n        /**\r\n         * Creates a cube texture\r\n         * @param rootUrl defines the url where the files to load is located\r\n         * @param scene defines the current scene\r\n         * @param files defines the list of files to load (1 per face)\r\n         * @param noMipmap defines a boolean indicating that no mipmaps shall be generated (false by default)\r\n         * @param onLoad defines an optional callback raised when the texture is loaded\r\n         * @param onError defines an optional callback raised if there is an issue to load the texture\r\n         * @param format defines the format of the data\r\n         * @param forcedExtension defines the extension to use to pick the right loader\r\n         * @param createPolynomials if a polynomial sphere should be created for the cube texture\r\n         * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\n         * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\r\n         * @param fallback defines texture to use while falling back when (compressed) texture file not found.\r\n         * @param loaderOptions options to be passed to the loader\r\n         * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n         * @param buffer defines the data buffer to load instead of loading the rootUrl\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createCubeTexture(\r\n            rootUrl: string,\r\n            scene: Nullable<Scene>,\r\n            files: Nullable<string[]>,\r\n            noMipmap: boolean | undefined,\r\n            onLoad: Nullable<(data?: any) => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            format: number | undefined,\r\n            forcedExtension: any,\r\n            createPolynomials: boolean,\r\n            lodScale: number,\r\n            lodOffset: number,\r\n            fallback: Nullable<InternalTexture>,\r\n            loaderOptions: any,\r\n            useSRGBBuffer: boolean,\r\n            buffer: Nullable<ArrayBufferView>\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Creates a cube texture\r\n         * @param rootUrl defines the url where the files to load is located\r\n         * @param scene defines the current scene\r\n         * @param files defines the list of files to load (1 per face)\r\n         * @param noMipmap defines a boolean indicating that no mipmaps shall be generated (false by default)\r\n         * @param onLoad defines an optional callback raised when the texture is loaded\r\n         * @param onError defines an optional callback raised if there is an issue to load the texture\r\n         * @param format defines the format of the data\r\n         * @param forcedExtension defines the extension to use to pick the right loader\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createCubeTexture(\r\n            rootUrl: string,\r\n            scene: Nullable<Scene>,\r\n            files: Nullable<string[]>,\r\n            noMipmap: boolean,\r\n            onLoad: Nullable<(data?: any) => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            format: number | undefined,\r\n            forcedExtension: any\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Creates a cube texture\r\n         * @param rootUrl defines the url where the files to load is located\r\n         * @param scene defines the current scene\r\n         * @param files defines the list of files to load (1 per face)\r\n         * @param noMipmap defines a boolean indicating that no mipmaps shall be generated (false by default)\r\n         * @param onLoad defines an optional callback raised when the texture is loaded\r\n         * @param onError defines an optional callback raised if there is an issue to load the texture\r\n         * @param format defines the format of the data\r\n         * @param forcedExtension defines the extension to use to pick the right loader\r\n         * @param createPolynomials if a polynomial sphere should be created for the cube texture\r\n         * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\n         * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createCubeTexture(\r\n            rootUrl: string,\r\n            scene: Nullable<Scene>,\r\n            files: Nullable<string[]>,\r\n            noMipmap: boolean,\r\n            onLoad: Nullable<(data?: any) => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            format: number | undefined,\r\n            forcedExtension: any,\r\n            createPolynomials: boolean,\r\n            lodScale: number,\r\n            lodOffset: number\r\n        ): InternalTexture;\r\n\r\n        /** @internal */\r\n        createCubeTextureBase(\r\n            rootUrl: string,\r\n            scene: Nullable<Scene>,\r\n            files: Nullable<string[]>,\r\n            noMipmap: boolean,\r\n            onLoad: Nullable<(data?: any) => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            format: number | undefined,\r\n            forcedExtension: any,\r\n            createPolynomials: boolean,\r\n            lodScale: number,\r\n            lodOffset: number,\r\n            fallback: Nullable<InternalTexture>,\r\n            beforeLoadCubeDataCallback: Nullable<(texture: InternalTexture, data: ArrayBufferView | ArrayBufferView[]) => void>,\r\n            imageHandler: Nullable<(texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            useSRGBBuffer: boolean,\r\n            buffer: ArrayBufferView\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Force the mipmap generation for the given render target texture\r\n         * @param texture defines the render target texture to use\r\n         * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\r\n         */\r\n        generateMipMapsForCubemap(texture: InternalTexture, unbind?: boolean): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype._createDepthStencilCubeTexture = function (size: number, options: DepthTextureCreationOptions): InternalTexture {\r\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\r\n    internalTexture.isCube = true;\r\n\r\n    if (this.webGLVersion === 1) {\r\n        Logger.Error(\"Depth cube texture is not supported by WebGL 1.\");\r\n        return internalTexture;\r\n    }\r\n\r\n    const internalOptions = {\r\n        bilinearFiltering: false,\r\n        comparisonFunction: 0,\r\n        generateStencil: false,\r\n        ...options,\r\n    };\r\n\r\n    const gl = this._gl;\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, internalTexture, true);\r\n\r\n    this._setupDepthStencilTexture(internalTexture, size, internalOptions.bilinearFiltering, internalOptions.comparisonFunction);\r\n\r\n    // Create the depth/stencil buffer\r\n    for (let face = 0; face < 6; face++) {\r\n        if (internalOptions.generateStencil) {\r\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, gl.DEPTH24_STENCIL8, size, size, 0, gl.DEPTH_STENCIL, gl.UNSIGNED_INT_24_8, null);\r\n        } else {\r\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, gl.DEPTH_COMPONENT24, size, size, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);\r\n        }\r\n    }\r\n\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n\r\n    this._internalTexturesCache.push(internalTexture);\r\n\r\n    return internalTexture;\r\n};\r\n\r\nThinEngine.prototype._setCubeMapTextureParams = function (texture: InternalTexture, loadMipmap: boolean, maxLevel?: number): void {\r\n    const gl = this._gl;\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, loadMipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    texture.samplingMode = loadMipmap ? Constants.TEXTURE_TRILINEAR_SAMPLINGMODE : Constants.TEXTURE_LINEAR_LINEAR;\r\n\r\n    if (loadMipmap && this.getCaps().textureMaxLevel && maxLevel !== undefined && maxLevel > 0) {\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAX_LEVEL, maxLevel);\r\n        texture._maxLodLevel = maxLevel;\r\n    }\r\n\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n};\r\n\r\nThinEngine.prototype.createCubeTexture = function (\r\n    rootUrl: string,\r\n    scene: Nullable<Scene>,\r\n    files: Nullable<string[]>,\r\n    noMipmap?: boolean,\r\n    onLoad: Nullable<(data?: any) => void> = null,\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    format?: number,\r\n    forcedExtension: any = null,\r\n    createPolynomials: boolean = false,\r\n    lodScale: number = 0,\r\n    lodOffset: number = 0,\r\n    fallback: Nullable<InternalTexture> = null,\r\n    loaderOptions?: any,\r\n    useSRGBBuffer = false,\r\n    buffer: Nullable<ArrayBufferView> = null\r\n): InternalTexture {\r\n    const gl = this._gl;\r\n\r\n    return this.createCubeTextureBase(\r\n        rootUrl,\r\n        scene,\r\n        files,\r\n        !!noMipmap,\r\n        onLoad,\r\n        onError,\r\n        format,\r\n        forcedExtension,\r\n        createPolynomials,\r\n        lodScale,\r\n        lodOffset,\r\n        fallback,\r\n        (texture: InternalTexture) => this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true),\r\n        (texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => {\r\n            const width = this.needPOTTextures ? GetExponentOfTwo(imgs[0].width, this._caps.maxCubemapTextureSize) : imgs[0].width;\r\n            const height = width;\r\n\r\n            const faces = [\r\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X,\r\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\r\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\r\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\r\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\r\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\r\n            ];\r\n\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n            this._unpackFlipY(false);\r\n\r\n            const internalFormat = format ? this._getInternalFormat(format, texture._useSRGBBuffer) : texture._useSRGBBuffer ? this._glSRGBExtensionValues.SRGB8_ALPHA8 : gl.RGBA;\r\n            let texelFormat = format ? this._getInternalFormat(format) : gl.RGBA;\r\n\r\n            if (texture._useSRGBBuffer && this.webGLVersion === 1) {\r\n                texelFormat = internalFormat;\r\n            }\r\n\r\n            for (let index = 0; index < faces.length; index++) {\r\n                if (imgs[index].width !== width || imgs[index].height !== height) {\r\n                    this._prepareWorkingCanvas();\r\n\r\n                    if (!this._workingCanvas || !this._workingContext) {\r\n                        Logger.Warn(\"Cannot create canvas to resize texture.\");\r\n                        return;\r\n                    }\r\n                    this._workingCanvas.width = width;\r\n                    this._workingCanvas.height = height;\r\n\r\n                    this._workingContext.drawImage(imgs[index], 0, 0, imgs[index].width, imgs[index].height, 0, 0, width, height);\r\n                    gl.texImage2D(faces[index], 0, internalFormat, texelFormat, gl.UNSIGNED_BYTE, this._workingCanvas as TexImageSource);\r\n                } else {\r\n                    gl.texImage2D(faces[index], 0, internalFormat, texelFormat, gl.UNSIGNED_BYTE, imgs[index]);\r\n                }\r\n            }\r\n\r\n            if (!noMipmap) {\r\n                gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n            }\r\n\r\n            this._setCubeMapTextureParams(texture, !noMipmap);\r\n\r\n            texture.width = width;\r\n            texture.height = height;\r\n            texture.isReady = true;\r\n            if (format) {\r\n                texture.format = format;\r\n            }\r\n\r\n            texture.onLoadedObservable.notifyObservers(texture);\r\n            texture.onLoadedObservable.clear();\r\n\r\n            if (onLoad) {\r\n                onLoad();\r\n            }\r\n        },\r\n        !!useSRGBBuffer,\r\n        buffer\r\n    );\r\n};\r\n\r\nThinEngine.prototype.generateMipMapsForCubemap = function (texture: InternalTexture, unbind = true) {\r\n    if (texture.generateMipMaps) {\r\n        const gl = this._gl;\r\n        this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n        if (unbind) {\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n        }\r\n    }\r\n};\r\n", "import type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport type { TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../constants\";\r\nimport type { Engine } from \"../engine\";\r\nimport { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { ThinEngine } from \"../thinEngine\";\r\nimport type { WebGLHardwareTexture } from \"./webGLHardwareTexture\";\r\nimport { HasStencilAspect } from \"core/Materials/Textures/textureHelper.functions\";\r\n\r\n/** @internal */\r\nexport class WebGLRenderTargetWrapper extends RenderTargetWrapper {\r\n    private _context: WebGLRenderingContext;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _framebuffer: Nullable<WebGLFramebuffer> = null;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _depthStencilBuffer: Nullable<WebGLRenderbuffer> = null;\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public _MSAAFramebuffer: Nullable<WebGLFramebuffer> = null;\r\n\r\n    // Multiview\r\n    /**\r\n     * @internal\r\n     */\r\n    public _colorTextureArray: Nullable<WebGLTexture> = null;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _depthStencilTextureArray: Nullable<WebGLTexture> = null;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _disposeOnlyFramebuffers = false;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _currentLOD = 0;\r\n\r\n    public override setDepthStencilTexture(texture: Nullable<InternalTexture>, disposeExisting = true) {\r\n        super.setDepthStencilTexture(texture, disposeExisting);\r\n\r\n        if (!texture) {\r\n            return;\r\n        }\r\n\r\n        const engine = this._engine as ThinEngine;\r\n        const gl = this._context as WebGL2RenderingContext;\r\n        const hardwareTexture = texture._hardwareTexture as Nullable<WebGLHardwareTexture>;\r\n\r\n        if (hardwareTexture && texture._autoMSAAManagement && this._MSAAFramebuffer) {\r\n            const currentFB = engine._currentFramebuffer;\r\n            engine._bindUnboundFramebuffer(this._MSAAFramebuffer);\r\n            gl.framebufferRenderbuffer(\r\n                gl.FRAMEBUFFER,\r\n                HasStencilAspect(texture.format) ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT,\r\n                gl.RENDERBUFFER,\r\n                hardwareTexture.getMSAARenderBuffer()\r\n            );\r\n            engine._bindUnboundFramebuffer(currentFB);\r\n        }\r\n    }\r\n\r\n    constructor(isMulti: boolean, isCube: boolean, size: TextureSize, engine: ThinEngine, context: WebGLRenderingContext) {\r\n        super(isMulti, isCube, size, engine);\r\n\r\n        this._context = context;\r\n    }\r\n\r\n    protected override _cloneRenderTargetWrapper(): Nullable<RenderTargetWrapper> {\r\n        let rtw: Nullable<RenderTargetWrapper> = null;\r\n\r\n        if (this._colorTextureArray && this._depthStencilTextureArray) {\r\n            rtw = (this._engine as Engine).createMultiviewRenderTargetTexture(this.width, this.height);\r\n            rtw.texture!.isReady = true;\r\n        } else {\r\n            rtw = super._cloneRenderTargetWrapper();\r\n        }\r\n\r\n        return rtw;\r\n    }\r\n\r\n    protected override _swapRenderTargetWrapper(target: WebGLRenderTargetWrapper): void {\r\n        super._swapRenderTargetWrapper(target);\r\n\r\n        target._framebuffer = this._framebuffer;\r\n        target._depthStencilBuffer = this._depthStencilBuffer;\r\n        target._MSAAFramebuffer = this._MSAAFramebuffer;\r\n        target._colorTextureArray = this._colorTextureArray;\r\n        target._depthStencilTextureArray = this._depthStencilTextureArray;\r\n\r\n        this._framebuffer = this._depthStencilBuffer = this._MSAAFramebuffer = this._colorTextureArray = this._depthStencilTextureArray = null;\r\n    }\r\n\r\n    /**\r\n     * Creates the depth/stencil texture\r\n     * @param comparisonFunction Comparison function to use for the texture\r\n     * @param bilinearFiltering true if bilinear filtering should be used when sampling the texture\r\n     * @param generateStencil true if the stencil aspect should also be created\r\n     * @param samples sample count to use when creating the texture\r\n     * @param format format of the depth texture\r\n     * @param label defines the label to use for the texture (for debugging purpose only)\r\n     * @returns the depth/stencil created texture\r\n     */\r\n    public override createDepthStencilTexture(\r\n        comparisonFunction: number = 0,\r\n        bilinearFiltering: boolean = true,\r\n        generateStencil: boolean = false,\r\n        samples: number = 1,\r\n        format: number = Constants.TEXTUREFORMAT_DEPTH32_FLOAT,\r\n        label?: string\r\n    ): InternalTexture {\r\n        if (this._depthStencilBuffer) {\r\n            const engine = this._engine as ThinEngine;\r\n            // Dispose previous depth/stencil render buffers and clear the corresponding attachment.\r\n            // Next time this framebuffer is bound, the new depth/stencil texture will be attached.\r\n            const currentFrameBuffer = engine._currentFramebuffer;\r\n            const gl = this._context;\r\n\r\n            engine._bindUnboundFramebuffer(this._framebuffer);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\r\n            engine._bindUnboundFramebuffer(currentFrameBuffer);\r\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\r\n\r\n            this._depthStencilBuffer = null;\r\n        }\r\n\r\n        return super.createDepthStencilTexture(comparisonFunction, bilinearFiltering, generateStencil, samples, format, label);\r\n    }\r\n\r\n    /**\r\n     * Shares the depth buffer of this render target with another render target.\r\n     * @param renderTarget Destination renderTarget\r\n     */\r\n    public override shareDepth(renderTarget: WebGLRenderTargetWrapper): void {\r\n        super.shareDepth(renderTarget);\r\n\r\n        const gl = this._context;\r\n        const depthbuffer = this._depthStencilBuffer;\r\n        const framebuffer = renderTarget._MSAAFramebuffer || renderTarget._framebuffer;\r\n        const engine = this._engine as ThinEngine;\r\n\r\n        if (renderTarget._depthStencilBuffer && renderTarget._depthStencilBuffer !== depthbuffer) {\r\n            gl.deleteRenderbuffer(renderTarget._depthStencilBuffer);\r\n        }\r\n        renderTarget._depthStencilBuffer = depthbuffer;\r\n        const attachment = renderTarget._generateStencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\r\n        engine._bindUnboundFramebuffer(framebuffer);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, depthbuffer);\r\n        engine._bindUnboundFramebuffer(null);\r\n    }\r\n\r\n    /**\r\n     * Binds a texture to this render target on a specific attachment\r\n     * @param texture The texture to bind to the framebuffer\r\n     * @param attachmentIndex Index of the attachment\r\n     * @param faceIndexOrLayer The face or layer of the texture to render to in case of cube texture or array texture\r\n     * @param lodLevel defines the lod level to bind to the frame buffer\r\n     */\r\n    private _bindTextureRenderTarget(texture: InternalTexture, attachmentIndex: number = 0, faceIndexOrLayer?: number, lodLevel: number = 0) {\r\n        const hardwareTexture = texture._hardwareTexture as WebGLHardwareTexture;\r\n        if (!hardwareTexture) {\r\n            return;\r\n        }\r\n\r\n        const framebuffer = this._framebuffer;\r\n        const engine = this._engine as ThinEngine;\r\n        const currentFB = engine._currentFramebuffer;\r\n        engine._bindUnboundFramebuffer(framebuffer);\r\n\r\n        let attachment: any;\r\n        if (engine.webGLVersion > 1) {\r\n            const gl = this._context as WebGL2RenderingContext;\r\n\r\n            attachment = (<any>gl)[\"COLOR_ATTACHMENT\" + attachmentIndex];\r\n            if (texture.is2DArray || texture.is3D) {\r\n                faceIndexOrLayer = faceIndexOrLayer ?? this.layerIndices?.[attachmentIndex] ?? 0;\r\n                gl.framebufferTextureLayer(gl.FRAMEBUFFER, attachment, hardwareTexture.underlyingResource, lodLevel, faceIndexOrLayer);\r\n            } else if (texture.isCube) {\r\n                // if face index is not specified, try to query it from faceIndices\r\n                // default is face 0\r\n                faceIndexOrLayer = faceIndexOrLayer ?? this.faceIndices?.[attachmentIndex] ?? 0;\r\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndexOrLayer, hardwareTexture.underlyingResource, lodLevel);\r\n            } else {\r\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, hardwareTexture.underlyingResource, lodLevel);\r\n            }\r\n        } else {\r\n            // Default behavior (WebGL)\r\n            const gl = this._context;\r\n\r\n            attachment = (<any>gl)[\"COLOR_ATTACHMENT\" + attachmentIndex + \"_WEBGL\"];\r\n            const target = faceIndexOrLayer !== undefined ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndexOrLayer : gl.TEXTURE_2D;\r\n\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, target, hardwareTexture.underlyingResource, lodLevel);\r\n        }\r\n\r\n        if (texture._autoMSAAManagement && this._MSAAFramebuffer) {\r\n            const gl = this._context;\r\n            engine._bindUnboundFramebuffer(this._MSAAFramebuffer);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, hardwareTexture.getMSAARenderBuffer());\r\n        }\r\n\r\n        engine._bindUnboundFramebuffer(currentFB);\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the textures array\r\n     * @param texture the texture to set\r\n     * @param index the index in the textures array to set\r\n     * @param disposePrevious If this function should dispose the previous texture\r\n     */\r\n    public override setTexture(texture: InternalTexture, index: number = 0, disposePrevious: boolean = true) {\r\n        super.setTexture(texture, index, disposePrevious);\r\n        this._bindTextureRenderTarget(texture, index);\r\n    }\r\n\r\n    /**\r\n     * Sets the layer and face indices of every render target texture\r\n     * @param layers The layer of the texture to be set (make negative to not modify)\r\n     * @param faces The face of the texture to be set (make negative to not modify)\r\n     */\r\n    public override setLayerAndFaceIndices(layers: number[], faces: number[]) {\r\n        super.setLayerAndFaceIndices(layers, faces);\r\n\r\n        if (!this.textures || !this.layerIndices || !this.faceIndices) {\r\n            return;\r\n        }\r\n\r\n        // the length of this._attachments is the right one as it does not count the depth texture, in case we generated it\r\n        const textureCount = this._attachments?.length ?? this.textures.length;\r\n        for (let index = 0; index < textureCount; index++) {\r\n            const texture = this.textures[index];\r\n            if (!texture) {\r\n                // The target type was probably -1 at creation time and setTexture has not been called yet for this index\r\n                continue;\r\n            }\r\n            if (texture.is2DArray || texture.is3D) {\r\n                this._bindTextureRenderTarget(texture, index, this.layerIndices[index]);\r\n            } else if (texture.isCube) {\r\n                this._bindTextureRenderTarget(texture, index, this.faceIndices[index]);\r\n            } else {\r\n                this._bindTextureRenderTarget(texture, index);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the face and layer indices of a texture in the textures array\r\n     * @param index The index of the texture in the textures array to modify\r\n     * @param layer The layer of the texture to be set\r\n     * @param face The face of the texture to be set\r\n     */\r\n    public override setLayerAndFaceIndex(index: number = 0, layer?: number, face?: number): void {\r\n        super.setLayerAndFaceIndex(index, layer, face);\r\n\r\n        if (!this.textures || !this.layerIndices || !this.faceIndices) {\r\n            return;\r\n        }\r\n\r\n        const texture = this.textures[index];\r\n        if (texture.is2DArray || texture.is3D) {\r\n            this._bindTextureRenderTarget(this.textures[index], index, this.layerIndices[index]);\r\n        } else if (texture.isCube) {\r\n            this._bindTextureRenderTarget(this.textures[index], index, this.faceIndices[index]);\r\n        }\r\n    }\r\n\r\n    public override resolveMSAATextures(): void {\r\n        const engine = this._engine as ThinEngine;\r\n        const currentFramebuffer = engine._currentFramebuffer;\r\n\r\n        engine._bindUnboundFramebuffer(this._MSAAFramebuffer);\r\n\r\n        super.resolveMSAATextures();\r\n\r\n        engine._bindUnboundFramebuffer(currentFramebuffer);\r\n    }\r\n\r\n    public override dispose(disposeOnlyFramebuffers = this._disposeOnlyFramebuffers): void {\r\n        const gl = this._context;\r\n\r\n        if (!disposeOnlyFramebuffers) {\r\n            if (this._colorTextureArray) {\r\n                this._context.deleteTexture(this._colorTextureArray);\r\n                this._colorTextureArray = null;\r\n            }\r\n            if (this._depthStencilTextureArray) {\r\n                this._context.deleteTexture(this._depthStencilTextureArray);\r\n                this._depthStencilTextureArray = null;\r\n            }\r\n        }\r\n\r\n        if (this._framebuffer) {\r\n            gl.deleteFramebuffer(this._framebuffer);\r\n            this._framebuffer = null;\r\n        }\r\n\r\n        if (this._depthStencilBuffer) {\r\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\r\n            this._depthStencilBuffer = null;\r\n        }\r\n\r\n        if (this._MSAAFramebuffer) {\r\n            gl.deleteFramebuffer(this._MSAAFramebuffer);\r\n            this._MSAAFramebuffer = null;\r\n        }\r\n\r\n        super.dispose(disposeOnlyFramebuffers);\r\n    }\r\n}\r\n", "import type { DepthTextureCreationOptions, TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport { AbstractEngine } from \"../abstractEngine\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Creates a depth stencil texture.\r\n         * This is only available in WebGL 2 or with the depth texture extension available.\r\n         * @param size The size of face edge in the texture.\r\n         * @param options The options defining the texture.\r\n         * @param rtWrapper The render target wrapper for which the depth/stencil texture must be created\r\n         * @returns The texture\r\n         */\r\n        createDepthStencilTexture(size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype.createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture {\r\n    if (options.isCube) {\r\n        const width = (<{ width: number; height: number }>size).width || <number>size;\r\n        return this._createDepthStencilCubeTexture(width, options);\r\n    } else {\r\n        return this._createDepthStencilTexture(size, options, rtWrapper);\r\n    }\r\n};\r\n", "import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { RenderTargetCreationOptions, DepthTextureCreationOptions, TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper\";\r\nimport type { WebGLHardwareTexture } from \"../WebGL/webGLHardwareTexture\";\r\nimport { HasStencilAspect } from \"core/Materials/Textures/textureHelper.functions\";\r\n\r\nimport { Constants } from \"../constants\";\r\n\r\nimport \"../AbstractEngine/abstractEngine.texture\";\r\n\r\n/**\r\n * Type used to define a texture size (either with a number or with a rect width and height)\r\n * @deprecated please use TextureSize instead\r\n */\r\nexport type RenderTargetTextureSize = TextureSize;\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Creates a new render target texture\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target wrapper ready to render texture\r\n         */\r\n        createRenderTargetTexture(size: TextureSize, options: boolean | RenderTargetCreationOptions): RenderTargetWrapper;\r\n\r\n        /**\r\n         * Updates the sample count of a render target texture\r\n         * @see https://doc.babylonjs.com/setup/support/webGL2#multisample-render-targets\r\n         * @param rtWrapper defines the render target wrapper to update\r\n         * @param samples defines the sample count to set\r\n         * @returns the effective sample count (could be 0 if multisample render targets are not supported)\r\n         */\r\n        updateRenderTargetTextureSampleCount(rtWrapper: Nullable<RenderTargetWrapper>, samples: number): number;\r\n\r\n        /** @internal */\r\n        _createDepthStencilTexture(size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture;\r\n\r\n        /** @internal */\r\n        _createHardwareRenderTargetWrapper(isMulti: boolean, isCube: boolean, size: TextureSize): RenderTargetWrapper;\r\n\r\n        /** @internal */\r\n        _setupDepthStencilTexture(internalTexture: InternalTexture, size: TextureSize, bilinearFiltering: boolean, comparisonFunction: number, samples?: number): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti: boolean, isCube: boolean, size: TextureSize): RenderTargetWrapper {\r\n    const rtWrapper = new WebGLRenderTargetWrapper(isMulti, isCube, size, this, this._gl);\r\n    this._renderTargetWrapperCache.push(rtWrapper);\r\n    return rtWrapper;\r\n};\r\n\r\nThinEngine.prototype.createRenderTargetTexture = function (this: ThinEngine, size: TextureSize, options: boolean | RenderTargetCreationOptions): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size) as WebGLRenderTargetWrapper;\r\n\r\n    let generateDepthBuffer = true;\r\n    let generateStencilBuffer = false;\r\n    let noColorAttachment = false;\r\n    let colorAttachment: InternalTexture | undefined = undefined;\r\n    let samples = 1;\r\n    let label: string | undefined = undefined;\r\n    if (options !== undefined && typeof options === \"object\") {\r\n        generateDepthBuffer = options.generateDepthBuffer ?? true;\r\n        generateStencilBuffer = !!options.generateStencilBuffer;\r\n        noColorAttachment = !!options.noColorAttachment;\r\n        colorAttachment = options.colorAttachment;\r\n        samples = options.samples ?? 1;\r\n        label = options.label;\r\n    }\r\n\r\n    const texture = colorAttachment || (noColorAttachment ? null : this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget));\r\n    const width = (<{ width: number; height: number; layers?: number }>size).width || <number>size;\r\n    const height = (<{ width: number; height: number; layers?: number }>size).height || <number>size;\r\n\r\n    const currentFrameBuffer = this._currentFramebuffer;\r\n    const gl = this._gl;\r\n\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(generateStencilBuffer, generateDepthBuffer, width, height);\r\n\r\n    // No need to rebind on every frame\r\n    if (texture && !texture.is2DArray && !texture.is3D) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture!.underlyingResource, 0);\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(currentFrameBuffer);\r\n\r\n    rtWrapper.label = label ?? \"RenderTargetWrapper\";\r\n    rtWrapper._framebuffer = framebuffer;\r\n    rtWrapper._generateDepthBuffer = generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = generateStencilBuffer;\r\n\r\n    rtWrapper.setTextures(texture);\r\n\r\n    if (!colorAttachment) {\r\n        this.updateRenderTargetTextureSampleCount(rtWrapper, samples);\r\n    } else {\r\n        rtWrapper._samples = colorAttachment.samples;\r\n        if (colorAttachment.samples > 1) {\r\n            const msaaRenderBuffer = (colorAttachment._hardwareTexture as WebGLHardwareTexture).getMSAARenderBuffer(0);\r\n\r\n            rtWrapper._MSAAFramebuffer = gl.createFramebuffer();\r\n\r\n            this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer!);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, msaaRenderBuffer);\r\n            this._bindUnboundFramebuffer(null);\r\n        }\r\n    }\r\n\r\n    return rtWrapper;\r\n};\r\n\r\nThinEngine.prototype._createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: WebGLRenderTargetWrapper): InternalTexture {\r\n    const gl = this._gl;\r\n    const layers = (<{ width: number; height: number; depth?: number; layers?: number }>size).layers || 0;\r\n    const depth = (<{ width: number; height: number; depth?: number; layers?: number }>size).depth || 0;\r\n    let target: number = gl.TEXTURE_2D;\r\n    if (layers !== 0) {\r\n        target = gl.TEXTURE_2D_ARRAY;\r\n    } else if (depth !== 0) {\r\n        target = gl.TEXTURE_3D;\r\n    }\r\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\r\n    internalTexture.label = options.label;\r\n    if (!this._caps.depthTextureExtension) {\r\n        Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\r\n        return internalTexture;\r\n    }\r\n\r\n    const internalOptions = {\r\n        bilinearFiltering: false,\r\n        comparisonFunction: 0,\r\n        generateStencil: false,\r\n        ...options,\r\n    };\r\n\r\n    this._bindTextureDirectly(target, internalTexture, true);\r\n\r\n    this._setupDepthStencilTexture(\r\n        internalTexture,\r\n        size,\r\n        internalOptions.comparisonFunction === 0 ? false : internalOptions.bilinearFiltering,\r\n        internalOptions.comparisonFunction,\r\n        internalOptions.samples\r\n    );\r\n\r\n    if (internalOptions.depthTextureFormat !== undefined) {\r\n        if (\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH16 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH24 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH32_FLOAT &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8\r\n        ) {\r\n            Logger.Error(`Depth texture ${internalOptions.depthTextureFormat} format is not supported.`);\r\n            return internalTexture;\r\n        }\r\n        internalTexture.format = internalOptions.depthTextureFormat;\r\n    } else {\r\n        internalTexture.format = internalOptions.generateStencil ? Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 : Constants.TEXTUREFORMAT_DEPTH24;\r\n    }\r\n\r\n    const hasStencil = HasStencilAspect(internalTexture.format);\r\n    const type = this._getWebGLTextureTypeFromDepthTextureFormat(internalTexture.format);\r\n    const format = hasStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\r\n    const internalFormat = this._getInternalFormatFromDepthTextureFormat(internalTexture.format, true, hasStencil);\r\n\r\n    if (internalTexture.is2DArray) {\r\n        gl.texImage3D(target, 0, internalFormat, internalTexture.width, internalTexture.height, layers, 0, format, type, null);\r\n    } else if (internalTexture.is3D) {\r\n        gl.texImage3D(target, 0, internalFormat, internalTexture.width, internalTexture.height, depth, 0, format, type, null);\r\n    } else {\r\n        gl.texImage2D(target, 0, internalFormat, internalTexture.width, internalTexture.height, 0, format, type, null);\r\n    }\r\n\r\n    this._bindTextureDirectly(target, null);\r\n\r\n    this._internalTexturesCache.push(internalTexture);\r\n\r\n    if (rtWrapper._depthStencilBuffer) {\r\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\r\n        rtWrapper._depthStencilBuffer = null;\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer ?? rtWrapper._framebuffer);\r\n\r\n    rtWrapper._generateStencilBuffer = hasStencil;\r\n    rtWrapper._depthStencilTextureWithStencil = hasStencil;\r\n\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(\r\n        rtWrapper._generateStencilBuffer,\r\n        rtWrapper._generateDepthBuffer,\r\n        rtWrapper.width,\r\n        rtWrapper.height,\r\n        rtWrapper.samples,\r\n        internalTexture.format\r\n    );\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    return internalTexture;\r\n};\r\n\r\nThinEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper: Nullable<WebGLRenderTargetWrapper>, samples: number): number {\r\n    if (this.webGLVersion < 2 || !rtWrapper) {\r\n        return 1;\r\n    }\r\n\r\n    if (rtWrapper.samples === samples) {\r\n        return samples;\r\n    }\r\n\r\n    const gl = this._gl;\r\n\r\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\r\n\r\n    // Dispose previous render buffers\r\n    if (rtWrapper._depthStencilBuffer) {\r\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\r\n        rtWrapper._depthStencilBuffer = null;\r\n    }\r\n\r\n    if (rtWrapper._MSAAFramebuffer) {\r\n        gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\r\n        rtWrapper._MSAAFramebuffer = null;\r\n    }\r\n\r\n    const hardwareTexture = rtWrapper.texture?._hardwareTexture as Nullable<WebGLHardwareTexture>;\r\n    hardwareTexture?.releaseMSAARenderBuffers();\r\n\r\n    if (rtWrapper.texture && samples > 1 && typeof gl.renderbufferStorageMultisample === \"function\") {\r\n        const framebuffer = gl.createFramebuffer();\r\n\r\n        if (!framebuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        rtWrapper._MSAAFramebuffer = framebuffer;\r\n        this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer);\r\n\r\n        const colorRenderbuffer = this._createRenderBuffer(\r\n            rtWrapper.texture.width,\r\n            rtWrapper.texture.height,\r\n            samples,\r\n            -1 /* not used */,\r\n            this._getRGBABufferInternalSizedFormat(rtWrapper.texture.type, rtWrapper.texture.format, rtWrapper.texture._useSRGBBuffer),\r\n            gl.COLOR_ATTACHMENT0,\r\n            false\r\n        );\r\n\r\n        if (!colorRenderbuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        hardwareTexture?.addMSAARenderBuffer(colorRenderbuffer);\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer ?? rtWrapper._framebuffer);\r\n\r\n    if (rtWrapper.texture) {\r\n        rtWrapper.texture.samples = samples;\r\n    }\r\n\r\n    rtWrapper._samples = samples;\r\n\r\n    const depthFormat = rtWrapper._depthStencilTexture ? rtWrapper._depthStencilTexture.format : undefined;\r\n\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(\r\n        rtWrapper._generateStencilBuffer,\r\n        rtWrapper._generateDepthBuffer,\r\n        rtWrapper.width,\r\n        rtWrapper.height,\r\n        samples,\r\n        depthFormat\r\n    );\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    return samples;\r\n};\r\n\r\nThinEngine.prototype._setupDepthStencilTexture = function (\r\n    internalTexture: InternalTexture,\r\n    size: TextureSize,\r\n    bilinearFiltering: boolean,\r\n    comparisonFunction: number,\r\n    samples = 1\r\n) {\r\n    const width = (<{ width: number; height: number; layers?: number }>size).width ?? <number>size;\r\n    const height = (<{ width: number; height: number; layers?: number }>size).height ?? <number>size;\r\n    const layers = (<{ width: number; height: number; depth?: number; layers?: number }>size).layers || 0;\r\n    const depth = (<{ width: number; height: number; depth?: number; layers?: number }>size).depth || 0;\r\n\r\n    internalTexture.baseWidth = width;\r\n    internalTexture.baseHeight = height;\r\n    internalTexture.width = width;\r\n    internalTexture.height = height;\r\n    internalTexture.is2DArray = layers > 0;\r\n    internalTexture.depth = layers || depth;\r\n    internalTexture.isReady = true;\r\n    internalTexture.samples = samples;\r\n    internalTexture.generateMipMaps = false;\r\n    internalTexture.samplingMode = bilinearFiltering ? Constants.TEXTURE_BILINEAR_SAMPLINGMODE : Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n    internalTexture._comparisonFunction = comparisonFunction;\r\n\r\n    const gl = this._gl;\r\n    const target = this._getTextureTarget(internalTexture);\r\n    const samplingParameters = this._getSamplingParameters(internalTexture.samplingMode, false);\r\n    gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, samplingParameters.mag);\r\n    gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, samplingParameters.min);\r\n    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n    // TEXTURE_COMPARE_FUNC/MODE are only availble in WebGL2.\r\n    if (this.webGLVersion > 1) {\r\n        if (comparisonFunction === 0) {\r\n            gl.texParameteri(target, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n            gl.texParameteri(target, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n        } else {\r\n            gl.texParameteri(target, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n            gl.texParameteri(target, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n        }\r\n    }\r\n};\r\n", "import type { Nullable } from \"../../types\";\r\nimport { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Sets a depth stencil texture from a render target to the according uniform.\r\n         * @param channel The texture channel\r\n         * @param uniform The uniform to set\r\n         * @param texture The render target texture containing the depth stencil texture to apply\r\n         * @param name The texture name\r\n         */\r\n        setDepthStencilTexture(channel: number, uniform: Nullable<WebGLUniformLocation>, texture: Nullable<RenderTargetTexture>, name?: string): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.setDepthStencilTexture = function (channel: number, uniform: Nullable<WebGLUniformLocation>, texture: Nullable<RenderTargetTexture>, name?: string): void {\r\n    if (channel === undefined) {\r\n        return;\r\n    }\r\n\r\n    if (uniform) {\r\n        this._boundUniforms[channel] = uniform;\r\n    }\r\n\r\n    if (!texture || !texture.depthStencilTexture) {\r\n        this._setTexture(channel, null, undefined, undefined, name);\r\n    } else {\r\n        this._setTexture(channel, texture, false, true, name);\r\n    }\r\n};\r\n", "import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { Constants } from \"../constants\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper\";\r\nimport type { RenderTargetCreationOptions } from \"../../Materials/Textures/textureCreationOptions\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Creates a new render target cube wrapper\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target cube wrapper\r\n         */\r\n        createRenderTargetCubeTexture(size: number, options?: RenderTargetCreationOptions): RenderTargetWrapper;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createRenderTargetCubeTexture = function (size: number, options?: RenderTargetCreationOptions): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size) as WebGLRenderTargetWrapper;\r\n\r\n    const fullOptions = {\r\n        generateMipMaps: true,\r\n        generateDepthBuffer: true,\r\n        generateStencilBuffer: false,\r\n        type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        samplingMode: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        format: Constants.TEXTUREFORMAT_RGBA,\r\n        ...options,\r\n    };\r\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\r\n\r\n    if (fullOptions.type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloatLinearFiltering) {\r\n        // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    } else if (fullOptions.type === Constants.TEXTURETYPE_HALF_FLOAT && !this._caps.textureHalfFloatLinearFiltering) {\r\n        // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    }\r\n    const gl = this._gl;\r\n\r\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n    const filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\r\n\r\n    if (fullOptions.type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloat) {\r\n        fullOptions.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\r\n    }\r\n\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n    for (let face = 0; face < 6; face++) {\r\n        gl.texImage2D(\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\r\n            0,\r\n            this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format),\r\n            size,\r\n            size,\r\n            0,\r\n            this._getInternalFormat(fullOptions.format),\r\n            this._getWebGLTextureType(fullOptions.type),\r\n            null\r\n        );\r\n    }\r\n\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size);\r\n\r\n    // MipMaps\r\n    if (fullOptions.generateMipMaps) {\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n    }\r\n\r\n    // Unbind\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    rtWrapper._framebuffer = framebuffer;\r\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\r\n\r\n    texture.width = size;\r\n    texture.height = size;\r\n    texture.isReady = true;\r\n    texture.isCube = true;\r\n    texture.samples = 1;\r\n    texture.generateMipMaps = fullOptions.generateMipMaps;\r\n    texture.samplingMode = fullOptions.samplingMode;\r\n    texture.type = fullOptions.type;\r\n    texture.format = fullOptions.format;\r\n\r\n    this._internalTexturesCache.push(texture);\r\n    rtWrapper.setTextures(texture);\r\n\r\n    return rtWrapper;\r\n};\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Constants } from \"../constants\";\r\nimport { SphericalPolynomial } from \"core/Maths/sphericalPolynomial\";\r\nimport { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { DDSInfo } from \"core/Misc/dds\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Create a cube texture from prefiltered data (ie. the mipmaps contain ready to use data for PBR reflection)\r\n         * @param rootUrl defines the url where the file to load is located\r\n         * @param scene defines the current scene\r\n         * @param lodScale defines scale to apply to the mip map selection\r\n         * @param lodOffset defines offset to apply to the mip map selection\r\n         * @param onLoad defines an optional callback raised when the texture is loaded\r\n         * @param onError defines an optional callback raised if there is an issue to load the texture\r\n         * @param format defines the format of the data\r\n         * @param forcedExtension defines the extension to use to pick the right loader\r\n         * @param createPolynomials defines wheter or not to create polynomails harmonics for the texture\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createPrefilteredCubeTexture(\r\n            rootUrl: string,\r\n            scene: Nullable<Scene>,\r\n            lodScale: number,\r\n            lodOffset: number,\r\n            onLoad?: Nullable<(internalTexture: Nullable<InternalTexture>) => void>,\r\n            onError?: Nullable<(message?: string, exception?: any) => void>,\r\n            format?: number,\r\n            forcedExtension?: any,\r\n            createPolynomials?: boolean\r\n        ): InternalTexture;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createPrefilteredCubeTexture = function (\r\n    rootUrl: string,\r\n    scene: Nullable<Scene>,\r\n    lodScale: number,\r\n    lodOffset: number,\r\n    onLoad: Nullable<(internalTexture: Nullable<InternalTexture>) => void> = null,\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    format?: number,\r\n    forcedExtension: any = null,\r\n    createPolynomials: boolean = true\r\n): InternalTexture {\r\n    const callback = async (loadData: any) => {\r\n        if (!loadData) {\r\n            if (onLoad) {\r\n                onLoad(null);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const texture = loadData.texture as InternalTexture;\r\n        if (!createPolynomials) {\r\n            texture._sphericalPolynomial = new SphericalPolynomial();\r\n        } else if (loadData.info.sphericalPolynomial) {\r\n            texture._sphericalPolynomial = loadData.info.sphericalPolynomial;\r\n        }\r\n        texture._source = InternalTextureSource.CubePrefiltered;\r\n\r\n        if (this.getCaps().textureLOD) {\r\n            // Do not add extra process if texture lod is supported.\r\n            if (onLoad) {\r\n                onLoad(texture);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const mipSlices = 3;\r\n\r\n        const gl = this._gl;\r\n        const width = loadData.width;\r\n        if (!width) {\r\n            return;\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        const { DDSTools } = await import(\"core/Misc/dds\");\r\n\r\n        const textures: BaseTexture[] = [];\r\n        for (let i = 0; i < mipSlices; i++) {\r\n            //compute LOD from even spacing in smoothness (matching shader calculation)\r\n            const smoothness = i / (mipSlices - 1);\r\n            const roughness = 1 - smoothness;\r\n\r\n            const minLODIndex = lodOffset; // roughness = 0\r\n            const maxLODIndex = Math.log2(width) * lodScale + lodOffset; // roughness = 1\r\n\r\n            const lodIndex = minLODIndex + (maxLODIndex - minLODIndex) * roughness;\r\n            const mipmapIndex = Math.round(Math.min(Math.max(lodIndex, 0), maxLODIndex));\r\n\r\n            const glTextureFromLod = new InternalTexture(this, InternalTextureSource.Temp);\r\n            glTextureFromLod.type = texture.type;\r\n            glTextureFromLod.format = texture.format;\r\n            glTextureFromLod.width = Math.pow(2, Math.max(Math.log2(width) - mipmapIndex, 0));\r\n            glTextureFromLod.height = glTextureFromLod.width;\r\n            glTextureFromLod.isCube = true;\r\n            glTextureFromLod._cachedWrapU = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n            glTextureFromLod._cachedWrapV = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, glTextureFromLod, true);\r\n\r\n            glTextureFromLod.samplingMode = Constants.TEXTURE_LINEAR_LINEAR;\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n            if (loadData.isDDS) {\r\n                const info: DDSInfo = loadData.info;\r\n                const data: any = loadData.data;\r\n                this._unpackFlipY(info.isCompressed);\r\n\r\n                DDSTools.UploadDDSLevels(this, glTextureFromLod, data, info, true, 6, mipmapIndex);\r\n            } else {\r\n                Logger.Warn(\"DDS is the only prefiltered cube map supported so far.\");\r\n            }\r\n\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n\r\n            // Wrap in a base texture for easy binding.\r\n            const lodTexture = new BaseTexture(scene);\r\n            lodTexture._isCube = true;\r\n            lodTexture._texture = glTextureFromLod;\r\n\r\n            glTextureFromLod.isReady = true;\r\n            textures.push(lodTexture);\r\n        }\r\n\r\n        texture._lodTextureHigh = textures[2];\r\n        texture._lodTextureMid = textures[1];\r\n        texture._lodTextureLow = textures[0];\r\n\r\n        if (onLoad) {\r\n            onLoad(texture);\r\n        }\r\n    };\r\n\r\n    return this.createCubeTexture(rootUrl, scene, null, false, callback, onError, format, forcedExtension, createPolynomials, lodScale, lodOffset);\r\n};\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { FloatArray, Nullable } from \"../../types\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport { WebGLDataBuffer } from \"../../Meshes/WebGL/webGLDataBuffer\";\r\nimport type { IPipelineContext } from \"../IPipelineContext\";\r\nimport type { WebGLPipelineContext } from \"../WebGL/webGLPipelineContext\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Create an uniform buffer\r\n         * @see https://doc.babylonjs.com/setup/support/webGL2#uniform-buffer-objets\r\n         * @param elements defines the content of the uniform buffer\r\n         * @param label defines a name for the buffer (for debugging purpose)\r\n         * @returns the webGL uniform buffer\r\n         */\r\n        createUniformBuffer(elements: FloatArray, label?: string): DataBuffer;\r\n\r\n        /**\r\n         * Create a dynamic uniform buffer\r\n         * @see https://doc.babylonjs.com/setup/support/webGL2#uniform-buffer-objets\r\n         * @param elements defines the content of the uniform buffer\r\n         * @param label defines a name for the buffer (for debugging purpose)\r\n         * @returns the webGL uniform buffer\r\n         */\r\n        createDynamicUniformBuffer(elements: FloatArray, label?: string): DataBuffer;\r\n\r\n        /**\r\n         * Update an existing uniform buffer\r\n         * @see https://doc.babylonjs.com/setup/support/webGL2#uniform-buffer-objets\r\n         * @param uniformBuffer defines the target uniform buffer\r\n         * @param elements defines the content to update\r\n         * @param offset defines the offset in the uniform buffer where update should start\r\n         * @param count defines the size of the data to update\r\n         */\r\n        updateUniformBuffer(uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void;\r\n\r\n        /**\r\n         * Bind an uniform buffer to the current webGL context\r\n         * @param buffer defines the buffer to bind\r\n         */\r\n        bindUniformBuffer(buffer: Nullable<DataBuffer>): void;\r\n\r\n        /**\r\n         * Bind a buffer to the current webGL context at a given location\r\n         * @param buffer defines the buffer to bind\r\n         * @param location defines the index where to bind the buffer\r\n         * @param name Name of the uniform variable to bind\r\n         */\r\n        bindUniformBufferBase(buffer: DataBuffer, location: number, name: string): void;\r\n\r\n        /**\r\n         * Bind a specific block at a given index in a specific shader program\r\n         * @param pipelineContext defines the pipeline context to use\r\n         * @param blockName defines the block name\r\n         * @param index defines the index where to bind the block\r\n         */\r\n        bindUniformBlock(pipelineContext: IPipelineContext, blockName: string, index: number): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createUniformBuffer = function (elements: FloatArray, _label?: string): DataBuffer {\r\n    const ubo = this._gl.createBuffer();\r\n\r\n    if (!ubo) {\r\n        throw new Error(\"Unable to create uniform buffer\");\r\n    }\r\n    const result = new WebGLDataBuffer(ubo);\r\n\r\n    this.bindUniformBuffer(result);\r\n\r\n    if (elements instanceof Float32Array) {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, <Float32Array>elements, this._gl.STATIC_DRAW);\r\n    } else {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(<number[]>elements), this._gl.STATIC_DRAW);\r\n    }\r\n\r\n    this.bindUniformBuffer(null);\r\n\r\n    result.references = 1;\r\n    return result;\r\n};\r\n\r\nThinEngine.prototype.createDynamicUniformBuffer = function (elements: FloatArray, _label?: string): DataBuffer {\r\n    const ubo = this._gl.createBuffer();\r\n\r\n    if (!ubo) {\r\n        throw new Error(\"Unable to create dynamic uniform buffer\");\r\n    }\r\n\r\n    const result = new WebGLDataBuffer(ubo);\r\n    this.bindUniformBuffer(result);\r\n\r\n    if (elements instanceof Float32Array) {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, <Float32Array>elements, this._gl.DYNAMIC_DRAW);\r\n    } else {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(<number[]>elements), this._gl.DYNAMIC_DRAW);\r\n    }\r\n\r\n    this.bindUniformBuffer(null);\r\n\r\n    result.references = 1;\r\n    return result;\r\n};\r\n\r\nThinEngine.prototype.updateUniformBuffer = function (uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void {\r\n    this.bindUniformBuffer(uniformBuffer);\r\n\r\n    if (offset === undefined) {\r\n        offset = 0;\r\n    }\r\n\r\n    if (count === undefined) {\r\n        if (elements instanceof Float32Array) {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, <Float32Array>elements);\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, new Float32Array(<number[]>elements));\r\n        }\r\n    } else {\r\n        if (elements instanceof Float32Array) {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, <Float32Array>elements.subarray(offset, offset + count));\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, new Float32Array(<number[]>elements).subarray(offset, offset + count));\r\n        }\r\n    }\r\n\r\n    this.bindUniformBuffer(null);\r\n};\r\n\r\nThinEngine.prototype.bindUniformBuffer = function (buffer: Nullable<DataBuffer>): void {\r\n    this._gl.bindBuffer(this._gl.UNIFORM_BUFFER, buffer ? buffer.underlyingResource : null);\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.bindUniformBufferBase = function (buffer: DataBuffer, location: number, name: string): void {\r\n    this._gl.bindBufferBase(this._gl.UNIFORM_BUFFER, location, buffer ? buffer.underlyingResource : null);\r\n};\r\n\r\nThinEngine.prototype.bindUniformBlock = function (pipelineContext: IPipelineContext, blockName: string, index: number): void {\r\n    const program = (pipelineContext as WebGLPipelineContext).program!;\r\n\r\n    const uniformLocation = this._gl.getUniformBlockIndex(program, blockName);\r\n\r\n    if (uniformLocation !== 0xffffffff) {\r\n        this._gl.uniformBlockBinding(program, uniformLocation, index);\r\n    }\r\n};\r\n", "import { IsWindowObjectExist } from \"../../Misc/domManagement\";\r\nimport type { ILoadingScreen } from \"../../Loading/loadingScreen\";\r\nimport { AbstractEngine } from \"../abstractEngine\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Display the loading screen\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n         */\r\n        displayLoadingUI(): void;\r\n\r\n        /**\r\n         * Hide the loading screen\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n         */\r\n        hideLoadingUI(): void;\r\n\r\n        /**\r\n         * Gets or sets the current loading screen object\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n         */\r\n        loadingScreen: ILoadingScreen;\r\n\r\n        /**\r\n         * Sets the current loading screen text\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n         */\r\n        loadingUIText: string;\r\n\r\n        /**\r\n         * Sets the current loading screen background color\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n         */\r\n        loadingUIBackgroundColor: string;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype.displayLoadingUI = function (): void {\r\n    if (!IsWindowObjectExist()) {\r\n        return;\r\n    }\r\n    const loadingScreen = this.loadingScreen;\r\n    if (loadingScreen) {\r\n        loadingScreen.displayLoadingUI();\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype.hideLoadingUI = function (): void {\r\n    if (!IsWindowObjectExist()) {\r\n        return;\r\n    }\r\n    const loadingScreen = this._loadingScreen;\r\n    if (loadingScreen) {\r\n        loadingScreen.hideLoadingUI();\r\n    }\r\n};\r\n\r\nObject.defineProperty(AbstractEngine.prototype, \"loadingScreen\", {\r\n    get: function (this: AbstractEngine) {\r\n        if (!this._loadingScreen && this._renderingCanvas) {\r\n            this._loadingScreen = AbstractEngine.DefaultLoadingScreenFactory(this._renderingCanvas);\r\n        }\r\n        return this._loadingScreen;\r\n    },\r\n    set: function (this: AbstractEngine, value: ILoadingScreen) {\r\n        this._loadingScreen = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(AbstractEngine.prototype, \"loadingUIText\", {\r\n    set: function (this: AbstractEngine, value: string) {\r\n        this.loadingScreen.loadingUIText = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(AbstractEngine.prototype, \"loadingUIBackgroundColor\", {\r\n    set: function (this: AbstractEngine, value: string) {\r\n        this.loadingScreen.loadingUIBackgroundColor = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n", "import type { IViewportLike } from \"../../Maths/math.like\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { AbstractEngine } from \"../abstractEngine\";\r\n\r\n/**\r\n * Defines the interface used by objects containing a viewport (like a camera)\r\n */\r\ninterface IViewportOwnerLike {\r\n    /**\r\n     * Gets or sets the viewport\r\n     */\r\n    viewport: IViewportLike;\r\n}\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Gets the HTML element used to attach event listeners\r\n         * @returns a HTML element\r\n         */\r\n        getInputElement(): Nullable<HTMLElement>;\r\n\r\n        /**\r\n         * Gets the client rect of the HTML canvas attached with the current webGL context\r\n         * @returns a client rectangle\r\n         */\r\n        getRenderingCanvasClientRect(): Nullable<ClientRect>;\r\n\r\n        /**\r\n         * Gets the client rect of the HTML element used for events\r\n         * @returns a client rectangle\r\n         */\r\n        getInputElementClientRect(): Nullable<ClientRect>;\r\n\r\n        /**\r\n         * Gets current aspect ratio\r\n         * @param viewportOwner defines the camera to use to get the aspect ratio\r\n         * @param useScreen defines if screen size must be used (or the current render target if any)\r\n         * @returns a number defining the aspect ratio\r\n         */\r\n        getAspectRatio(viewportOwner: IViewportOwnerLike, useScreen?: boolean): number;\r\n\r\n        /**\r\n         * Gets current screen aspect ratio\r\n         * @returns a number defining the aspect ratio\r\n         */\r\n        getScreenAspectRatio(): number;\r\n\r\n        /**\r\n         * Toggle full screen mode\r\n         * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n         */\r\n        switchFullscreen(requestPointerLock: boolean): void;\r\n\r\n        /**\r\n         * Enters full screen mode\r\n         * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n         */\r\n        enterFullscreen(requestPointerLock: boolean): void;\r\n\r\n        /**\r\n         * Exits full screen mode\r\n         */\r\n        exitFullscreen(): void;\r\n\r\n        /** @internal */\r\n        _onPointerLockChange: () => void;\r\n\r\n        /** @internal */\r\n        _verifyPointerLock(): void;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype.getInputElement = function (): Nullable<HTMLElement> {\r\n    return this._renderingCanvas;\r\n};\r\n\r\nAbstractEngine.prototype.getRenderingCanvasClientRect = function (): Nullable<ClientRect> {\r\n    if (!this._renderingCanvas) {\r\n        return null;\r\n    }\r\n    return this._renderingCanvas.getBoundingClientRect();\r\n};\r\n\r\nAbstractEngine.prototype.getInputElementClientRect = function (): Nullable<ClientRect> {\r\n    if (!this._renderingCanvas) {\r\n        return null;\r\n    }\r\n    return this.getInputElement()!.getBoundingClientRect();\r\n};\r\n\r\nAbstractEngine.prototype.getAspectRatio = function (viewportOwner: IViewportOwnerLike, useScreen = false): number {\r\n    const viewport = viewportOwner.viewport;\r\n    return (this.getRenderWidth(useScreen) * viewport.width) / (this.getRenderHeight(useScreen) * viewport.height);\r\n};\r\n\r\nAbstractEngine.prototype.getScreenAspectRatio = function (): number {\r\n    return this.getRenderWidth(true) / this.getRenderHeight(true);\r\n};\r\n\r\nAbstractEngine.prototype._verifyPointerLock = function (): void {\r\n    this._onPointerLockChange?.();\r\n};\r\n", "import { AbstractEngine } from \"../abstractEngine\";\r\nimport { Constants } from \"../constants\";\r\n\r\ndeclare module \"../abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Sets the current alpha equation\r\n         * @param equation defines the equation to use (one of the Engine.ALPHA_EQUATION_XXX)\r\n         */\r\n        setAlphaEquation(equation: number): void;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype.setAlphaEquation = function (equation: number): void {\r\n    if (this._alphaEquation === equation) {\r\n        return;\r\n    }\r\n\r\n    switch (equation) {\r\n        case Constants.ALPHA_EQUATION_ADD:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_ADD, Constants.GL_ALPHA_EQUATION_ADD);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_SUBSTRACT:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_SUBTRACT, Constants.GL_ALPHA_EQUATION_SUBTRACT);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_REVERSE_SUBTRACT:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT, Constants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_MAX:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MAX, Constants.GL_ALPHA_EQUATION_MAX);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_MIN:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MIN, Constants.GL_ALPHA_EQUATION_MIN);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_DARKEN:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MIN, Constants.GL_ALPHA_EQUATION_ADD);\r\n            break;\r\n    }\r\n    this._alphaEquation = equation;\r\n};\r\n", "import type { Nullable } from \"../../types\";\r\nimport { AbstractEngine } from \"../abstractEngine\";\r\nimport { Constants } from \"../constants\";\r\n\r\nimport \"./abstractEngine.alpha\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /** @internal */\r\n        _cachedStencilBuffer: boolean;\r\n        /** @internal */\r\n        _cachedStencilFunction: number;\r\n        /** @internal */\r\n        _cachedStencilMask: number;\r\n        /** @internal */\r\n        _cachedStencilOperationPass: number;\r\n        /** @internal */\r\n        _cachedStencilOperationFail: number;\r\n        /** @internal */\r\n        _cachedStencilOperationDepthFail: number;\r\n        /** @internal */\r\n        _cachedStencilReference: number;\r\n\r\n        /**\r\n         * Gets the current depth function\r\n         * @returns a number defining the depth function\r\n         */\r\n        getDepthFunction(): Nullable<number>;\r\n\r\n        /**\r\n         * Sets the current depth function\r\n         * @param depthFunc defines the function to use\r\n         */\r\n        setDepthFunction(depthFunc: number): void;\r\n\r\n        /**\r\n         * Sets the current depth function to GREATER\r\n         */\r\n        setDepthFunctionToGreater(): void;\r\n\r\n        /**\r\n         * Sets the current depth function to GEQUAL\r\n         */\r\n        setDepthFunctionToGreaterOrEqual(): void;\r\n\r\n        /**\r\n         * Sets the current depth function to LESS\r\n         */\r\n        setDepthFunctionToLess(): void;\r\n\r\n        /**\r\n         * Sets the current depth function to LEQUAL\r\n         */\r\n        setDepthFunctionToLessOrEqual(): void;\r\n\r\n        /**\r\n         * Gets a boolean indicating if depth writing is enabled\r\n         * @returns the current depth writing state\r\n         */\r\n        getDepthWrite(): boolean;\r\n\r\n        /**\r\n         * Enable or disable depth writing\r\n         * @param enable defines the state to set\r\n         */\r\n        setDepthWrite(enable: boolean): void;\r\n\r\n        /**\r\n         * Gets the current stencil operation when stencil passes\r\n         * @returns a number defining stencil operation to use when stencil passes\r\n         */\r\n        getStencilOperationPass(): number;\r\n\r\n        /**\r\n         * Gets a boolean indicating if stencil buffer is enabled\r\n         * @returns the current stencil buffer state\r\n         */\r\n        getStencilBuffer(): boolean;\r\n\r\n        /**\r\n         * Enable or disable the stencil buffer\r\n         * @param enable defines if the stencil buffer must be enabled or disabled\r\n         */\r\n        setStencilBuffer(enable: boolean): void;\r\n\r\n        /**\r\n         * Gets the current stencil mask\r\n         * @returns a number defining the new stencil mask to use\r\n         */\r\n        getStencilMask(): number;\r\n        /**\r\n         * Sets the current stencil mask\r\n         * @param mask defines the new stencil mask to use\r\n         */\r\n        setStencilMask(mask: number): void;\r\n\r\n        /**\r\n         * Gets the current stencil function\r\n         * @returns a number defining the stencil function to use\r\n         */\r\n        getStencilFunction(): number;\r\n\r\n        /**\r\n         * Gets the current stencil reference value\r\n         * @returns a number defining the stencil reference value to use\r\n         */\r\n        getStencilFunctionReference(): number;\r\n\r\n        /**\r\n         * Gets the current stencil mask\r\n         * @returns a number defining the stencil mask to use\r\n         */\r\n        getStencilFunctionMask(): number;\r\n\r\n        /**\r\n         * Sets the current stencil function\r\n         * @param stencilFunc defines the new stencil function to use\r\n         */\r\n        setStencilFunction(stencilFunc: number): void;\r\n\r\n        /**\r\n         * Sets the current stencil reference\r\n         * @param reference defines the new stencil reference to use\r\n         */\r\n        setStencilFunctionReference(reference: number): void;\r\n\r\n        /**\r\n         * Sets the current stencil mask\r\n         * @param mask defines the new stencil mask to use\r\n         */\r\n        setStencilFunctionMask(mask: number): void;\r\n\r\n        /**\r\n         * Gets the current stencil operation when stencil fails\r\n         * @returns a number defining stencil operation to use when stencil fails\r\n         */\r\n        getStencilOperationFail(): number;\r\n\r\n        /**\r\n         * Gets the current stencil operation when depth fails\r\n         * @returns a number defining stencil operation to use when depth fails\r\n         */\r\n        getStencilOperationDepthFail(): number;\r\n\r\n        /**\r\n         * Sets the stencil operation to use when stencil fails\r\n         * @param operation defines the stencil operation to use when stencil fails\r\n         */\r\n        setStencilOperationFail(operation: number): void;\r\n\r\n        /**\r\n         * Sets the stencil operation to use when depth fails\r\n         * @param operation defines the stencil operation to use when depth fails\r\n         */\r\n        setStencilOperationDepthFail(operation: number): void;\r\n\r\n        /**\r\n         * Sets the stencil operation to use when stencil passes\r\n         * @param operation defines the stencil operation to use when stencil passes\r\n         */\r\n        setStencilOperationPass(operation: number): void;\r\n\r\n        /**\r\n         * Caches the state of the stencil buffer\r\n         */\r\n        cacheStencilState(): void;\r\n\r\n        /**\r\n         * Restores the state of the stencil buffer\r\n         */\r\n        restoreStencilState(): void;\r\n\r\n        /**\r\n         * Sets alpha constants used by some alpha blending modes\r\n         * @param r defines the red component\r\n         * @param g defines the green component\r\n         * @param b defines the blue component\r\n         * @param a defines the alpha component\r\n         */\r\n        setAlphaConstants(r: number, g: number, b: number, a: number): void;\r\n\r\n        /**\r\n         * Gets the current alpha mode\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering\r\n         * @returns the current alpha mode\r\n         */\r\n        getAlphaMode(): number;\r\n\r\n        /**\r\n         * Gets the current alpha equation.\r\n         * @returns the current alpha equation\r\n         */\r\n        getAlphaEquation(): number;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype.getInputElement = function (): Nullable<HTMLElement> {\r\n    return this._renderingCanvas;\r\n};\r\n\r\nAbstractEngine.prototype.getDepthFunction = function (): Nullable<number> {\r\n    return this._depthCullingState.depthFunc;\r\n};\r\n\r\nAbstractEngine.prototype.setDepthFunction = function (depthFunc: number) {\r\n    this._depthCullingState.depthFunc = depthFunc;\r\n};\r\n\r\nAbstractEngine.prototype.setDepthFunctionToGreater = function (): void {\r\n    this.setDepthFunction(Constants.GREATER);\r\n};\r\n\r\nAbstractEngine.prototype.setDepthFunctionToGreaterOrEqual = function (): void {\r\n    this.setDepthFunction(Constants.GEQUAL);\r\n};\r\n\r\nAbstractEngine.prototype.setDepthFunctionToLess = function (): void {\r\n    this.setDepthFunction(Constants.LESS);\r\n};\r\nAbstractEngine.prototype.setDepthFunctionToLessOrEqual = function (): void {\r\n    this.setDepthFunction(Constants.LEQUAL);\r\n};\r\n\r\nAbstractEngine.prototype.getDepthWrite = function (): boolean {\r\n    return this._depthCullingState.depthMask;\r\n};\r\n\r\nAbstractEngine.prototype.setDepthWrite = function (enable: boolean): void {\r\n    this._depthCullingState.depthMask = enable;\r\n};\r\n\r\nAbstractEngine.prototype.getStencilBuffer = function (): boolean {\r\n    return this._stencilState.stencilTest;\r\n};\r\n\r\nAbstractEngine.prototype.setStencilBuffer = function (enable: boolean): void {\r\n    this._stencilState.stencilTest = enable;\r\n};\r\n\r\nAbstractEngine.prototype.getStencilMask = function (): number {\r\n    return this._stencilState.stencilMask;\r\n};\r\n\r\nAbstractEngine.prototype.setStencilMask = function (mask: number): void {\r\n    this._stencilState.stencilMask = mask;\r\n};\r\n\r\nAbstractEngine.prototype.getStencilFunction = function (): number {\r\n    return this._stencilState.stencilFunc;\r\n};\r\n\r\nAbstractEngine.prototype.getStencilFunctionReference = function (): number {\r\n    return this._stencilState.stencilFuncRef;\r\n};\r\n\r\nAbstractEngine.prototype.getStencilFunctionMask = function (): number {\r\n    return this._stencilState.stencilFuncMask;\r\n};\r\n\r\nAbstractEngine.prototype.setStencilFunction = function (stencilFunc: number) {\r\n    this._stencilState.stencilFunc = stencilFunc;\r\n};\r\n\r\nAbstractEngine.prototype.setStencilFunctionReference = function (reference: number): void {\r\n    this._stencilState.stencilFuncRef = reference;\r\n};\r\n\r\nAbstractEngine.prototype.setStencilFunctionMask = function (mask: number): void {\r\n    this._stencilState.stencilFuncMask = mask;\r\n};\r\n\r\nAbstractEngine.prototype.getStencilOperationFail = function (): number {\r\n    return this._stencilState.stencilOpStencilFail;\r\n};\r\n\r\nAbstractEngine.prototype.getStencilOperationDepthFail = function (): number {\r\n    return this._stencilState.stencilOpDepthFail;\r\n};\r\n\r\nAbstractEngine.prototype.getStencilOperationPass = function (): number {\r\n    return this._stencilState.stencilOpStencilDepthPass;\r\n};\r\n\r\nAbstractEngine.prototype.setStencilOperationFail = function (operation: number): void {\r\n    this._stencilState.stencilOpStencilFail = operation;\r\n};\r\n\r\nAbstractEngine.prototype.setStencilOperationDepthFail = function (operation: number): void {\r\n    this._stencilState.stencilOpDepthFail = operation;\r\n};\r\n\r\nAbstractEngine.prototype.setStencilOperationPass = function (operation: number): void {\r\n    this._stencilState.stencilOpStencilDepthPass = operation;\r\n};\r\n\r\nAbstractEngine.prototype.cacheStencilState = function (): void {\r\n    this._cachedStencilBuffer = this.getStencilBuffer();\r\n    this._cachedStencilFunction = this.getStencilFunction();\r\n    this._cachedStencilMask = this.getStencilMask();\r\n    this._cachedStencilOperationPass = this.getStencilOperationPass();\r\n    this._cachedStencilOperationFail = this.getStencilOperationFail();\r\n    this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\r\n    this._cachedStencilReference = this.getStencilFunctionReference();\r\n};\r\n\r\nAbstractEngine.prototype.restoreStencilState = function (): void {\r\n    this.setStencilFunction(this._cachedStencilFunction);\r\n    this.setStencilMask(this._cachedStencilMask);\r\n    this.setStencilBuffer(this._cachedStencilBuffer);\r\n    this.setStencilOperationPass(this._cachedStencilOperationPass);\r\n    this.setStencilOperationFail(this._cachedStencilOperationFail);\r\n    this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\r\n    this.setStencilFunctionReference(this._cachedStencilReference);\r\n};\r\n\r\nAbstractEngine.prototype.setAlphaConstants = function (r: number, g: number, b: number, a: number): void {\r\n    this._alphaState.setAlphaBlendConstants(r, g, b, a);\r\n};\r\n\r\nAbstractEngine.prototype.getAlphaMode = function (): number {\r\n    return this._alphaMode;\r\n};\r\n\r\nAbstractEngine.prototype.getAlphaEquation = function (): number {\r\n    return this._alphaEquation;\r\n};\r\n", "import { AbstractEngine } from \"../abstractEngine\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Gets the names of the render passes that are currently created\r\n         * @returns list of the render pass names\r\n         */\r\n        getRenderPassNames(): string[];\r\n\r\n        /**\r\n         * Gets the name of the current render pass\r\n         * @returns name of the current render pass\r\n         */\r\n        getCurrentRenderPassName(): string;\r\n\r\n        /**\r\n         * Creates a render pass id\r\n         * @param name Name of the render pass (for debug purpose only)\r\n         * @returns the id of the new render pass\r\n         */\r\n        createRenderPassId(name?: string): number;\r\n\r\n        /**\r\n         * Releases a render pass id\r\n         * @param id id of the render pass to release\r\n         */\r\n        releaseRenderPassId(id: number): void;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype.getRenderPassNames = function (): string[] {\r\n    return this._renderPassNames;\r\n};\r\n\r\nAbstractEngine.prototype.getCurrentRenderPassName = function (): string {\r\n    return this._renderPassNames[this.currentRenderPassId];\r\n};\r\n\r\nAbstractEngine.prototype.createRenderPassId = function (name?: string): number {\r\n    // Note: render pass id == 0 is always for the main render pass\r\n    const id = ++AbstractEngine._RenderPassIdCounter;\r\n    this._renderPassNames[id] = name ?? \"NONAME\";\r\n    return id;\r\n};\r\n\r\nAbstractEngine.prototype.releaseRenderPassId = function (id: number): void {\r\n    this._renderPassNames[id] = undefined as any;\r\n\r\n    for (let s = 0; s < this.scenes.length; ++s) {\r\n        const scene = this.scenes[s];\r\n        for (let m = 0; m < scene.meshes.length; ++m) {\r\n            const mesh = scene.meshes[m];\r\n            if (mesh.subMeshes) {\r\n                for (let b = 0; b < mesh.subMeshes.length; ++b) {\r\n                    const subMesh = mesh.subMeshes[b];\r\n                    subMesh._removeDrawWrapper(id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture\";\r\nimport type { IOfflineProvider } from \"../Offline/IOfflineProvider\";\r\nimport type { ILoadingScreen } from \"../Loading/loadingScreen\";\r\nimport { EngineStore } from \"./engineStore\";\r\nimport type { WebGLPipelineContext } from \"./WebGL/webGLPipelineContext\";\r\nimport type { IPipelineContext } from \"./IPipelineContext\";\r\nimport type { ICustomAnimationFrameRequester } from \"../Misc/customAnimationFrameRequester\";\r\nimport type { EngineOptions } from \"./thinEngine\";\r\nimport { ThinEngine } from \"./thinEngine\";\r\nimport { Constants } from \"./constants\";\r\nimport type { IViewportLike, IColor4Like } from \"../Maths/math.like\";\r\nimport { PerformanceMonitor } from \"../Misc/performanceMonitor\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { WebGLDataBuffer } from \"../Meshes/WebGL/webGLDataBuffer\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { RenderTargetWrapper } from \"./renderTargetWrapper\";\r\nimport { WebGLHardwareTexture } from \"./WebGL/webGLHardwareTexture\";\r\n\r\nimport \"./Extensions/engine.alpha\";\r\nimport \"./Extensions/engine.rawTexture\";\r\nimport \"./Extensions/engine.readTexture\";\r\nimport \"./Extensions/engine.dynamicBuffer\";\r\nimport \"./Extensions/engine.cubeTexture\";\r\nimport \"./Extensions/engine.renderTarget\";\r\nimport \"./Extensions/engine.renderTargetTexture\";\r\nimport \"./Extensions/engine.renderTargetCube\";\r\nimport \"./Extensions/engine.prefilteredCubeTexture\";\r\nimport \"./Extensions/engine.uniformBuffer\";\r\nimport \"./AbstractEngine/abstractEngine.loadingScreen\";\r\nimport \"./AbstractEngine/abstractEngine.dom\";\r\nimport \"./AbstractEngine/abstractEngine.states\";\r\nimport \"./AbstractEngine/abstractEngine.renderPass\";\r\nimport \"./AbstractEngine/abstractEngine.texture\";\r\n\r\nimport type { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport { AbstractEngine } from \"./abstractEngine\";\r\nimport {\r\n    CreateImageBitmapFromSource,\r\n    ExitFullscreen,\r\n    ExitPointerlock,\r\n    GetFontOffset,\r\n    RequestFullscreen,\r\n    RequestPointerlock,\r\n    ResizeImageBitmap,\r\n    _CommonDispose,\r\n    _CommonInit,\r\n} from \"./engine.common\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\nimport { _retryWithInterval } from \"core/Misc/timingTools\";\r\n\r\n/**\r\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\r\n */\r\nexport class Engine extends ThinEngine {\r\n    // Const statics\r\n\r\n    /** Defines that alpha blending is disabled */\r\n    public static readonly ALPHA_DISABLE = Constants.ALPHA_DISABLE;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + DEST */\r\n    public static readonly ALPHA_ADD = Constants.ALPHA_ADD;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_COMBINE = Constants.ALPHA_COMBINE;\r\n    /** Defines that alpha blending to DEST - SRC * DEST */\r\n    public static readonly ALPHA_SUBTRACT = Constants.ALPHA_SUBTRACT;\r\n    /** Defines that alpha blending to SRC * DEST */\r\n    public static readonly ALPHA_MULTIPLY = Constants.ALPHA_MULTIPLY;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\r\n    public static readonly ALPHA_MAXIMIZED = Constants.ALPHA_MAXIMIZED;\r\n    /** Defines that alpha blending to SRC + DEST */\r\n    public static readonly ALPHA_ONEONE = Constants.ALPHA_ONEONE;\r\n    /** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_PREMULTIPLIED = Constants.ALPHA_PREMULTIPLIED;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\r\n     * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_PREMULTIPLIED_PORTERDUFF = Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n    /** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\r\n    public static readonly ALPHA_INTERPOLATE = Constants.ALPHA_INTERPOLATE;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC) * DEST\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_SCREENMODE = Constants.ALPHA_SCREENMODE;\r\n\r\n    /** Defines that the resource is not delayed*/\r\n    public static readonly DELAYLOADSTATE_NONE = Constants.DELAYLOADSTATE_NONE;\r\n    /** Defines that the resource was successfully delay loaded */\r\n    public static readonly DELAYLOADSTATE_LOADED = Constants.DELAYLOADSTATE_LOADED;\r\n    /** Defines that the resource is currently delay loading */\r\n    public static readonly DELAYLOADSTATE_LOADING = Constants.DELAYLOADSTATE_LOADING;\r\n    /** Defines that the resource is delayed and has not started loading */\r\n    public static readonly DELAYLOADSTATE_NOTLOADED = Constants.DELAYLOADSTATE_NOTLOADED;\r\n\r\n    // Depht or Stencil test Constants.\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\r\n    public static readonly NEVER = Constants.NEVER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = Constants.ALWAYS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\r\n    public static readonly LESS = Constants.LESS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\r\n    public static readonly EQUAL = Constants.EQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\r\n    public static readonly LEQUAL = Constants.LEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\r\n    public static readonly GREATER = Constants.GREATER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\r\n    public static readonly GEQUAL = Constants.GEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\r\n    public static readonly NOTEQUAL = Constants.NOTEQUAL;\r\n\r\n    // Stencil Actions Constants.\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = Constants.KEEP;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = Constants.REPLACE;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented */\r\n    public static readonly INCR = Constants.INCR;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented */\r\n    public static readonly DECR = Constants.DECR;\r\n    /** Passed to stencilOperation to specify that stencil value must be inverted */\r\n    public static readonly INVERT = Constants.INVERT;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\r\n    public static readonly INCR_WRAP = Constants.INCR_WRAP;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\r\n    public static readonly DECR_WRAP = Constants.DECR_WRAP;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_CLAMP_ADDRESSMODE = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_WRAP_ADDRESSMODE = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly TEXTURE_MIRROR_ADDRESSMODE = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n\r\n    /** ALPHA */\r\n    public static readonly TEXTUREFORMAT_ALPHA = Constants.TEXTUREFORMAT_ALPHA;\r\n    /** LUMINANCE */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE = Constants.TEXTUREFORMAT_LUMINANCE;\r\n    /** LUMINANCE_ALPHA */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE_ALPHA = Constants.TEXTUREFORMAT_LUMINANCE_ALPHA;\r\n    /** RGB */\r\n    public static readonly TEXTUREFORMAT_RGB = Constants.TEXTUREFORMAT_RGB;\r\n    /** RGBA */\r\n    public static readonly TEXTUREFORMAT_RGBA = Constants.TEXTUREFORMAT_RGBA;\r\n    /** RED */\r\n    public static readonly TEXTUREFORMAT_RED = Constants.TEXTUREFORMAT_RED;\r\n    /** RED (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R = Constants.TEXTUREFORMAT_R;\r\n    /** RED unsigned short normed to [0, 1] **/\r\n    public static readonly TEXTUREFORMAT_R16_UNORM = Constants.TEXTUREFORMAT_R16_UNORM;\r\n    /** RG unsigned short normed to [0, 1] **/\r\n    public static readonly TEXTUREFORMAT_RG16_UNORM = Constants.TEXTUREFORMAT_RG16_UNORM;\r\n    /** RGB unsigned short normed to [0, 1] **/\r\n    public static readonly TEXTUREFORMAT_RGB16_UNORM = Constants.TEXTUREFORMAT_RGB16_UNORM;\r\n    /** RGBA unsigned short normed to [0, 1] **/\r\n    public static readonly TEXTUREFORMAT_RGBA16_UNORM = Constants.TEXTUREFORMAT_RGBA16_UNORM;\r\n    /** RED signed short normed to [-1, 1] **/\r\n    public static readonly TEXTUREFORMAT_R16_SNORM = Constants.TEXTUREFORMAT_R16_SNORM;\r\n    /** RG signed short normed to [-1, 1] **/\r\n    public static readonly TEXTUREFORMAT_RG16_SNORM = Constants.TEXTUREFORMAT_RG16_SNORM;\r\n    /** RGB signed short normed to [-1, 1] **/\r\n    public static readonly TEXTUREFORMAT_RGB16_SNORM = Constants.TEXTUREFORMAT_RGB16_SNORM;\r\n    /** RGBA signed short normed to [-1, 1] **/\r\n    public static readonly TEXTUREFORMAT_RGBA16_SNORM = Constants.TEXTUREFORMAT_RGBA16_SNORM;\r\n    /** RG */\r\n    public static readonly TEXTUREFORMAT_RG = Constants.TEXTUREFORMAT_RG;\r\n    /** RED_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RED_INTEGER = Constants.TEXTUREFORMAT_RED_INTEGER;\r\n    /** RED_INTEGER (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R_INTEGER = Constants.TEXTUREFORMAT_R_INTEGER;\r\n    /** RG_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RG_INTEGER = Constants.TEXTUREFORMAT_RG_INTEGER;\r\n    /** RGB_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGB_INTEGER = Constants.TEXTUREFORMAT_RGB_INTEGER;\r\n    /** RGBA_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGBA_INTEGER = Constants.TEXTUREFORMAT_RGBA_INTEGER;\r\n\r\n    /** UNSIGNED_BYTE */\r\n    public static readonly TEXTURETYPE_UNSIGNED_BYTE = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n    /** @deprecated use more explicit TEXTURETYPE_UNSIGNED_BYTE instead. Use TEXTURETYPE_UNSIGNED_INTEGER for 32bits values.*/\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n    /** FLOAT */\r\n    public static readonly TEXTURETYPE_FLOAT = Constants.TEXTURETYPE_FLOAT;\r\n    /** HALF_FLOAT */\r\n    public static readonly TEXTURETYPE_HALF_FLOAT = Constants.TEXTURETYPE_HALF_FLOAT;\r\n    /** BYTE */\r\n    public static readonly TEXTURETYPE_BYTE = Constants.TEXTURETYPE_BYTE;\r\n    /** SHORT */\r\n    public static readonly TEXTURETYPE_SHORT = Constants.TEXTURETYPE_SHORT;\r\n    /** UNSIGNED_SHORT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT = Constants.TEXTURETYPE_UNSIGNED_SHORT;\r\n    /** INT */\r\n    public static readonly TEXTURETYPE_INT = Constants.TEXTURETYPE_INT;\r\n    /** UNSIGNED_INT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INTEGER = Constants.TEXTURETYPE_UNSIGNED_INTEGER;\r\n    /** UNSIGNED_SHORT_4_4_4_4 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = Constants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4;\r\n    /** UNSIGNED_SHORT_5_5_5_1 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1;\r\n    /** UNSIGNED_SHORT_5_6_5 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5;\r\n    /** UNSIGNED_INT_2_10_10_10_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV;\r\n    /** UNSIGNED_INT_24_8 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_24_8 = Constants.TEXTURETYPE_UNSIGNED_INT_24_8;\r\n    /** UNSIGNED_INT_10F_11F_11F_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV;\r\n    /** UNSIGNED_INT_5_9_9_9_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = Constants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV;\r\n    /** FLOAT_32_UNSIGNED_INT_24_8_REV */\r\n    public static readonly TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = Constants.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV;\r\n\r\n    /** nearest is mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_SAMPLINGMODE = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_BILINEAR_SAMPLINGMODE = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_TRILINEAR_SAMPLINGMODE = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPLINEAR = Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPNEAREST = Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPLINEAR = Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPNEAREST = Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPNEAREST = Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPLINEAR = Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly TEXTURE_NEAREST_LINEAR = Constants.TEXTURE_NEAREST_LINEAR;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_NEAREST = Constants.TEXTURE_NEAREST_NEAREST;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPNEAREST = Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPLINEAR = Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly TEXTURE_LINEAR_LINEAR = Constants.TEXTURE_LINEAR_LINEAR;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly TEXTURE_LINEAR_NEAREST = Constants.TEXTURE_LINEAR_NEAREST;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly TEXTURE_EXPLICIT_MODE = Constants.TEXTURE_EXPLICIT_MODE;\r\n    /** Spherical coordinates mode */\r\n    public static readonly TEXTURE_SPHERICAL_MODE = Constants.TEXTURE_SPHERICAL_MODE;\r\n    /** Planar coordinates mode */\r\n    public static readonly TEXTURE_PLANAR_MODE = Constants.TEXTURE_PLANAR_MODE;\r\n    /** Cubic coordinates mode */\r\n    public static readonly TEXTURE_CUBIC_MODE = Constants.TEXTURE_CUBIC_MODE;\r\n    /** Projection coordinates mode */\r\n    public static readonly TEXTURE_PROJECTION_MODE = Constants.TEXTURE_PROJECTION_MODE;\r\n    /** Skybox coordinates mode */\r\n    public static readonly TEXTURE_SKYBOX_MODE = Constants.TEXTURE_SKYBOX_MODE;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly TEXTURE_INVCUBIC_MODE = Constants.TEXTURE_INVCUBIC_MODE;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly TEXTURE_EQUIRECTANGULAR_MODE = Constants.TEXTURE_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE;\r\n\r\n    // Texture rescaling mode\r\n    /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_FLOOR = Constants.SCALEMODE_FLOOR;\r\n    /** Defines that texture rescaling will look for the nearest power of 2 size */\r\n    public static readonly SCALEMODE_NEAREST = Constants.SCALEMODE_NEAREST;\r\n    /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_CEILING = Constants.SCALEMODE_CEILING;\r\n\r\n    /**\r\n     * Returns the current npm package of the sdk\r\n     */\r\n    // Not mixed with Version for tooling purpose.\r\n    public static override get NpmPackage(): string {\r\n        return AbstractEngine.NpmPackage;\r\n    }\r\n\r\n    /**\r\n     * Returns the current version of the framework\r\n     */\r\n    public static override get Version(): string {\r\n        return AbstractEngine.Version;\r\n    }\r\n\r\n    /** Gets the list of created engines */\r\n    public static get Instances(): AbstractEngine[] {\r\n        return EngineStore.Instances;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<AbstractEngine> {\r\n        return EngineStore.LastCreatedEngine;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return EngineStore.LastCreatedScene;\r\n    }\r\n\r\n    /** @internal */\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Method called to create the default loading screen.\r\n     * This can be overridden in your own app.\r\n     * @param canvas The rendering canvas element\r\n     * @returns The loading screen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static override DefaultLoadingScreenFactory(canvas: HTMLCanvasElement): ILoadingScreen {\r\n        return AbstractEngine.DefaultLoadingScreenFactory(canvas);\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * If set, will be used to request the next animation frame for the render loop\r\n     */\r\n    public customAnimationFrameRequester: Nullable<ICustomAnimationFrameRequester> = null;\r\n\r\n    private _rescalePostProcess: Nullable<PostProcess>;\r\n\r\n    protected override get _supportsHardwareTextureRescaling() {\r\n        return !!Engine._RescalePostProcessFactory;\r\n    }\r\n\r\n    private _measureFps(): void {\r\n        this._performanceMonitor.sampleFrame();\r\n        this._fps = this._performanceMonitor.averageFPS;\r\n        this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\r\n    }\r\n\r\n    private _performanceMonitor = new PerformanceMonitor();\r\n    /**\r\n     * Gets the performance monitor attached to this engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\r\n     */\r\n    public override get performanceMonitor(): PerformanceMonitor {\r\n        return this._performanceMonitor;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * Creates a new engine\r\n     * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which already used the WebGL context\r\n     * @param antialias defines enable antialiasing (default: false)\r\n     * @param options defines further options to be sent to the getContext() function\r\n     * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\r\n     */\r\n    constructor(\r\n        canvasOrContext: Nullable<HTMLCanvasElement | OffscreenCanvas | WebGLRenderingContext | WebGL2RenderingContext>,\r\n        antialias?: boolean,\r\n        options?: EngineOptions,\r\n        adaptToDeviceRatio: boolean = false\r\n    ) {\r\n        super(canvasOrContext, antialias, options, adaptToDeviceRatio);\r\n\r\n        this._drawCalls = new PerfCounter();\r\n\r\n        if (!canvasOrContext) {\r\n            return;\r\n        }\r\n\r\n        this._features.supportRenderPasses = true;\r\n\r\n        options = this._creationOptions;\r\n    }\r\n\r\n    protected override _initGLContext(): void {\r\n        super._initGLContext();\r\n\r\n        this._rescalePostProcess = null;\r\n    }\r\n\r\n    /**\r\n     * Shared initialization across engines types.\r\n     * @param canvas The canvas associated with this instance of the engine.\r\n     */\r\n    protected override _sharedInit(canvas: HTMLCanvasElement) {\r\n        super._sharedInit(canvas);\r\n\r\n        _CommonInit(this, canvas, this._creationOptions);\r\n    }\r\n\r\n    /**\r\n     * Resize an image and returns the image data as an uint8array\r\n     * @param image image to resize\r\n     * @param bufferWidth destination buffer width\r\n     * @param bufferHeight destination buffer height\r\n     * @returns an uint8array containing RGBA values of bufferWidth * bufferHeight size\r\n     */\r\n    public override resizeImageBitmap(image: HTMLImageElement | ImageBitmap, bufferWidth: number, bufferHeight: number): Uint8Array {\r\n        return ResizeImageBitmap(this, image, bufferWidth, bufferHeight);\r\n    }\r\n\r\n    /**\r\n     * Engine abstraction for loading and creating an image bitmap from a given source string.\r\n     * @param imageSource source to load the image from.\r\n     * @param options An object that sets options for the image's extraction.\r\n     * @returns ImageBitmap\r\n     */\r\n    public override _createImageBitmapFromSource(imageSource: string, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n        return CreateImageBitmapFromSource(this, imageSource, options);\r\n    }\r\n\r\n    /**\r\n     * Toggle full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public override switchFullscreen(requestPointerLock: boolean): void {\r\n        if (this.isFullscreen) {\r\n            this.exitFullscreen();\r\n        } else {\r\n            this.enterFullscreen(requestPointerLock);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public override enterFullscreen(requestPointerLock: boolean): void {\r\n        if (!this.isFullscreen) {\r\n            this._pointerLockRequested = requestPointerLock;\r\n            if (this._renderingCanvas) {\r\n                RequestFullscreen(this._renderingCanvas);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits full screen mode\r\n     */\r\n    public override exitFullscreen(): void {\r\n        if (this.isFullscreen) {\r\n            ExitFullscreen();\r\n        }\r\n    }\r\n\r\n    /** States */\r\n\r\n    /**\r\n     * Sets a boolean indicating if the dithering state is enabled or disabled\r\n     * @param value defines the dithering state\r\n     */\r\n    public setDitheringState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.enable(this._gl.DITHER);\r\n        } else {\r\n            this._gl.disable(this._gl.DITHER);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the rasterizer state is enabled or disabled\r\n     * @param value defines the rasterizer state\r\n     */\r\n    public setRasterizerState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.disable(this._gl.RASTERIZER_DISCARD);\r\n        } else {\r\n            this._gl.enable(this._gl.RASTERIZER_DISCARD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Directly set the WebGL Viewport\r\n     * @param x defines the x coordinate of the viewport (in screen space)\r\n     * @param y defines the y coordinate of the viewport (in screen space)\r\n     * @param width defines the width of the viewport (in screen space)\r\n     * @param height defines the height of the viewport (in screen space)\r\n     * @returns the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\r\n     */\r\n    public setDirectViewport(x: number, y: number, width: number, height: number): Nullable<IViewportLike> {\r\n        const currentViewport = this._cachedViewport;\r\n        this._cachedViewport = null;\r\n\r\n        this._viewport(x, y, width, height);\r\n\r\n        return currentViewport;\r\n    }\r\n\r\n    /**\r\n     * Executes a scissor clear (ie. a clear on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     * @param clearColor defines the clear color\r\n     */\r\n    public scissorClear(x: number, y: number, width: number, height: number, clearColor: IColor4Like): void {\r\n        this.enableScissor(x, y, width, height);\r\n        this.clear(clearColor, true, true, true);\r\n        this.disableScissor();\r\n    }\r\n\r\n    /**\r\n     * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     */\r\n    public enableScissor(x: number, y: number, width: number, height: number): void {\r\n        const gl = this._gl;\r\n\r\n        // Change state\r\n        gl.enable(gl.SCISSOR_TEST);\r\n        gl.scissor(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * Disable previously set scissor test rectangle\r\n     */\r\n    public disableScissor() {\r\n        const gl = this._gl;\r\n\r\n        gl.disable(gl.SCISSOR_TEST);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFileAsync(url: string, offlineProvider?: IOfflineProvider, useArrayBuffer?: false): Promise<string>;\r\n    public _loadFileAsync(url: string, offlineProvider?: IOfflineProvider, useArrayBuffer?: true): Promise<ArrayBuffer>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFileAsync(url: string, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadFile(\r\n                url,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                undefined,\r\n                offlineProvider,\r\n                useArrayBuffer,\r\n                (request, exception) => {\r\n                    reject(exception);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the vertex shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the vertex shader associated with the program\r\n     */\r\n    public getVertexShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[0]);\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the fragment shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the fragment shader associated with the program\r\n     */\r\n    public getFragmentShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[1]);\r\n    }\r\n\r\n    /**\r\n     * sets the object from which width and height will be taken from when getting render width and height\r\n     * Will fallback to the gl object\r\n     * @param dimensions the framebuffer width and height that will be used.\r\n     */\r\n    public override set framebufferDimensionsObject(dimensions: Nullable<{ framebufferWidth: number; framebufferHeight: number }>) {\r\n        this._framebufferDimensionsObject = dimensions;\r\n        if (this._framebufferDimensionsObject) {\r\n            this.onResizeObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    protected override _rebuildBuffers(): void {\r\n        // Index / Vertex\r\n        for (const scene of this.scenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n        }\r\n\r\n        for (const scene of this._virtualScenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n        }\r\n\r\n        super._rebuildBuffers();\r\n    }\r\n\r\n    /**\r\n     * Get Font size information\r\n     * @param font font name\r\n     * @returns an object containing ascent, height and descent\r\n     */\r\n    public override getFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        return GetFontOffset(font);\r\n    }\r\n\r\n    protected override _cancelFrame() {\r\n        if (this.customAnimationFrameRequester) {\r\n            if (this._frameHandler !== 0) {\r\n                this._frameHandler = 0;\r\n                const { cancelAnimationFrame } = this.customAnimationFrameRequester;\r\n                if (cancelAnimationFrame) {\r\n                    cancelAnimationFrame(this.customAnimationFrameRequester.requestID);\r\n                }\r\n            }\r\n        } else {\r\n            super._cancelFrame();\r\n        }\r\n    }\r\n\r\n    public override _renderLoop(timestamp?: number): void {\r\n        this._processFrame(timestamp);\r\n\r\n        // The first condition prevents queuing another frame if we no longer have active render loops (e.g., if\r\n        // `stopRenderLoop` is called mid frame). The second condition prevents queuing another frame if one has\r\n        // already been queued (e.g., if `stopRenderLoop` and `runRenderLoop` is called mid frame).\r\n        if (this._activeRenderLoops.length > 0 && this._frameHandler === 0) {\r\n            if (this.customAnimationFrameRequester) {\r\n                this.customAnimationFrameRequester.requestID = this._queueNewFrame(\r\n                    this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction,\r\n                    this.customAnimationFrameRequester\r\n                );\r\n                this._frameHandler = this.customAnimationFrameRequester.requestID;\r\n            } else {\r\n                this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters Pointerlock mode\r\n     */\r\n    public enterPointerlock(): void {\r\n        if (this._renderingCanvas) {\r\n            RequestPointerlock(this._renderingCanvas);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits Pointerlock mode\r\n     */\r\n    public exitPointerlock(): void {\r\n        ExitPointerlock();\r\n    }\r\n\r\n    /**\r\n     * Begin a new frame\r\n     */\r\n    public override beginFrame(): void {\r\n        this._measureFps();\r\n        super.beginFrame();\r\n    }\r\n\r\n    public override _deletePipelineContext(pipelineContext: IPipelineContext): void {\r\n        const webGLPipelineContext = pipelineContext as WebGLPipelineContext;\r\n        if (webGLPipelineContext && webGLPipelineContext.program) {\r\n            if (webGLPipelineContext.transformFeedback) {\r\n                this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\r\n                webGLPipelineContext.transformFeedback = null;\r\n            }\r\n        }\r\n        super._deletePipelineContext(pipelineContext);\r\n    }\r\n\r\n    public override createShaderProgram(\r\n        pipelineContext: IPipelineContext,\r\n        vertexCode: string,\r\n        fragmentCode: string,\r\n        defines: Nullable<string>,\r\n        context?: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        context = context || this._gl;\r\n\r\n        this.onBeforeShaderCompilationObservable.notifyObservers(this);\r\n\r\n        const program = super.createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\r\n        this.onAfterShaderCompilationObservable.notifyObservers(this);\r\n\r\n        return program;\r\n    }\r\n\r\n    protected override _createShaderProgram(\r\n        pipelineContext: WebGLPipelineContext,\r\n        vertexShader: WebGLShader,\r\n        fragmentShader: WebGLShader,\r\n        context: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        const shaderProgram = context.createProgram();\r\n        pipelineContext.program = shaderProgram;\r\n\r\n        if (!shaderProgram) {\r\n            throw new Error(\"Unable to create program\");\r\n        }\r\n\r\n        context.attachShader(shaderProgram, vertexShader);\r\n        context.attachShader(shaderProgram, fragmentShader);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            const transformFeedback = this.createTransformFeedback();\r\n\r\n            this.bindTransformFeedback(transformFeedback);\r\n            this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\r\n            pipelineContext.transformFeedback = transformFeedback;\r\n        }\r\n\r\n        context.linkProgram(shaderProgram);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            this.bindTransformFeedback(null);\r\n        }\r\n\r\n        pipelineContext.context = context;\r\n        pipelineContext.vertexShader = vertexShader;\r\n        pipelineContext.fragmentShader = fragmentShader;\r\n\r\n        if (!pipelineContext.isParallelCompiled) {\r\n            this._finalizePipelineContext(pipelineContext);\r\n        }\r\n\r\n        return shaderProgram;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _releaseTexture(texture: InternalTexture): void {\r\n        super._releaseTexture(texture);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _releaseRenderTargetWrapper(rtWrapper: RenderTargetWrapper): void {\r\n        super._releaseRenderTargetWrapper(rtWrapper);\r\n\r\n        // Set output texture of post process to null if the framebuffer has been released/disposed\r\n        this.scenes.forEach((scene) => {\r\n            scene.postProcesses.forEach((postProcess) => {\r\n                if (postProcess._outputTexture === rtWrapper) {\r\n                    postProcess._outputTexture = null;\r\n                }\r\n            });\r\n            scene.cameras.forEach((camera) => {\r\n                camera._postProcesses.forEach((postProcess) => {\r\n                    if (postProcess) {\r\n                        if (postProcess._outputTexture === rtWrapper) {\r\n                            postProcess._outputTexture = null;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Rescales a texture\r\n     * @param source input texture\r\n     * @param destination destination texture\r\n     * @param scene scene to use to render the resize\r\n     * @param internalFormat format to use when resizing\r\n     * @param onComplete callback to be called when resize has completed\r\n     */\r\n    public override _rescaleTexture(source: InternalTexture, destination: InternalTexture, scene: Nullable<any>, internalFormat: number, onComplete: () => void): void {\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n\r\n        const rtt = this.createRenderTargetTexture(\r\n            {\r\n                width: destination.width,\r\n                height: destination.height,\r\n            },\r\n            {\r\n                generateMipMaps: false,\r\n                type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n                samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n                generateDepthBuffer: false,\r\n                generateStencilBuffer: false,\r\n            }\r\n        );\r\n\r\n        if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\r\n            this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\r\n        }\r\n\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.externalTextureSamplerBinding = true;\r\n            const onCompiled = () => {\r\n                this._rescalePostProcess!.onApply = function (effect) {\r\n                    effect._bindTexture(\"textureSampler\", source);\r\n                };\r\n\r\n                let hostingScene: Scene = scene;\r\n\r\n                if (!hostingScene) {\r\n                    hostingScene = this.scenes[this.scenes.length - 1];\r\n                }\r\n                hostingScene.postProcessManager.directRender([this._rescalePostProcess!], rtt, true);\r\n\r\n                this._bindTextureDirectly(this._gl.TEXTURE_2D, destination, true);\r\n                this._gl.copyTexImage2D(this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\r\n\r\n                this.unBindFramebuffer(rtt);\r\n                rtt.dispose();\r\n\r\n                if (onComplete) {\r\n                    onComplete();\r\n                }\r\n            };\r\n            const effect = this._rescalePostProcess.getEffect();\r\n            if (effect) {\r\n                effect.executeWhenCompiled(onCompiled);\r\n            } else {\r\n                this._rescalePostProcess.onEffectCreatedObservable.addOnce((effect) => {\r\n                    effect.executeWhenCompiled(onCompiled);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps an external web gl texture in a Babylon texture.\r\n     * @param texture defines the external texture\r\n     * @param hasMipMaps defines whether the external texture has mip maps (default: false)\r\n     * @param samplingMode defines the sampling mode for the external texture (default: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE)\r\n     * @param width defines the width for the external texture (default: 0)\r\n     * @param height defines the height for the external texture (default: 0)\r\n     * @returns the babylon internal texture\r\n     */\r\n    public wrapWebGLTexture(\r\n        texture: WebGLTexture,\r\n        hasMipMaps: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        width: number = 0,\r\n        height: number = 0\r\n    ): InternalTexture {\r\n        const hardwareTexture = new WebGLHardwareTexture(texture, this._gl);\r\n        const internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\r\n        internalTexture._hardwareTexture = hardwareTexture;\r\n        internalTexture.baseWidth = width;\r\n        internalTexture.baseHeight = height;\r\n        internalTexture.width = width;\r\n        internalTexture.height = height;\r\n        internalTexture.isReady = true;\r\n        internalTexture.useMipMaps = hasMipMaps;\r\n        this.updateTextureSamplingMode(samplingMode, internalTexture);\r\n        return internalTexture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _uploadImageToTexture(texture: InternalTexture, image: HTMLImageElement | ImageBitmap, faceIndex: number = 0, lod: number = 0) {\r\n        const gl = this._gl;\r\n\r\n        const textureType = this._getWebGLTextureType(texture.type);\r\n        const format = this._getInternalFormat(texture.format);\r\n        const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\r\n\r\n        const bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\r\n\r\n        this._bindTextureDirectly(bindTarget, texture, true);\r\n        this._unpackFlipY(texture.invertY);\r\n\r\n        let target: GLenum = gl.TEXTURE_2D;\r\n        if (texture.isCube) {\r\n            target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\r\n        }\r\n\r\n        gl.texImage2D(target, lod, internalFormat, format, textureType, image);\r\n        this._bindTextureDirectly(bindTarget, null, true);\r\n    }\r\n\r\n    /**\r\n     * Updates a depth texture Comparison Mode and Function.\r\n     * If the comparison Function is equal to 0, the mode will be set to none.\r\n     * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\r\n     * @param texture The texture to set the comparison function for\r\n     * @param comparisonFunction The comparison function to set, 0 if no comparison required\r\n     */\r\n    public updateTextureComparisonFunction(texture: InternalTexture, comparisonFunction: number): void {\r\n        if (this.webGLVersion === 1) {\r\n            Logger.Error(\"WebGL 1 does not support texture comparison.\");\r\n            return;\r\n        }\r\n\r\n        const gl = this._gl;\r\n\r\n        if (texture.isCube) {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n        } else {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n        }\r\n\r\n        texture._comparisonFunction = comparisonFunction;\r\n    }\r\n\r\n    /**\r\n     * Creates a webGL buffer to use with instantiation\r\n     * @param capacity defines the size of the buffer\r\n     * @returns the webGL buffer\r\n     */\r\n    public createInstancesBuffer(capacity: number): DataBuffer {\r\n        const buffer = this._gl.createBuffer();\r\n\r\n        if (!buffer) {\r\n            throw new Error(\"Unable to create instance buffer\");\r\n        }\r\n\r\n        const result = new WebGLDataBuffer(buffer);\r\n        result.capacity = capacity;\r\n\r\n        this.bindArrayBuffer(result);\r\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\r\n\r\n        result.references = 1;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Delete a webGL buffer used with instantiation\r\n     * @param buffer defines the webGL buffer to delete\r\n     */\r\n    public deleteInstancesBuffer(buffer: WebGLBuffer): void {\r\n        this._gl.deleteBuffer(buffer);\r\n    }\r\n\r\n    private _clientWaitAsync(sync: WebGLSync, flags = 0, intervalms = 10): Promise<void> {\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        return new Promise((resolve, reject) => {\r\n            _retryWithInterval(\r\n                () => {\r\n                    const res = gl.clientWaitSync(sync, flags, 0);\r\n                    if (res == gl.WAIT_FAILED) {\r\n                        throw new Error(\"clientWaitSync failed\");\r\n                    }\r\n                    if (res == gl.TIMEOUT_EXPIRED) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                },\r\n                resolve,\r\n                reject,\r\n                intervalms\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _readPixelsAsync(x: number, y: number, w: number, h: number, format: number, type: number, outputBuffer: ArrayBufferView): Nullable<Promise<ArrayBufferView>> {\r\n        if (this._webGLVersion < 2) {\r\n            throw new Error(\"_readPixelsAsync only work on WebGL2+\");\r\n        }\r\n\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        const buf = gl.createBuffer();\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n        gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\r\n        gl.readPixels(x, y, w, h, format, type, 0);\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n\r\n        const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n        if (!sync) {\r\n            return null;\r\n        }\r\n\r\n        gl.flush();\r\n\r\n        return this._clientWaitAsync(sync, 0, 10).then(() => {\r\n            gl.deleteSync(sync);\r\n\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n            gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n            gl.deleteBuffer(buf);\r\n\r\n            return outputBuffer;\r\n        });\r\n    }\r\n\r\n    public override dispose(): void {\r\n        this.hideLoadingUI();\r\n\r\n        // Rescale PP\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.dispose();\r\n        }\r\n\r\n        _CommonDispose(this, this._renderingCanvas);\r\n\r\n        super.dispose();\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["index", "effect"]
}
