import {
  init_instancesDeclaration
} from "./chunk-FROGOQEC.js";
import {
  init_instancesVertex
} from "./chunk-IR3BSCAE.js";
import {
  init_bakedVertexAnimation,
  init_bakedVertexAnimationDeclaration
} from "./chunk-4R57ZCSL.js";
import {
  init_morphTargetsVertexGlobalDeclaration
} from "./chunk-AQUJQD2W.js";
import {
  init_morphTargetsVertexDeclaration
} from "./chunk-7AHNQASC.js";
import {
  init_morphTargetsVertexGlobal
} from "./chunk-MFDDVM5D.js";
import {
  init_morphTargetsVertex
} from "./chunk-3SNVQ6TH.js";
import {
  init_bonesVertex
} from "./chunk-KWJQWNEG.js";
import {
  init_bonesDeclaration
} from "./chunk-ZMBQROJF.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/Shaders/iblVoxelGrid.vertex.js
var name, shader, iblVoxelGridVertexShader;
var init_iblVoxelGrid_vertex = __esm({
  "node_modules/@babylonjs/core/Shaders/iblVoxelGrid.vertex.js"() {
    init_shaderStore();
    init_bonesDeclaration();
    init_bakedVertexAnimationDeclaration();
    init_instancesDeclaration();
    init_morphTargetsVertexGlobalDeclaration();
    init_morphTargetsVertexDeclaration();
    init_morphTargetsVertexGlobal();
    init_morphTargetsVertex();
    init_instancesVertex();
    init_bonesVertex();
    init_bakedVertexAnimation();
    name = "iblVoxelGridVertexShader";
    shader = `attribute vec3 position;varying vec3 vNormalizedPosition;
#include<bonesDeclaration>
#include<bakedVertexAnimationDeclaration>
#include<instancesDeclaration>
#include<morphTargetsVertexGlobalDeclaration>
#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]
uniform mat4 invWorldScale;uniform mat4 viewMatrix;void main(void) {vec3 positionUpdated=position;
#include<morphTargetsVertexGlobal>
#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]
#include<instancesVertex>
#include<bonesVertex>
#include<bakedVertexAnimation>
vec4 worldPos=finalWorld*vec4(positionUpdated,1.0);gl_Position=viewMatrix*invWorldScale*worldPos;vNormalizedPosition.xyz=gl_Position.xyz*0.5+0.5;
#ifdef IS_NDC_HALF_ZRANGE
gl_Position.z=gl_Position.z*0.5+0.5;
#endif
}`;
    if (!ShaderStore.ShadersStore[name]) {
      ShaderStore.ShadersStore[name] = shader;
    }
    iblVoxelGridVertexShader = { name, shader };
  }
});

export {
  iblVoxelGridVertexShader,
  init_iblVoxelGrid_vertex
};
//# sourceMappingURL=chunk-G2SD42XS.js.map
