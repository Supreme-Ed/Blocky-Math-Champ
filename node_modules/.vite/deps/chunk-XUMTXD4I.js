import {
  Material,
  init_material
} from "./chunk-2AZYSHSN.js";
import {
  Matrix,
  init_math_vector
} from "./chunk-3KKXJTKL.js";
import {
  AbstractEngine,
  init_abstractEngine
} from "./chunk-K2SB273Q.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/Materials/materialDefines.js
var MaterialDefines;
var init_materialDefines = __esm({
  "node_modules/@babylonjs/core/Materials/materialDefines.js"() {
    MaterialDefines = class {
      /**
       * Creates a new instance
       * @param externalProperties list of external properties to inject into the object
       */
      constructor(externalProperties) {
        this._keys = [];
        this._isDirty = true;
        this._areLightsDirty = true;
        this._areLightsDisposed = false;
        this._areAttributesDirty = true;
        this._areTexturesDirty = true;
        this._areFresnelDirty = true;
        this._areMiscDirty = true;
        this._arePrePassDirty = true;
        this._areImageProcessingDirty = true;
        this._normals = false;
        this._uvs = false;
        this._needNormals = false;
        this._needUVs = false;
        this._externalProperties = externalProperties;
        if (externalProperties) {
          for (const prop in externalProperties) {
            if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {
              this._setDefaultValue(prop);
            }
          }
        }
      }
      /**
       * Specifies if the material needs to be re-calculated
       */
      get isDirty() {
        return this._isDirty;
      }
      /**
       * Marks the material to indicate that it has been re-calculated
       */
      markAsProcessed() {
        this._isDirty = false;
        this._areAttributesDirty = false;
        this._areTexturesDirty = false;
        this._areFresnelDirty = false;
        this._areLightsDirty = false;
        this._areLightsDisposed = false;
        this._areMiscDirty = false;
        this._arePrePassDirty = false;
        this._areImageProcessingDirty = false;
      }
      /**
       * Marks the material to indicate that it needs to be re-calculated
       */
      markAsUnprocessed() {
        this._isDirty = true;
      }
      /**
       * Marks the material to indicate all of its defines need to be re-calculated
       */
      markAllAsDirty() {
        this._areTexturesDirty = true;
        this._areAttributesDirty = true;
        this._areLightsDirty = true;
        this._areFresnelDirty = true;
        this._areMiscDirty = true;
        this._arePrePassDirty = true;
        this._areImageProcessingDirty = true;
        this._isDirty = true;
      }
      /**
       * Marks the material to indicate that image processing needs to be re-calculated
       */
      markAsImageProcessingDirty() {
        this._areImageProcessingDirty = true;
        this._isDirty = true;
      }
      /**
       * Marks the material to indicate the lights need to be re-calculated
       * @param disposed Defines whether the light is dirty due to dispose or not
       */
      markAsLightDirty(disposed = false) {
        this._areLightsDirty = true;
        this._areLightsDisposed = this._areLightsDisposed || disposed;
        this._isDirty = true;
      }
      /**
       * Marks the attribute state as changed
       */
      markAsAttributesDirty() {
        this._areAttributesDirty = true;
        this._isDirty = true;
      }
      /**
       * Marks the texture state as changed
       */
      markAsTexturesDirty() {
        this._areTexturesDirty = true;
        this._isDirty = true;
      }
      /**
       * Marks the fresnel state as changed
       */
      markAsFresnelDirty() {
        this._areFresnelDirty = true;
        this._isDirty = true;
      }
      /**
       * Marks the misc state as changed
       */
      markAsMiscDirty() {
        this._areMiscDirty = true;
        this._isDirty = true;
      }
      /**
       * Marks the prepass state as changed
       */
      markAsPrePassDirty() {
        this._arePrePassDirty = true;
        this._isDirty = true;
      }
      /**
       * Rebuilds the material defines
       */
      rebuild() {
        this._keys.length = 0;
        for (const key of Object.keys(this)) {
          if (key[0] === "_") {
            continue;
          }
          this._keys.push(key);
        }
        if (this._externalProperties) {
          for (const name in this._externalProperties) {
            if (this._keys.indexOf(name) === -1) {
              this._keys.push(name);
            }
          }
        }
      }
      /**
       * Specifies if two material defines are equal
       * @param other - A material define instance to compare to
       * @returns - Boolean indicating if the material defines are equal (true) or not (false)
       */
      isEqual(other) {
        if (this._keys.length !== other._keys.length) {
          return false;
        }
        for (let index = 0; index < this._keys.length; index++) {
          const prop = this._keys[index];
          if (this[prop] !== other[prop]) {
            return false;
          }
        }
        return true;
      }
      /**
       * Clones this instance's defines to another instance
       * @param other - material defines to clone values to
       */
      cloneTo(other) {
        if (this._keys.length !== other._keys.length) {
          other._keys = this._keys.slice(0);
        }
        for (let index = 0; index < this._keys.length; index++) {
          const prop = this._keys[index];
          other[prop] = this[prop];
        }
      }
      /**
       * Resets the material define values
       */
      reset() {
        this._keys.forEach((prop) => this._setDefaultValue(prop));
      }
      _setDefaultValue(prop) {
        var _a, _b, _c, _d;
        const type = ((_b = (_a = this._externalProperties) == null ? void 0 : _a[prop]) == null ? void 0 : _b.type) ?? typeof this[prop];
        const defValue = (_d = (_c = this._externalProperties) == null ? void 0 : _c[prop]) == null ? void 0 : _d.default;
        switch (type) {
          case "number":
            this[prop] = defValue ?? 0;
            break;
          case "string":
            this[prop] = defValue ?? "";
            break;
          default:
            this[prop] = defValue ?? false;
            break;
        }
      }
      /**
       * Converts the material define values to a string
       * @returns - String of material define information
       */
      toString() {
        let result = "";
        for (let index = 0; index < this._keys.length; index++) {
          const prop = this._keys[index];
          const value = this[prop];
          const type = typeof value;
          switch (type) {
            case "number":
            case "string":
              result += "#define " + prop + " " + value + "\n";
              break;
            default:
              if (value) {
                result += "#define " + prop + "\n";
              }
              break;
          }
        }
        return result;
      }
    };
  }
});

// node_modules/@babylonjs/core/Materials/pushMaterial.js
var PushMaterial;
var init_pushMaterial = __esm({
  "node_modules/@babylonjs/core/Materials/pushMaterial.js"() {
    init_math_vector();
    init_material();
    PushMaterial = class extends Material {
      constructor(name, scene, storeEffectOnSubMeshes = true, forceGLSL = false) {
        super(name, scene, void 0, forceGLSL);
        this._normalMatrix = new Matrix();
        this._storeEffectOnSubMeshes = storeEffectOnSubMeshes;
      }
      getEffect() {
        return this._storeEffectOnSubMeshes ? this._activeEffect : super.getEffect();
      }
      isReady(mesh, useInstances) {
        if (!mesh) {
          return false;
        }
        if (!this._storeEffectOnSubMeshes) {
          return true;
        }
        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {
          return true;
        }
        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);
      }
      _isReadyForSubMesh(subMesh) {
        const defines = subMesh.materialDefines;
        if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {
          if (defines._renderId === this.getScene().getRenderId()) {
            return true;
          }
        }
        return false;
      }
      /**
       * Binds the given world matrix to the active effect
       *
       * @param world the matrix to bind
       */
      bindOnlyWorldMatrix(world) {
        this._activeEffect.setMatrix("world", world);
      }
      /**
       * Binds the given normal matrix to the active effect
       *
       * @param normalMatrix the matrix to bind
       */
      bindOnlyNormalMatrix(normalMatrix) {
        this._activeEffect.setMatrix("normalMatrix", normalMatrix);
      }
      bind(world, mesh) {
        if (!mesh) {
          return;
        }
        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);
      }
      _afterBind(mesh, effect = null, subMesh) {
        super._afterBind(mesh, effect, subMesh);
        this.getScene()._cachedEffect = effect;
        if (subMesh) {
          subMesh._drawWrapper._forceRebindOnNextCall = false;
        } else {
          this._drawWrapper._forceRebindOnNextCall = false;
        }
      }
      _mustRebind(scene, effect, subMesh, visibility = 1) {
        return subMesh._drawWrapper._forceRebindOnNextCall || scene.isCachedMaterialInvalid(this, effect, visibility);
      }
      dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {
        this._activeEffect = void 0;
        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);
      }
    };
  }
});

// node_modules/@babylonjs/core/Materials/materialFlags.js
var MaterialFlags;
var init_materialFlags = __esm({
  "node_modules/@babylonjs/core/Materials/materialFlags.js"() {
    init_abstractEngine();
    MaterialFlags = class {
      /**
       * Are diffuse textures enabled in the application.
       */
      static get DiffuseTextureEnabled() {
        return this._DiffuseTextureEnabled;
      }
      static set DiffuseTextureEnabled(value) {
        if (this._DiffuseTextureEnabled === value) {
          return;
        }
        this._DiffuseTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Is the OpenPBR Base Weight texture enabled in the application.
       */
      static get BaseWeightTextureEnabled() {
        return this._BaseWeightTextureEnabled;
      }
      static set BaseWeightTextureEnabled(value) {
        if (this._BaseWeightTextureEnabled === value) {
          return;
        }
        this._BaseWeightTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are detail textures enabled in the application.
       */
      static get DetailTextureEnabled() {
        return this._DetailTextureEnabled;
      }
      static set DetailTextureEnabled(value) {
        if (this._DetailTextureEnabled === value) {
          return;
        }
        this._DetailTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are decal maps enabled in the application.
       */
      static get DecalMapEnabled() {
        return this._DecalMapEnabled;
      }
      static set DecalMapEnabled(value) {
        if (this._DecalMapEnabled === value) {
          return;
        }
        this._DecalMapEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are ambient textures enabled in the application.
       */
      static get AmbientTextureEnabled() {
        return this._AmbientTextureEnabled;
      }
      static set AmbientTextureEnabled(value) {
        if (this._AmbientTextureEnabled === value) {
          return;
        }
        this._AmbientTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are opacity textures enabled in the application.
       */
      static get OpacityTextureEnabled() {
        return this._OpacityTextureEnabled;
      }
      static set OpacityTextureEnabled(value) {
        if (this._OpacityTextureEnabled === value) {
          return;
        }
        this._OpacityTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are reflection textures enabled in the application.
       */
      static get ReflectionTextureEnabled() {
        return this._ReflectionTextureEnabled;
      }
      static set ReflectionTextureEnabled(value) {
        if (this._ReflectionTextureEnabled === value) {
          return;
        }
        this._ReflectionTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are emissive textures enabled in the application.
       */
      static get EmissiveTextureEnabled() {
        return this._EmissiveTextureEnabled;
      }
      static set EmissiveTextureEnabled(value) {
        if (this._EmissiveTextureEnabled === value) {
          return;
        }
        this._EmissiveTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are specular textures enabled in the application.
       */
      static get SpecularTextureEnabled() {
        return this._SpecularTextureEnabled;
      }
      static set SpecularTextureEnabled(value) {
        if (this._SpecularTextureEnabled === value) {
          return;
        }
        this._SpecularTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are bump textures enabled in the application.
       */
      static get BumpTextureEnabled() {
        return this._BumpTextureEnabled;
      }
      static set BumpTextureEnabled(value) {
        if (this._BumpTextureEnabled === value) {
          return;
        }
        this._BumpTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are lightmap textures enabled in the application.
       */
      static get LightmapTextureEnabled() {
        return this._LightmapTextureEnabled;
      }
      static set LightmapTextureEnabled(value) {
        if (this._LightmapTextureEnabled === value) {
          return;
        }
        this._LightmapTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are refraction textures enabled in the application.
       */
      static get RefractionTextureEnabled() {
        return this._RefractionTextureEnabled;
      }
      static set RefractionTextureEnabled(value) {
        if (this._RefractionTextureEnabled === value) {
          return;
        }
        this._RefractionTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are color grading textures enabled in the application.
       */
      static get ColorGradingTextureEnabled() {
        return this._ColorGradingTextureEnabled;
      }
      static set ColorGradingTextureEnabled(value) {
        if (this._ColorGradingTextureEnabled === value) {
          return;
        }
        this._ColorGradingTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are fresnels enabled in the application.
       */
      static get FresnelEnabled() {
        return this._FresnelEnabled;
      }
      static set FresnelEnabled(value) {
        if (this._FresnelEnabled === value) {
          return;
        }
        this._FresnelEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(4);
      }
      /**
       * Are clear coat textures enabled in the application.
       */
      static get ClearCoatTextureEnabled() {
        return this._ClearCoatTextureEnabled;
      }
      static set ClearCoatTextureEnabled(value) {
        if (this._ClearCoatTextureEnabled === value) {
          return;
        }
        this._ClearCoatTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are clear coat bump textures enabled in the application.
       */
      static get ClearCoatBumpTextureEnabled() {
        return this._ClearCoatBumpTextureEnabled;
      }
      static set ClearCoatBumpTextureEnabled(value) {
        if (this._ClearCoatBumpTextureEnabled === value) {
          return;
        }
        this._ClearCoatBumpTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are clear coat tint textures enabled in the application.
       */
      static get ClearCoatTintTextureEnabled() {
        return this._ClearCoatTintTextureEnabled;
      }
      static set ClearCoatTintTextureEnabled(value) {
        if (this._ClearCoatTintTextureEnabled === value) {
          return;
        }
        this._ClearCoatTintTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are sheen textures enabled in the application.
       */
      static get SheenTextureEnabled() {
        return this._SheenTextureEnabled;
      }
      static set SheenTextureEnabled(value) {
        if (this._SheenTextureEnabled === value) {
          return;
        }
        this._SheenTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are anisotropic textures enabled in the application.
       */
      static get AnisotropicTextureEnabled() {
        return this._AnisotropicTextureEnabled;
      }
      static set AnisotropicTextureEnabled(value) {
        if (this._AnisotropicTextureEnabled === value) {
          return;
        }
        this._AnisotropicTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are thickness textures enabled in the application.
       */
      static get ThicknessTextureEnabled() {
        return this._ThicknessTextureEnabled;
      }
      static set ThicknessTextureEnabled(value) {
        if (this._ThicknessTextureEnabled === value) {
          return;
        }
        this._ThicknessTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are refraction intensity textures enabled in the application.
       */
      static get RefractionIntensityTextureEnabled() {
        return this._ThicknessTextureEnabled;
      }
      static set RefractionIntensityTextureEnabled(value) {
        if (this._RefractionIntensityTextureEnabled === value) {
          return;
        }
        this._RefractionIntensityTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are translucency intensity textures enabled in the application.
       */
      static get TranslucencyIntensityTextureEnabled() {
        return this._TranslucencyIntensityTextureEnabled;
      }
      static set TranslucencyIntensityTextureEnabled(value) {
        if (this._TranslucencyIntensityTextureEnabled === value) {
          return;
        }
        this._TranslucencyIntensityTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are translucency tint textures enabled in the application.
       */
      static get TranslucencyColorTextureEnabled() {
        return this._TranslucencyColorTextureEnabled;
      }
      static set TranslucencyColorTextureEnabled(value) {
        if (this._TranslucencyColorTextureEnabled === value) {
          return;
        }
        this._TranslucencyColorTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
      /**
       * Are translucency intensity textures enabled in the application.
       */
      static get IridescenceTextureEnabled() {
        return this._IridescenceTextureEnabled;
      }
      static set IridescenceTextureEnabled(value) {
        if (this._IridescenceTextureEnabled === value) {
          return;
        }
        this._IridescenceTextureEnabled = value;
        AbstractEngine.MarkAllMaterialsAsDirty(1);
      }
    };
    MaterialFlags._DiffuseTextureEnabled = true;
    MaterialFlags._BaseWeightTextureEnabled = true;
    MaterialFlags._DetailTextureEnabled = true;
    MaterialFlags._DecalMapEnabled = true;
    MaterialFlags._AmbientTextureEnabled = true;
    MaterialFlags._OpacityTextureEnabled = true;
    MaterialFlags._ReflectionTextureEnabled = true;
    MaterialFlags._EmissiveTextureEnabled = true;
    MaterialFlags._SpecularTextureEnabled = true;
    MaterialFlags._BumpTextureEnabled = true;
    MaterialFlags._LightmapTextureEnabled = true;
    MaterialFlags._RefractionTextureEnabled = true;
    MaterialFlags._ColorGradingTextureEnabled = true;
    MaterialFlags._FresnelEnabled = true;
    MaterialFlags._ClearCoatTextureEnabled = true;
    MaterialFlags._ClearCoatBumpTextureEnabled = true;
    MaterialFlags._ClearCoatTintTextureEnabled = true;
    MaterialFlags._SheenTextureEnabled = true;
    MaterialFlags._AnisotropicTextureEnabled = true;
    MaterialFlags._ThicknessTextureEnabled = true;
    MaterialFlags._RefractionIntensityTextureEnabled = true;
    MaterialFlags._TranslucencyIntensityTextureEnabled = true;
    MaterialFlags._TranslucencyColorTextureEnabled = true;
    MaterialFlags._IridescenceTextureEnabled = true;
  }
});

export {
  MaterialDefines,
  init_materialDefines,
  PushMaterial,
  init_pushMaterial,
  MaterialFlags,
  init_materialFlags
};
//# sourceMappingURL=chunk-XUMTXD4I.js.map
