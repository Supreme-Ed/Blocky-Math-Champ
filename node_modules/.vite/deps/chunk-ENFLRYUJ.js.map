{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/Textures/Loaders/envTextureLoader.ts"],
  "sourcesContent": ["import { GetEnvInfo, UploadEnvLevelsAsync, UploadEnvSpherical } from \"../../../Misc/environmentTextureTools\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"./internalTextureLoader\";\r\n\r\n/**\r\n * Implementation of the ENV Texture Loader.\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _ENVTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(\r\n        data: ArrayBufferView | ArrayBufferView[],\r\n        texture: InternalTexture,\r\n        createPolynomials: boolean,\r\n        onLoad: Nullable<(data?: any) => void>,\r\n        onError: Nullable<(message?: string, exception?: any) => void>\r\n    ): void {\r\n        if (Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        const info = GetEnvInfo(data);\r\n        if (info) {\r\n            texture.width = info.width;\r\n            texture.height = info.width;\r\n\r\n            try {\r\n                UploadEnvSpherical(texture, info);\r\n                UploadEnvLevelsAsync(texture, data, info).then(\r\n                    () => {\r\n                        texture.isReady = true;\r\n                        texture.onLoadedObservable.notifyObservers(texture);\r\n                        texture.onLoadedObservable.clear();\r\n                        if (onLoad) {\r\n                            onLoad();\r\n                        }\r\n                    },\r\n                    (reason) => {\r\n                        onError?.(\"Can not upload environment levels\", reason);\r\n                    }\r\n                );\r\n            } catch (e) {\r\n                onError?.(\"Can not upload environment file\", e);\r\n            }\r\n        } else if (onError) {\r\n            onError(\"Can not parse the environment file\", null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     */\r\n    public loadData(): void {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \".env not supported in 2d.\";\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;AAAA,IAUa;AAVb;;;AAUM,IAAO,oBAAP,MAAwB;MAA9B,cAAA;AAIoB,aAAA,kBAAkB;MAwDtC;;;;;;;;;MA9CW,aACH,MACA,SACA,mBACA,QACA,SAA8D;AAE9D,YAAI,MAAM,QAAQ,IAAI,GAAG;AACrB;QACJ;AAEA,cAAM,OAAO,WAAW,IAAI;AAC5B,YAAI,MAAM;AACN,kBAAQ,QAAQ,KAAK;AACrB,kBAAQ,SAAS,KAAK;AAEtB,cAAI;AACA,+BAAmB,SAAS,IAAI;AAChC,iCAAqB,SAAS,MAAM,IAAI,EAAE,KACtC,MAAK;AACD,sBAAQ,UAAU;AAClB,sBAAQ,mBAAmB,gBAAgB,OAAO;AAClD,sBAAQ,mBAAmB,MAAK;AAChC,kBAAI,QAAQ;AACR,uBAAM;cACV;YACJ,GACA,CAAC,WAAU;AACP,iDAAU,qCAAqC;YACnD,CAAC;UAET,SAAS,GAAG;AACR,+CAAU,mCAAmC;UACjD;QACJ,WAAW,SAAS;AAChB,kBAAQ,sCAAsC,IAAI;QACtD;MACJ;;;;MAKO,WAAQ;AAEX,cAAM;MACV;;;;",
  "names": []
}
