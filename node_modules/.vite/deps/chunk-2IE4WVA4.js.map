{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphDataSwitchBlock.ts"],
  "sourcesContent": ["import { FlowGraphBlock, type IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\nimport { getNumericValue, isNumeric } from \"core/FlowGraph/utils\";\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n\nexport interface IFlowGraphDataSwitchBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\n    /**\n     * The possible values for the selection.\n     *\n     */\n    cases: FlowGraphNumber[];\n\n    /**\n     * If true, the cases will be treated as integers, meaning 1.1, 1.0, 0.1e1  and 1 will a single case - \"1\".\n     * This is the default behavior in glTF interactivity.\n     */\n    treatCasesAsIntegers?: boolean;\n}\n/**\n * This block conditionally outputs one of its inputs, based on a condition and a list of cases.\n *\n * This of it as a passive (data) version of the switch statement in programming languages.\n */\nexport class FlowGraphDataSwitchBlock<T> extends FlowGraphBlock {\n    /**\n     * Current selection value.\n     */\n    public readonly case: FlowGraphDataConnection<FlowGraphNumber>;\n\n    /**\n     * Input: default value to output if no case is matched.\n     */\n    public readonly default: FlowGraphDataConnection<T>;\n\n    /**\n     * Output: the value that is output based on the selection.\n     */\n    public readonly value: FlowGraphDataConnection<T | undefined>;\n\n    private _inputCases: Map<number, FlowGraphDataConnection<T>> = new Map();\n\n    constructor(\n        /**\n         * the configuration of the block\n         */\n        public override config: IFlowGraphDataSwitchBlockConfiguration<T>\n    ) {\n        super(config);\n\n        this.case = this.registerDataInput(\"case\", RichTypeAny, NaN);\n        this.default = this.registerDataInput(\"default\", RichTypeAny);\n        this.value = this.registerDataOutput(\"value\", RichTypeAny);\n\n        // iterate the set not using for of\n        (this.config.cases || []).forEach((caseValue) => {\n            // if treat as integers, make sure not to set it again if it exists\n            caseValue = getNumericValue(caseValue);\n            if (this.config.treatCasesAsIntegers) {\n                caseValue = caseValue | 0;\n                if (this._inputCases.has(caseValue)) {\n                    return;\n                }\n            }\n            this._inputCases.set(caseValue, this.registerDataInput(`in_${caseValue}`, RichTypeAny));\n        });\n    }\n\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const selectionValue = this.case.getValue(context);\n        let outputValue: T | undefined;\n        if (isNumeric(selectionValue)) {\n            outputValue = this._getOutputValueForCase(getNumericValue(selectionValue), context);\n        } else {\n            outputValue = this.default.getValue(context);\n        }\n\n        this.value.setValue(outputValue, context);\n    }\n\n    private _getOutputValueForCase(caseValue: number, context: FlowGraphContext): T | undefined {\n        return this._inputCases.get(caseValue)?.getValue(context);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.DataSwitch;\n    }\n}\nRegisterClass(FlowGraphBlockNames.DataSwitch, FlowGraphDataSwitchBlock);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,IA2Ba;AA3Bb;;;AAGA;AAEA;AAEA;AAoBM,IAAO,2BAAP,cAA2C,eAAc;MAkB3D,YAIoB,QAAiD;AAEjE,cAAM,MAAM;AAFI,aAAA,SAAA;AANZ,aAAA,cAAuD,oBAAI,IAAG;AAUlE,aAAK,OAAO,KAAK,kBAAkB,QAAQ,aAAa,GAAG;AAC3D,aAAK,UAAU,KAAK,kBAAkB,WAAW,WAAW;AAC5D,aAAK,QAAQ,KAAK,mBAAmB,SAAS,WAAW;AAGzD,SAAC,KAAK,OAAO,SAAS,CAAA,GAAI,QAAQ,CAAC,cAAa;AAE5C,sBAAY,gBAAgB,SAAS;AACrC,cAAI,KAAK,OAAO,sBAAsB;AAClC,wBAAY,YAAY;AACxB,gBAAI,KAAK,YAAY,IAAI,SAAS,GAAG;AACjC;YACJ;UACJ;AACA,eAAK,YAAY,IAAI,WAAW,KAAK,kBAAkB,MAAM,SAAS,IAAI,WAAW,CAAC;QAC1F,CAAC;MACL;MAEgB,eAAe,SAAyB;AACpD,cAAM,iBAAiB,KAAK,KAAK,SAAS,OAAO;AACjD,YAAI;AACJ,YAAI,UAAU,cAAc,GAAG;AAC3B,wBAAc,KAAK,uBAAuB,gBAAgB,cAAc,GAAG,OAAO;QACtF,OAAO;AACH,wBAAc,KAAK,QAAQ,SAAS,OAAO;QAC/C;AAEA,aAAK,MAAM,SAAS,aAAa,OAAO;MAC5C;MAEQ,uBAAuB,WAAmB,SAAyB;AAnF/E;AAoFQ,gBAAO,UAAK,YAAY,IAAI,SAAS,MAA9B,mBAAiC,SAAS;MACrD;MAEgB,eAAY;AACxB,eAAA;MACJ;;AAEJ,kBAAa,4BAAiC,wBAAwB;;;",
  "names": []
}
