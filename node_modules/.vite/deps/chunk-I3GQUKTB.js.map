{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphSetPropertyBlock.ts"],
  "sourcesContent": ["import type { AssetType, FlowGraphAssetType } from \"core/FlowGraph/flowGraphAssetsContext\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"core/FlowGraph/flowGraphExecutionBlockWithOutSignal\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport type { FlowGraphSignalConnection } from \"core/FlowGraph/flowGraphSignalConnection\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\n\nexport interface IFlowGraphSetPropertyBlockConfiguration<O extends FlowGraphAssetType> {\n    /**\n     * The name of the property that will be set\n     */\n    propertyName?: string;\n\n    /**\n     * The target asset from which the property will be retrieved\n     */\n    target?: AssetType<O>;\n}\n\n/**\n * This block will set a property on a given target asset.\n * The property name can include dots (\".\"), which will be interpreted as a path to the property.\n * The target asset is an input and can be changed at any time.\n * The value of the property is an input and can be changed at any time.\n *\n * For example, with an input of a mesh asset, the property name \"position.x\" will set the x component of the position of the mesh.\n *\n * Note that it is recommended to input the object on which you are working on (i.e. a material) than providing a mesh and then getting the material from it.\n */\nexport class FlowGraphSetPropertyBlock<P extends any, O extends FlowGraphAssetType> extends FlowGraphExecutionBlockWithOutSignal {\n    /**\n     * Input connection: The value to set on the property.\n     */\n    public readonly value: FlowGraphDataConnection<P>;\n\n    /**\n     * Input connection: The target asset from which the property will be retrieved\n     */\n    public readonly object: FlowGraphDataConnection<AssetType<O>>;\n\n    /**\n     * Input connection: The name of the property that will be set\n     */\n    public readonly propertyName: FlowGraphDataConnection<string>;\n\n    /**\n     * Input connection: A function that can be used to set the value of the property.\n     * If set it will be used instead of the default set function.\n     */\n    public readonly customSetFunction: FlowGraphDataConnection<(target: AssetType<O>, propertyName: string, value: P, context: FlowGraphContext) => void>;\n\n    constructor(\n        /**\n         * the configuration of the block\n         */\n        public override config: IFlowGraphSetPropertyBlockConfiguration<O>\n    ) {\n        super(config);\n        this.object = this.registerDataInput(\"object\", RichTypeAny, config.target);\n        this.value = this.registerDataInput(\"value\", RichTypeAny);\n        this.propertyName = this.registerDataInput(\"propertyName\", RichTypeAny, config.propertyName);\n        this.customSetFunction = this.registerDataInput(\"customSetFunction\", RichTypeAny);\n    }\n    public override _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\n        try {\n            const target = this.object.getValue(context);\n            const value = this.value.getValue(context);\n\n            const setFunction = this.customSetFunction.getValue(context);\n            if (setFunction) {\n                setFunction(target, this.propertyName.getValue(context), value, context);\n            } else {\n                this._setPropertyValue(target, this.propertyName.getValue(context), value);\n            }\n        } catch (e) {\n            this._reportError(context, e);\n        }\n        this.out._activateSignal(context);\n    }\n\n    private _setPropertyValue(target: AssetType<O>, propertyName: string, value: P): void {\n        const path = propertyName.split(\".\");\n        let obj = target as any;\n        for (let i = 0; i < path.length - 1; i++) {\n            const prop = path[i];\n            if (obj[prop] === undefined) {\n                obj[prop] = {};\n            }\n            obj = obj[prop];\n        }\n        obj[path[path.length - 1]] = value;\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.SetProperty;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.SetProperty, FlowGraphSetPropertyBlock);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAGA,IA4Ba;AA5Bb;;;AACA;AAEA;AAyBM,IAAO,4BAAP,cAAsF,qCAAoC;MAsB5H,YAIoB,QAAkD;AAElE,cAAM,MAAM;AAFI,aAAA,SAAA;AAGhB,aAAK,SAAS,KAAK,kBAAkB,UAAU,aAAa,OAAO,MAAM;AACzE,aAAK,QAAQ,KAAK,kBAAkB,SAAS,WAAW;AACxD,aAAK,eAAe,KAAK,kBAAkB,gBAAgB,aAAa,OAAO,YAAY;AAC3F,aAAK,oBAAoB,KAAK,kBAAkB,qBAAqB,WAAW;MACpF;MACgB,SAAS,SAA2B,gBAAyC;AACzF,YAAI;AACA,gBAAM,SAAS,KAAK,OAAO,SAAS,OAAO;AAC3C,gBAAM,QAAQ,KAAK,MAAM,SAAS,OAAO;AAEzC,gBAAM,cAAc,KAAK,kBAAkB,SAAS,OAAO;AAC3D,cAAI,aAAa;AACb,wBAAY,QAAQ,KAAK,aAAa,SAAS,OAAO,GAAG,OAAO,OAAO;UAC3E,OAAO;AACH,iBAAK,kBAAkB,QAAQ,KAAK,aAAa,SAAS,OAAO,GAAG,KAAK;UAC7E;QACJ,SAAS,GAAG;AACR,eAAK,aAAa,SAAS,CAAC;QAChC;AACA,aAAK,IAAI,gBAAgB,OAAO;MACpC;MAEQ,kBAAkB,QAAsB,cAAsB,OAAQ;AAC1E,cAAM,OAAO,aAAa,MAAM,GAAG;AACnC,YAAI,MAAM;AACV,iBAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,KAAK;AACtC,gBAAM,OAAO,KAAK,CAAC;AACnB,cAAI,IAAI,IAAI,MAAM,QAAW;AACzB,gBAAI,IAAI,IAAI,CAAA;UAChB;AACA,gBAAM,IAAI,IAAI;QAClB;AACA,YAAI,KAAK,KAAK,SAAS,CAAC,CAAC,IAAI;MACjC;MAEgB,eAAY;AACxB,eAAA;MACJ;;AAGJ,kBAAa,6BAAkC,yBAAyB;;;",
  "names": []
}
