{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/materialDefines.ts", "../../../dev/core/src/Materials/pushMaterial.ts", "../../../dev/core/src/Materials/materialFlags.ts"],
  "sourcesContent": ["/**\r\n * Manages the defines for the Material\r\n */\r\nexport class MaterialDefines {\r\n    /** @internal */\r\n    protected _keys: string[] = [];\r\n    private _isDirty = true;\r\n    /** @internal */\r\n    public _renderId: number;\r\n\r\n    /** @internal */\r\n    public _areLightsDirty = true;\r\n    /** @internal */\r\n    public _areLightsDisposed = false;\r\n    /** @internal */\r\n    public _areAttributesDirty = true;\r\n    /** @internal */\r\n    public _areTexturesDirty = true;\r\n    /** @internal */\r\n    public _areFresnelDirty = true;\r\n    /** @internal */\r\n    public _areMiscDirty = true;\r\n    /** @internal */\r\n    public _arePrePassDirty = true;\r\n    /** @internal */\r\n    public _areImageProcessingDirty = true;\r\n\r\n    /** @internal */\r\n    public _normals = false;\r\n    /** @internal */\r\n    public _uvs = false;\r\n\r\n    /** @internal */\r\n    public _needNormals = false;\r\n    /** @internal */\r\n    public _needUVs = false;\r\n\r\n    protected _externalProperties?: { [name: string]: { type: string; default: any } };\r\n\r\n    [id: string]: any;\r\n\r\n    /**\r\n     * Creates a new instance\r\n     * @param externalProperties list of external properties to inject into the object\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        this._externalProperties = externalProperties;\r\n\r\n        // Initialize External Properties\r\n        if (externalProperties) {\r\n            for (const prop in externalProperties) {\r\n                if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\r\n                    this._setDefaultValue(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material needs to be re-calculated\r\n     */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it has been re-calculated\r\n     */\r\n    public markAsProcessed() {\r\n        this._isDirty = false;\r\n        this._areAttributesDirty = false;\r\n        this._areTexturesDirty = false;\r\n        this._areFresnelDirty = false;\r\n        this._areLightsDirty = false;\r\n        this._areLightsDisposed = false;\r\n        this._areMiscDirty = false;\r\n        this._arePrePassDirty = false;\r\n        this._areImageProcessingDirty = false;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     */\r\n    public markAsUnprocessed() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate all of its defines need to be re-calculated\r\n     */\r\n    public markAllAsDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._areAttributesDirty = true;\r\n        this._areLightsDirty = true;\r\n        this._areFresnelDirty = true;\r\n        this._areMiscDirty = true;\r\n        this._arePrePassDirty = true;\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that image processing needs to be re-calculated\r\n     */\r\n    public markAsImageProcessingDirty() {\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate the lights need to be re-calculated\r\n     * @param disposed Defines whether the light is dirty due to dispose or not\r\n     */\r\n    public markAsLightDirty(disposed = false) {\r\n        this._areLightsDirty = true;\r\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the attribute state as changed\r\n     */\r\n    public markAsAttributesDirty() {\r\n        this._areAttributesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the texture state as changed\r\n     */\r\n    public markAsTexturesDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the fresnel state as changed\r\n     */\r\n    public markAsFresnelDirty() {\r\n        this._areFresnelDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the misc state as changed\r\n     */\r\n    public markAsMiscDirty() {\r\n        this._areMiscDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass state as changed\r\n     */\r\n    public markAsPrePassDirty() {\r\n        this._arePrePassDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the material defines\r\n     */\r\n    public rebuild() {\r\n        this._keys.length = 0;\r\n\r\n        for (const key of Object.keys(this)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            this._keys.push(key);\r\n        }\r\n\r\n        if (this._externalProperties) {\r\n            for (const name in this._externalProperties) {\r\n                if (this._keys.indexOf(name) === -1) {\r\n                    this._keys.push(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if two material defines are equal\r\n     * @param other - A material define instance to compare to\r\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\r\n     */\r\n    public isEqual(other: MaterialDefines): boolean {\r\n        if (this._keys.length !== other._keys.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            if ((<any>this)[prop] !== (<any>other)[prop]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones this instance's defines to another instance\r\n     * @param other - material defines to clone values to\r\n     */\r\n    public cloneTo(other: MaterialDefines): void {\r\n        if (this._keys.length !== other._keys.length) {\r\n            other._keys = this._keys.slice(0);\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            (<any>other)[prop] = (<any>this)[prop];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the material define values\r\n     */\r\n    public reset(): void {\r\n        this._keys.forEach((prop) => this._setDefaultValue(prop));\r\n    }\r\n\r\n    private _setDefaultValue(prop: string): void {\r\n        const type = this._externalProperties?.[prop]?.type ?? typeof (<any>this)[prop];\r\n        const defValue = this._externalProperties?.[prop]?.default;\r\n\r\n        switch (type) {\r\n            case \"number\":\r\n                (<any>this)[prop] = defValue ?? 0;\r\n                break;\r\n            case \"string\":\r\n                (<any>this)[prop] = defValue ?? \"\";\r\n                break;\r\n            default:\r\n                (<any>this)[prop] = defValue ?? false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the material define values to a string\r\n     * @returns - String of material define information\r\n     */\r\n    public toString(): string {\r\n        let result = \"\";\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n            const value = (<any>this)[prop];\r\n            const type = typeof value;\r\n\r\n            switch (type) {\r\n                case \"number\":\r\n                case \"string\":\r\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\r\n                    break;\r\n                default:\r\n                    if (value) {\r\n                        result += \"#define \" + prop + \"\\n\";\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { Material } from \"../Materials/material\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\n/**\r\n * Base class of materials working in push mode in babylon JS\r\n * @internal\r\n */\r\nexport class PushMaterial extends Material {\r\n    protected _activeEffect?: Effect;\r\n\r\n    protected _normalMatrix: Matrix = new Matrix();\r\n\r\n    constructor(name: string, scene?: Scene, storeEffectOnSubMeshes = true, forceGLSL = false) {\r\n        super(name, scene, undefined, forceGLSL);\r\n        this._storeEffectOnSubMeshes = storeEffectOnSubMeshes;\r\n    }\r\n\r\n    public override getEffect(): Effect {\r\n        return this._storeEffectOnSubMeshes ? this._activeEffect! : super.getEffect()!;\r\n    }\r\n\r\n    public override isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        if (!mesh) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._storeEffectOnSubMeshes) {\r\n            return true;\r\n        }\r\n\r\n        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\r\n    }\r\n\r\n    protected _isReadyForSubMesh(subMesh: SubMesh) {\r\n        const defines = subMesh.materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {\r\n            if (defines._renderId === this.getScene().getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Binds the given world matrix to the active effect\r\n     *\r\n     * @param world the matrix to bind\r\n     */\r\n    public override bindOnlyWorldMatrix(world: Matrix): void {\r\n        this._activeEffect!.setMatrix(\"world\", world);\r\n    }\r\n\r\n    /**\r\n     * Binds the given normal matrix to the active effect\r\n     *\r\n     * @param normalMatrix the matrix to bind\r\n     */\r\n    public bindOnlyNormalMatrix(normalMatrix: Matrix): void {\r\n        this._activeEffect!.setMatrix(\"normalMatrix\", normalMatrix);\r\n    }\r\n\r\n    public override bind(world: Matrix, mesh?: Mesh): void {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\r\n    }\r\n\r\n    protected override _afterBind(mesh?: AbstractMesh, effect: Nullable<Effect> = null, subMesh?: SubMesh): void {\r\n        super._afterBind(mesh, effect, subMesh);\r\n        this.getScene()._cachedEffect = effect;\r\n        if (subMesh) {\r\n            subMesh._drawWrapper._forceRebindOnNextCall = false;\r\n        } else {\r\n            this._drawWrapper._forceRebindOnNextCall = false;\r\n        }\r\n    }\r\n\r\n    protected _mustRebind(scene: Scene, effect: Effect, subMesh: SubMesh, visibility = 1): boolean {\r\n        return subMesh._drawWrapper._forceRebindOnNextCall || scene.isCachedMaterialInvalid(this, effect, visibility);\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean) {\r\n        this._activeEffect = undefined;\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n}\r\n", "import { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * This groups all the flags used to control the materials channel.\r\n */\r\nexport class MaterialFlags {\r\n    // Flags used to enable or disable a type of texture for all Standard Materials\r\n    private static _DiffuseTextureEnabled = true;\r\n    /**\r\n     * Are diffuse textures enabled in the application.\r\n     */\r\n    public static get DiffuseTextureEnabled(): boolean {\r\n        return this._DiffuseTextureEnabled;\r\n    }\r\n    public static set DiffuseTextureEnabled(value: boolean) {\r\n        if (this._DiffuseTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DiffuseTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _BaseWeightTextureEnabled = true;\r\n    /**\r\n     * Is the OpenPBR Base Weight texture enabled in the application.\r\n     */\r\n    public static get BaseWeightTextureEnabled(): boolean {\r\n        return this._BaseWeightTextureEnabled;\r\n    }\r\n    public static set BaseWeightTextureEnabled(value: boolean) {\r\n        if (this._BaseWeightTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._BaseWeightTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _DetailTextureEnabled = true;\r\n    /**\r\n     * Are detail textures enabled in the application.\r\n     */\r\n    public static get DetailTextureEnabled(): boolean {\r\n        return this._DetailTextureEnabled;\r\n    }\r\n    public static set DetailTextureEnabled(value: boolean) {\r\n        if (this._DetailTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DetailTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _DecalMapEnabled = true;\r\n    /**\r\n     * Are decal maps enabled in the application.\r\n     */\r\n    public static get DecalMapEnabled(): boolean {\r\n        return this._DecalMapEnabled;\r\n    }\r\n    public static set DecalMapEnabled(value: boolean) {\r\n        if (this._DecalMapEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DecalMapEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _AmbientTextureEnabled = true;\r\n    /**\r\n     * Are ambient textures enabled in the application.\r\n     */\r\n    public static get AmbientTextureEnabled(): boolean {\r\n        return this._AmbientTextureEnabled;\r\n    }\r\n    public static set AmbientTextureEnabled(value: boolean) {\r\n        if (this._AmbientTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._AmbientTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _OpacityTextureEnabled = true;\r\n    /**\r\n     * Are opacity textures enabled in the application.\r\n     */\r\n    public static get OpacityTextureEnabled(): boolean {\r\n        return this._OpacityTextureEnabled;\r\n    }\r\n    public static set OpacityTextureEnabled(value: boolean) {\r\n        if (this._OpacityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._OpacityTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ReflectionTextureEnabled = true;\r\n    /**\r\n     * Are reflection textures enabled in the application.\r\n     */\r\n    public static get ReflectionTextureEnabled(): boolean {\r\n        return this._ReflectionTextureEnabled;\r\n    }\r\n    public static set ReflectionTextureEnabled(value: boolean) {\r\n        if (this._ReflectionTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ReflectionTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _EmissiveTextureEnabled = true;\r\n    /**\r\n     * Are emissive textures enabled in the application.\r\n     */\r\n    public static get EmissiveTextureEnabled(): boolean {\r\n        return this._EmissiveTextureEnabled;\r\n    }\r\n    public static set EmissiveTextureEnabled(value: boolean) {\r\n        if (this._EmissiveTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._EmissiveTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _SpecularTextureEnabled = true;\r\n    /**\r\n     * Are specular textures enabled in the application.\r\n     */\r\n    public static get SpecularTextureEnabled(): boolean {\r\n        return this._SpecularTextureEnabled;\r\n    }\r\n    public static set SpecularTextureEnabled(value: boolean) {\r\n        if (this._SpecularTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._SpecularTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _BumpTextureEnabled = true;\r\n    /**\r\n     * Are bump textures enabled in the application.\r\n     */\r\n    public static get BumpTextureEnabled(): boolean {\r\n        return this._BumpTextureEnabled;\r\n    }\r\n    public static set BumpTextureEnabled(value: boolean) {\r\n        if (this._BumpTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._BumpTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _LightmapTextureEnabled = true;\r\n    /**\r\n     * Are lightmap textures enabled in the application.\r\n     */\r\n    public static get LightmapTextureEnabled(): boolean {\r\n        return this._LightmapTextureEnabled;\r\n    }\r\n    public static set LightmapTextureEnabled(value: boolean) {\r\n        if (this._LightmapTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._LightmapTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _RefractionTextureEnabled = true;\r\n    /**\r\n     * Are refraction textures enabled in the application.\r\n     */\r\n    public static get RefractionTextureEnabled(): boolean {\r\n        return this._RefractionTextureEnabled;\r\n    }\r\n    public static set RefractionTextureEnabled(value: boolean) {\r\n        if (this._RefractionTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._RefractionTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ColorGradingTextureEnabled = true;\r\n    /**\r\n     * Are color grading textures enabled in the application.\r\n     */\r\n    public static get ColorGradingTextureEnabled(): boolean {\r\n        return this._ColorGradingTextureEnabled;\r\n    }\r\n    public static set ColorGradingTextureEnabled(value: boolean) {\r\n        if (this._ColorGradingTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ColorGradingTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _FresnelEnabled = true;\r\n    /**\r\n     * Are fresnels enabled in the application.\r\n     */\r\n    public static get FresnelEnabled(): boolean {\r\n        return this._FresnelEnabled;\r\n    }\r\n    public static set FresnelEnabled(value: boolean) {\r\n        if (this._FresnelEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._FresnelEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_FresnelDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatTextureEnabled = true;\r\n    /**\r\n     * Are clear coat textures enabled in the application.\r\n     */\r\n    public static get ClearCoatTextureEnabled(): boolean {\r\n        return this._ClearCoatTextureEnabled;\r\n    }\r\n    public static set ClearCoatTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatBumpTextureEnabled = true;\r\n    /**\r\n     * Are clear coat bump textures enabled in the application.\r\n     */\r\n    public static get ClearCoatBumpTextureEnabled(): boolean {\r\n        return this._ClearCoatBumpTextureEnabled;\r\n    }\r\n    public static set ClearCoatBumpTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatBumpTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatBumpTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatTintTextureEnabled = true;\r\n    /**\r\n     * Are clear coat tint textures enabled in the application.\r\n     */\r\n    public static get ClearCoatTintTextureEnabled(): boolean {\r\n        return this._ClearCoatTintTextureEnabled;\r\n    }\r\n    public static set ClearCoatTintTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatTintTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatTintTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _SheenTextureEnabled = true;\r\n    /**\r\n     * Are sheen textures enabled in the application.\r\n     */\r\n    public static get SheenTextureEnabled(): boolean {\r\n        return this._SheenTextureEnabled;\r\n    }\r\n    public static set SheenTextureEnabled(value: boolean) {\r\n        if (this._SheenTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._SheenTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _AnisotropicTextureEnabled = true;\r\n    /**\r\n     * Are anisotropic textures enabled in the application.\r\n     */\r\n    public static get AnisotropicTextureEnabled(): boolean {\r\n        return this._AnisotropicTextureEnabled;\r\n    }\r\n    public static set AnisotropicTextureEnabled(value: boolean) {\r\n        if (this._AnisotropicTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._AnisotropicTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ThicknessTextureEnabled = true;\r\n    /**\r\n     * Are thickness textures enabled in the application.\r\n     */\r\n    public static get ThicknessTextureEnabled(): boolean {\r\n        return this._ThicknessTextureEnabled;\r\n    }\r\n    public static set ThicknessTextureEnabled(value: boolean) {\r\n        if (this._ThicknessTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ThicknessTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _RefractionIntensityTextureEnabled = true;\r\n    /**\r\n     * Are refraction intensity textures enabled in the application.\r\n     */\r\n    public static get RefractionIntensityTextureEnabled(): boolean {\r\n        return this._ThicknessTextureEnabled;\r\n    }\r\n    public static set RefractionIntensityTextureEnabled(value: boolean) {\r\n        if (this._RefractionIntensityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._RefractionIntensityTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _TranslucencyIntensityTextureEnabled = true;\r\n    /**\r\n     * Are translucency intensity textures enabled in the application.\r\n     */\r\n    public static get TranslucencyIntensityTextureEnabled(): boolean {\r\n        return this._TranslucencyIntensityTextureEnabled;\r\n    }\r\n    public static set TranslucencyIntensityTextureEnabled(value: boolean) {\r\n        if (this._TranslucencyIntensityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._TranslucencyIntensityTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _TranslucencyColorTextureEnabled = true;\r\n    /**\r\n     * Are translucency tint textures enabled in the application.\r\n     */\r\n    public static get TranslucencyColorTextureEnabled(): boolean {\r\n        return this._TranslucencyColorTextureEnabled;\r\n    }\r\n    public static set TranslucencyColorTextureEnabled(value: boolean) {\r\n        if (this._TranslucencyColorTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._TranslucencyColorTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _IridescenceTextureEnabled = true;\r\n    /**\r\n     * Are translucency intensity textures enabled in the application.\r\n     */\r\n    public static get IridescenceTextureEnabled(): boolean {\r\n        return this._IridescenceTextureEnabled;\r\n    }\r\n    public static set IridescenceTextureEnabled(value: boolean) {\r\n        if (this._IridescenceTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._IridescenceTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
