import {
  FlowGraphBlock,
  RichTypeAny,
  RichTypeNumber,
  init_flowGraphBlock,
  init_flowGraphRichTypes
} from "./chunk-I4L6YYX4.js";
import {
  BackEase,
  BezierCurveEase,
  BounceEase,
  CircleEase,
  CubicEase,
  ElasticEase,
  ExponentialEase,
  init_easing
} from "./chunk-4Y5MQKI2.js";
import {
  RegisterClass,
  init_typeStore
} from "./chunk-D6A73UHJ.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Execution/Animation/flowGraphEasingBlock.js
function CreateEasingFunction(type, ...parameters) {
  switch (type) {
    case 11:
      return new BezierCurveEase(...parameters);
    case 0:
      return new CircleEase();
    case 1:
      return new BackEase(...parameters);
    case 2:
      return new BounceEase(...parameters);
    case 3:
      return new CubicEase();
    case 4:
      return new ElasticEase(...parameters);
    case 5:
      return new ExponentialEase(...parameters);
    default:
      throw new Error("Easing type not yet implemented");
  }
}
var EasingFunctionType, FlowGraphEasingBlock;
var init_flowGraphEasingBlock = __esm({
  "node_modules/@babylonjs/core/FlowGraph/Blocks/Execution/Animation/flowGraphEasingBlock.js"() {
    init_easing();
    init_flowGraphBlock();
    init_flowGraphRichTypes();
    init_typeStore();
    (function(EasingFunctionType2) {
      EasingFunctionType2[EasingFunctionType2["CircleEase"] = 0] = "CircleEase";
      EasingFunctionType2[EasingFunctionType2["BackEase"] = 1] = "BackEase";
      EasingFunctionType2[EasingFunctionType2["BounceEase"] = 2] = "BounceEase";
      EasingFunctionType2[EasingFunctionType2["CubicEase"] = 3] = "CubicEase";
      EasingFunctionType2[EasingFunctionType2["ElasticEase"] = 4] = "ElasticEase";
      EasingFunctionType2[EasingFunctionType2["ExponentialEase"] = 5] = "ExponentialEase";
      EasingFunctionType2[EasingFunctionType2["PowerEase"] = 6] = "PowerEase";
      EasingFunctionType2[EasingFunctionType2["QuadraticEase"] = 7] = "QuadraticEase";
      EasingFunctionType2[EasingFunctionType2["QuarticEase"] = 8] = "QuarticEase";
      EasingFunctionType2[EasingFunctionType2["QuinticEase"] = 9] = "QuinticEase";
      EasingFunctionType2[EasingFunctionType2["SineEase"] = 10] = "SineEase";
      EasingFunctionType2[EasingFunctionType2["BezierCurveEase"] = 11] = "BezierCurveEase";
    })(EasingFunctionType || (EasingFunctionType = {}));
    FlowGraphEasingBlock = class extends FlowGraphBlock {
      constructor(config) {
        super(config);
        this.config = config;
        this._easingFunctions = {};
        this.type = this.registerDataInput("type", RichTypeAny, 11);
        this.mode = this.registerDataInput("mode", RichTypeNumber, 0);
        this.parameters = this.registerDataInput("parameters", RichTypeAny, [1, 0, 0, 1]);
        this.easingFunction = this.registerDataOutput("easingFunction", RichTypeAny);
      }
      _updateOutputs(context) {
        const type = this.type.getValue(context);
        const mode = this.mode.getValue(context);
        const parameters = this.parameters.getValue(context);
        if (type === void 0 || mode === void 0) {
          return;
        }
        const key = `${type}-${mode}-${parameters.join("-")}`;
        if (!this._easingFunctions[key]) {
          const easing = CreateEasingFunction(type, ...parameters);
          easing.setEasingMode(mode);
          this._easingFunctions[key] = easing;
        }
        this.easingFunction.setValue(this._easingFunctions[key], context);
      }
      getClassName() {
        return "FlowGraphEasingBlock";
      }
    };
    RegisterClass("FlowGraphEasingBlock", FlowGraphEasingBlock);
  }
});

export {
  EasingFunctionType,
  FlowGraphEasingBlock,
  init_flowGraphEasingBlock
};
//# sourceMappingURL=chunk-TITPARJI.js.map
