{
  "version": 3,
  "sources": ["../../../dev/core/src/Animations/easing.ts"],
  "sourcesContent": ["import { BezierCurve } from \"../Maths/math.path\";\r\n\r\n/**\r\n * This represents the main contract an easing function should follow.\r\n * Easing functions are used throughout the animation system.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport interface IEasingFunction {\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corresponding value\r\n     * of the easing function.\r\n     * The link below provides some of the most common examples of easing functions.\r\n     * @see https://easings.net/\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    ease(gradient: number): number;\r\n}\r\n\r\n/**\r\n * Base class used for every default easing function.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Interpolation follows the mathematical formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEIN = 0;\r\n\r\n    /**\r\n     * Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEOUT = 1;\r\n\r\n    /**\r\n     * Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.\r\n     */\r\n    public static readonly EASINGMODE_EASEINOUT = 2;\r\n\r\n    private _easingMode = EasingFunction.EASINGMODE_EASEIN;\r\n\r\n    /**\r\n     * Sets the easing mode of the current function.\r\n     * @param easingMode Defines the willing mode (EASINGMODE_EASEIN, EASINGMODE_EASEOUT or EASINGMODE_EASEINOUT)\r\n     */\r\n    public setEasingMode(easingMode: number) {\r\n        const n = Math.min(Math.max(easingMode, 0), 2);\r\n        this._easingMode = n;\r\n    }\r\n    /**\r\n     * Gets the current easing mode.\r\n     * @returns the easing mode\r\n     */\r\n    public getEasingMode(): number {\r\n        return this._easingMode;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public easeInCore(gradient: number): number {\r\n        throw new Error(\"You must implement this method\");\r\n    }\r\n\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corresponding value\r\n     * of the easing function.\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    public ease(gradient: number): number {\r\n        switch (this._easingMode) {\r\n            case EasingFunction.EASINGMODE_EASEIN:\r\n                return this.easeInCore(gradient);\r\n            case EasingFunction.EASINGMODE_EASEOUT:\r\n                return 1 - this.easeInCore(1 - gradient);\r\n        }\r\n\r\n        if (gradient >= 0.5) {\r\n            return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;\r\n        }\r\n\r\n        return this.easeInCore(gradient * 2) * 0.5;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a circle shape (see link below).\r\n * @see https://easings.net/#easeInCirc\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class CircleEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        gradient = Math.max(0, Math.min(1, gradient));\r\n        return 1.0 - Math.sqrt(1.0 - gradient * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a ease back shape (see link below).\r\n * @see https://easings.net/#easeInBack\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class BackEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a back ease easing\r\n     * @see https://easings.net/#easeInBack\r\n     * @param amplitude Defines the amplitude of the function\r\n     */\r\n    constructor(\r\n        /** [1] Defines the amplitude of the function */\r\n        public amplitude: number = 1\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        const num = Math.max(0, this.amplitude);\r\n        return Math.pow(gradient, 3.0) - gradient * num * Math.sin(3.1415926535897931 * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bouncing shape (see link below).\r\n * @see https://easings.net/#easeInBounce\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class BounceEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bounce easing\r\n     * @see https://easings.net/#easeInBounce\r\n     * @param bounces Defines the number of bounces\r\n     * @param bounciness Defines the amplitude of the bounce\r\n     */\r\n    constructor(\r\n        /** [3] Defines the number of bounces */\r\n        public bounces: number = 3,\r\n        /** [2] Defines the amplitude of the bounce */\r\n        public bounciness: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        const y = Math.max(0.0, this.bounces);\r\n        let bounciness = this.bounciness;\r\n        if (bounciness <= 1.0) {\r\n            bounciness = 1.001;\r\n        }\r\n        const num9 = Math.pow(bounciness, y);\r\n        const num5 = 1.0 - bounciness;\r\n        const num4 = (1.0 - num9) / num5 + num9 * 0.5;\r\n        const num15 = gradient * num4;\r\n        const num65 = Math.log(-num15 * (1.0 - bounciness) + 1.0) / Math.log(bounciness);\r\n        const num3 = Math.floor(num65);\r\n        const num13 = num3 + 1.0;\r\n        const num8 = (1.0 - Math.pow(bounciness, num3)) / (num5 * num4);\r\n        const num12 = (1.0 - Math.pow(bounciness, num13)) / (num5 * num4);\r\n        const num7 = (num8 + num12) * 0.5;\r\n        const num6 = gradient - num7;\r\n        const num2 = num7 - num8;\r\n        return (-Math.pow(1.0 / bounciness, y - num3) / (num2 * num2)) * (num6 - num2) * (num6 + num2);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 3 shape (see link below).\r\n * @see https://easings.net/#easeInCubic\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class CubicEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an elastic shape (see link below).\r\n * @see https://easings.net/#easeInElastic\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class ElasticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an elastic easing function\r\n     * @see https://easings.net/#easeInElastic\r\n     * @param oscillations Defines the number of oscillations\r\n     * @param springiness Defines the amplitude of the oscillations\r\n     */\r\n    constructor(\r\n        /** [3] Defines the number of oscillations*/\r\n        public oscillations: number = 3,\r\n        /** [3] Defines the amplitude of the oscillations*/\r\n        public springiness: number = 3\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        let num2;\r\n        const num3 = Math.max(0.0, this.oscillations);\r\n        const num = Math.max(0.0, this.springiness);\r\n\r\n        if (num == 0) {\r\n            num2 = gradient;\r\n        } else {\r\n            num2 = (Math.exp(num * gradient) - 1.0) / (Math.exp(num) - 1.0);\r\n        }\r\n        return num2 * Math.sin((6.2831853071795862 * num3 + 1.5707963267948966) * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an exponential shape (see link below).\r\n * @see https://easings.net/#easeInExpo\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class ExponentialEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an exponential easing function\r\n     * @see https://easings.net/#easeInExpo\r\n     * @param exponent Defines the exponent of the function\r\n     */\r\n    constructor(\r\n        /** [3] Defines the exponent of the function */\r\n        public exponent: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        if (this.exponent <= 0) {\r\n            return gradient;\r\n        }\r\n\r\n        return (Math.exp(this.exponent * gradient) - 1.0) / (Math.exp(this.exponent) - 1.0);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class PowerEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an power base easing function\r\n     * @see https://easings.net/#easeInQuad\r\n     * @param power Defines the power of the function\r\n     */\r\n    constructor(\r\n        /** [2] Defines the power of the function */\r\n        public power: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        const y = Math.max(0.0, this.power);\r\n        return Math.pow(gradient, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 2 shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class QuadraticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        return gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 4 shape (see link below).\r\n * @see https://easings.net/#easeInQuart\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class QuarticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 5 shape (see link below).\r\n * @see https://easings.net/#easeInQuint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class QuinticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a sin shape (see link below).\r\n * @see https://easings.net/#easeInSine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class SineEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        return 1.0 - Math.sin(1.5707963267948966 * (1.0 - gradient));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bezier shape (see link below).\r\n * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class BezierCurveEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bezier function\r\n     * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n     * @param x1 Defines the x component of the start tangent in the bezier curve\r\n     * @param y1 Defines the y component of the start tangent in the bezier curve\r\n     * @param x2 Defines the x component of the end tangent in the bezier curve\r\n     * @param y2 Defines the y component of the end tangent in the bezier curve\r\n     */\r\n    constructor(\r\n        /** [0] Defines the x component of the start tangent in the bezier curve */\r\n        public x1: number = 0,\r\n        /** [0] Defines the y component of the start tangent in the bezier curve */\r\n        public y1: number = 0,\r\n        /** [1] Defines the x component of the end tangent in the bezier curve */\r\n        public x2: number = 1,\r\n        /** [1] Defines the y component of the end tangent in the bezier curve */\r\n        public y2: number = 1\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override easeInCore(gradient: number): number {\r\n        return BezierCurve.Interpolate(gradient, this.x1, this.y1, this.x2, this.y2);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
