{
  "version": 3,
  "sources": ["../../../dev/core/src/Maths/math.frustum.ts"],
  "sourcesContent": ["import type { Matrix, Vector3 } from \"./math.vector\";\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { Plane } from \"./math.plane\";\r\n\r\n/**\r\n * Represents a camera frustum\r\n */\r\nexport class Frustum {\r\n    /**\r\n     * Gets the planes representing the frustum\r\n     * @param transform matrix to be applied to the returned planes\r\n     * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\r\n     */\r\n    public static GetPlanes(transform: DeepImmutable<Matrix>): Plane[] {\r\n        const frustumPlanes = [];\r\n        for (let index = 0; index < 6; index++) {\r\n            frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\r\n        }\r\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\r\n        return frustumPlanes;\r\n    }\r\n\r\n    /**\r\n     * Gets the near frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetNearPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[2];\r\n        frustumPlane.normal.y = m[7] + m[6];\r\n        frustumPlane.normal.z = m[11] + m[10];\r\n        frustumPlane.d = m[15] + m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the far frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetFarPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[2];\r\n        frustumPlane.normal.y = m[7] - m[6];\r\n        frustumPlane.normal.z = m[11] - m[10];\r\n        frustumPlane.d = m[15] - m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the left frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetLeftPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[0];\r\n        frustumPlane.normal.y = m[7] + m[4];\r\n        frustumPlane.normal.z = m[11] + m[8];\r\n        frustumPlane.d = m[15] + m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the right frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetRightPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[0];\r\n        frustumPlane.normal.y = m[7] - m[4];\r\n        frustumPlane.normal.z = m[11] - m[8];\r\n        frustumPlane.d = m[15] - m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the top frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetTopPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[1];\r\n        frustumPlane.normal.y = m[7] - m[5];\r\n        frustumPlane.normal.z = m[11] - m[9];\r\n        frustumPlane.d = m[15] - m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the bottom frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetBottomPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[1];\r\n        frustumPlane.normal.y = m[7] + m[5];\r\n        frustumPlane.normal.z = m[11] + m[9];\r\n        frustumPlane.d = m[15] + m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\r\n     * @param transform transformation matrix to be applied to the resulting frustum planes\r\n     * @param frustumPlanes the resulting frustum planes\r\n     */\r\n    public static GetPlanesToRef(transform: DeepImmutable<Matrix>, frustumPlanes: Plane[]): void {\r\n        // Near\r\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\r\n\r\n        // Far\r\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\r\n\r\n        // Left\r\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\r\n\r\n        // Right\r\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\r\n\r\n        // Top\r\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\r\n\r\n        // Bottom\r\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is located between the frustum planes.\r\n     * @param point defines the point to test\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the point is located between the frustum planes\r\n     */\r\n    public static IsPointInFrustum(point: Vector3, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(point) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;AAEA,IAKa;AALb;;;AAKM,IAAO,UAAP,MAAO,SAAO;;;;;;MAMT,OAAO,UAAU,WAAgC;AACpD,cAAM,gBAAgB,CAAA;AACtB,iBAAS,QAAQ,GAAG,QAAQ,GAAG,SAAS;AACpC,wBAAc,KAAK,IAAI,MAAM,GAAK,GAAK,GAAK,CAAG,CAAC;QACpD;AACA,iBAAQ,eAAe,WAAW,aAAa;AAC/C,eAAO;MACX;;;;;;MAOO,OAAO,kBAAkB,WAAkC,cAAmB;AACjF,cAAM,IAAI,UAAU;AACpB,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACpC,qBAAa,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAC7B,qBAAa,UAAS;MAC1B;;;;;;MAOO,OAAO,iBAAiB,WAAkC,cAAmB;AAChF,cAAM,IAAI,UAAU;AACpB,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACpC,qBAAa,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAC7B,qBAAa,UAAS;MAC1B;;;;;;MAOO,OAAO,kBAAkB,WAAkC,cAAmB;AACjF,cAAM,IAAI,UAAU;AACpB,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;AACnC,qBAAa,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAC7B,qBAAa,UAAS;MAC1B;;;;;;MAOO,OAAO,mBAAmB,WAAkC,cAAmB;AAClF,cAAM,IAAI,UAAU;AACpB,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;AACnC,qBAAa,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAC7B,qBAAa,UAAS;MAC1B;;;;;;MAOO,OAAO,iBAAiB,WAAkC,cAAmB;AAChF,cAAM,IAAI,UAAU;AACpB,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;AACnC,qBAAa,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAC7B,qBAAa,UAAS;MAC1B;;;;;;MAOO,OAAO,oBAAoB,WAAkC,cAAmB;AACnF,cAAM,IAAI,UAAU;AACpB,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,qBAAa,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;AACnC,qBAAa,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAC7B,qBAAa,UAAS;MAC1B;;;;;;MAOO,OAAO,eAAe,WAAkC,eAAsB;AAEjF,iBAAQ,kBAAkB,WAAW,cAAc,CAAC,CAAC;AAGrD,iBAAQ,iBAAiB,WAAW,cAAc,CAAC,CAAC;AAGpD,iBAAQ,kBAAkB,WAAW,cAAc,CAAC,CAAC;AAGrD,iBAAQ,mBAAmB,WAAW,cAAc,CAAC,CAAC;AAGtD,iBAAQ,iBAAiB,WAAW,cAAc,CAAC,CAAC;AAGpD,iBAAQ,oBAAoB,WAAW,cAAc,CAAC,CAAC;MAC3D;;;;;;;MAQO,OAAO,iBAAiB,OAAgB,eAA0C;AACrF,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,cAAI,cAAc,CAAC,EAAE,cAAc,KAAK,IAAI,GAAG;AAC3C,mBAAO;UACX;QACJ;AACA,eAAO;MACX;;;;",
  "names": []
}
