{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/smartArray.ts"],
  "sourcesContent": ["/**\r\n * Defines an array and its length.\r\n * It can be helpful to group result from both Arrays and smart arrays in one structure.\r\n */\r\nexport interface ISmartArrayLike<T> {\r\n    /**\r\n     * The data of the array.\r\n     */\r\n    data: Array<T>;\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    length: number;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n */\r\nexport class SmartArray<T> implements ISmartArrayLike<T> {\r\n    /**\r\n     * The full set of data from the array.\r\n     */\r\n    public data: Array<T>;\r\n\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    public length: number = 0;\r\n\r\n    protected _id: number;\r\n\r\n    /**\r\n     * Instantiates a Smart Array.\r\n     * @param capacity defines the default capacity of the array.\r\n     */\r\n    constructor(capacity: number) {\r\n        this.data = new Array(capacity);\r\n        this._id = SmartArray._GlobalId++;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public push(value: T): void {\r\n        this.data[this.length++] = value;\r\n\r\n        if (this.length > this.data.length) {\r\n            this.data.length *= 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over the active data and apply the lambda to them.\r\n     * @param func defines the action to apply on each value.\r\n     */\r\n    public forEach(func: (content: T) => void): void {\r\n        for (let index = 0; index < this.length; index++) {\r\n            func(this.data[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sorts the full sets of data.\r\n     * @param compareFn defines the comparison function to apply.\r\n     */\r\n    public sort(compareFn: (a: T, b: T) => number): void {\r\n        this.data.sort(compareFn);\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public reset(): void {\r\n        this.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Releases all the data from the array as well as the array.\r\n     */\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        if (this.data) {\r\n            this.data.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concat(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            this.data[this.length++] = (array.data || array)[index];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the position of a value in the active data.\r\n     * @param value defines the value to find the index for\r\n     * @returns the index if found in the active data otherwise -1\r\n     */\r\n    public indexOf(value: T): number {\r\n        const position = this.data.indexOf(value);\r\n\r\n        if (position >= this.length) {\r\n            return -1;\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Returns whether an element is part of the active data.\r\n     * @param value defines the value to look for\r\n     * @returns true if found in the active data otherwise false\r\n     */\r\n    public contains(value: T): boolean {\r\n        return this.indexOf(value) !== -1;\r\n    }\r\n\r\n    // Statics\r\n    private static _GlobalId = 0;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n * The data in this array can only be present once\r\n */\r\nexport class SmartArrayNoDuplicate<T> extends SmartArray<T> {\r\n    private _duplicateId = 0;\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * THIS DOES NOT PREVENT DUPPLICATE DATA\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public override push(value: T): void {\r\n        super.push(value);\r\n\r\n        if (!(<any>value).__smartArrayFlags) {\r\n            (<any>value).__smartArrayFlags = {};\r\n        }\r\n\r\n        (<any>value).__smartArrayFlags[this._id] = this._duplicateId;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * If the data is already present, it won t be added again\r\n     * @param value defines the object to push in the array.\r\n     * @returns true if added false if it was already present\r\n     */\r\n    public pushNoDuplicate(value: T): boolean {\r\n        if ((<any>value).__smartArrayFlags && (<any>value).__smartArrayFlags[this._id] === this._duplicateId) {\r\n            return false;\r\n        }\r\n        this.push(value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public override reset(): void {\r\n        super.reset();\r\n        this._duplicateId++;\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * This ensures no duplicate will be present in the result.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concatWithNoDuplicate(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            const item = (array.data || array)[index];\r\n            this.pushNoDuplicate(item);\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;AAeA,IAGa,YAuHA;AA1Hb;;AAGM,IAAO,aAAP,MAAO,YAAU;;;;;MAiBnB,YAAY,UAAgB;AARrB,aAAA,SAAiB;AASpB,aAAK,OAAO,IAAI,MAAM,QAAQ;AAC9B,aAAK,MAAM,YAAW;MAC1B;;;;;MAMO,KAAK,OAAQ;AAChB,aAAK,KAAK,KAAK,QAAQ,IAAI;AAE3B,YAAI,KAAK,SAAS,KAAK,KAAK,QAAQ;AAChC,eAAK,KAAK,UAAU;QACxB;MACJ;;;;;MAMO,QAAQ,MAA0B;AACrC,iBAAS,QAAQ,GAAG,QAAQ,KAAK,QAAQ,SAAS;AAC9C,eAAK,KAAK,KAAK,KAAK,CAAC;QACzB;MACJ;;;;;MAMO,KAAK,WAAiC;AACzC,aAAK,KAAK,KAAK,SAAS;MAC5B;;;;MAKO,QAAK;AACR,aAAK,SAAS;MAClB;;;;MAKO,UAAO;AACV,aAAK,MAAK;AAEV,YAAI,KAAK,MAAM;AACX,eAAK,KAAK,SAAS;QACvB;MACJ;;;;;MAMO,OAAO,OAAU;AACpB,YAAI,MAAM,WAAW,GAAG;AACpB;QACJ;AACA,YAAI,KAAK,SAAS,MAAM,SAAS,KAAK,KAAK,QAAQ;AAC/C,eAAK,KAAK,UAAU,KAAK,SAAS,MAAM,UAAU;QACtD;AAEA,iBAAS,QAAQ,GAAG,QAAQ,MAAM,QAAQ,SAAS;AAC/C,eAAK,KAAK,KAAK,QAAQ,KAAK,MAAM,QAAQ,OAAO,KAAK;QAC1D;MACJ;;;;;;MAOO,QAAQ,OAAQ;AACnB,cAAM,WAAW,KAAK,KAAK,QAAQ,KAAK;AAExC,YAAI,YAAY,KAAK,QAAQ;AACzB,iBAAO;QACX;AAEA,eAAO;MACX;;;;;;MAOO,SAAS,OAAQ;AACpB,eAAO,KAAK,QAAQ,KAAK,MAAM;MACnC;;AAGe,eAAA,YAAY;AAOzB,IAAO,wBAAP,cAAwC,WAAa;MAA3D,cAAA;;AACY,aAAA,eAAe;MAyD3B;;;;;;MAlDoB,KAAK,OAAQ;AACzB,cAAM,KAAK,KAAK;AAEhB,YAAI,CAAO,MAAO,mBAAmB;AAC3B,gBAAO,oBAAoB,CAAA;QACrC;AAEM,cAAO,kBAAkB,KAAK,GAAG,IAAI,KAAK;MACpD;;;;;;;MAQO,gBAAgB,OAAQ;AAC3B,YAAU,MAAO,qBAA2B,MAAO,kBAAkB,KAAK,GAAG,MAAM,KAAK,cAAc;AAClG,iBAAO;QACX;AACA,aAAK,KAAK,KAAK;AACf,eAAO;MACX;;;;MAKgB,QAAK;AACjB,cAAM,MAAK;AACX,aAAK;MACT;;;;;;MAOO,sBAAsB,OAAU;AACnC,YAAI,MAAM,WAAW,GAAG;AACpB;QACJ;AACA,YAAI,KAAK,SAAS,MAAM,SAAS,KAAK,KAAK,QAAQ;AAC/C,eAAK,KAAK,UAAU,KAAK,SAAS,MAAM,UAAU;QACtD;AAEA,iBAAS,QAAQ,GAAG,QAAQ,MAAM,QAAQ,SAAS;AAC/C,gBAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK;AACxC,eAAK,gBAAgB,IAAI;QAC7B;MACJ;;;;",
  "names": []
}
