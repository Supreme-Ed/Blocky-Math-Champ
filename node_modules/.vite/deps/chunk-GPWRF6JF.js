import {
  Vector2,
  init_math_vector
} from "./chunk-3KKXJTKL.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/Events/pointerEvents.js
var PointerEventTypes, PointerInfoBase, PointerInfoPre, PointerInfo;
var init_pointerEvents = __esm({
  "node_modules/@babylonjs/core/Events/pointerEvents.js"() {
    init_math_vector();
    PointerEventTypes = class {
    };
    PointerEventTypes.POINTERDOWN = 1;
    PointerEventTypes.POINTERUP = 2;
    PointerEventTypes.POINTERMOVE = 4;
    PointerEventTypes.POINTERWHEEL = 8;
    PointerEventTypes.POINTERPICK = 16;
    PointerEventTypes.POINTERTAP = 32;
    PointerEventTypes.POINTERDOUBLETAP = 64;
    PointerInfoBase = class {
      /**
       * Instantiates the base class of pointers info.
       * @param type Defines the type of event (PointerEventTypes)
       * @param event Defines the related dom event
       */
      constructor(type, event) {
        this.type = type;
        this.event = event;
      }
    };
    PointerInfoPre = class extends PointerInfoBase {
      /**
       * Instantiates a PointerInfoPre to store pointer related info to the onPrePointerObservable event.
       * @param type Defines the type of event (PointerEventTypes)
       * @param event Defines the related dom event
       * @param localX Defines the local x coordinates of the pointer when the event occured
       * @param localY Defines the local y coordinates of the pointer when the event occured
       */
      constructor(type, event, localX, localY) {
        super(type, event);
        this.ray = null;
        this.originalPickingInfo = null;
        this.skipOnPointerObservable = false;
        this.localPosition = new Vector2(localX, localY);
      }
    };
    PointerInfo = class extends PointerInfoBase {
      /**
       * Defines the picking info associated with this PointerInfo object (if applicable)
       */
      get pickInfo() {
        if (!this._pickInfo) {
          this._generatePickInfo();
        }
        return this._pickInfo;
      }
      /**
       * Instantiates a PointerInfo to store pointer related info to the onPointerObservable event.
       * @param type Defines the type of event (PointerEventTypes)
       * @param event Defines the related dom event
       * @param pickInfo Defines the picking info associated to the info (if any)
       * @param inputManager Defines the InputManager to use if there is no pickInfo
       */
      constructor(type, event, pickInfo, inputManager = null) {
        super(type, event);
        this._pickInfo = pickInfo;
        this._inputManager = inputManager;
      }
      /**
       * Generates the picking info if needed
       */
      /** @internal */
      _generatePickInfo() {
        if (this._inputManager) {
          this._pickInfo = this._inputManager._pickMove(this.event);
          this._inputManager._setRayOnPointerInfo(this._pickInfo, this.event);
          this._inputManager = null;
        }
      }
    };
  }
});

export {
  PointerEventTypes,
  PointerInfoBase,
  PointerInfoPre,
  PointerInfo,
  init_pointerEvents
};
//# sourceMappingURL=chunk-GPWRF6JF.js.map
