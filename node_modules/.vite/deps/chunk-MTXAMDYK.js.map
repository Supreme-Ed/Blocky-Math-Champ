{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/effectFallbacks.ts"],
  "sourcesContent": ["import type { Nullable } from \"../types\";\r\nimport type { IEffectFallbacks } from \"./iEffectFallbacks\";\r\n\r\nimport type { Effect } from \"./effect\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\r\nexport class EffectFallbacks implements IEffectFallbacks {\r\n    private _defines: { [key: string]: Array<String> } = {};\r\n\r\n    private _currentRank = 32;\r\n    private _maxRank = -1;\r\n\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Removes the fallback from the bound mesh.\r\n     */\r\n    public unBindMesh() {\r\n        this._mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Adds a fallback on the specified property.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param define The name of the define in the shader\r\n     */\r\n    public addFallback(rank: number, define: string): void {\r\n        if (!this._defines[rank]) {\r\n            if (rank < this._currentRank) {\r\n                this._currentRank = rank;\r\n            }\r\n\r\n            if (rank > this._maxRank) {\r\n                this._maxRank = rank;\r\n            }\r\n\r\n            this._defines[rank] = new Array<String>();\r\n        }\r\n\r\n        this._defines[rank].push(define);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to use CPU skinning when needing to fallback.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param mesh The mesh to use the fallbacks.\r\n     */\r\n    public addCPUSkinningFallback(rank: number, mesh: AbstractMesh) {\r\n        this._mesh = mesh;\r\n\r\n        if (rank < this._currentRank) {\r\n            this._currentRank = rank;\r\n        }\r\n        if (rank > this._maxRank) {\r\n            this._maxRank = rank;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if more fallbacks are still available.\r\n     */\r\n    public get hasMoreFallbacks(): boolean {\r\n        return this._currentRank <= this._maxRank;\r\n    }\r\n\r\n    /**\r\n     * Removes the defines that should be removed when falling back.\r\n     * @param currentDefines defines the current define statements for the shader.\r\n     * @param effect defines the current effect we try to compile\r\n     * @returns The resulting defines with defines of the current rank removed.\r\n     */\r\n    public reduce(currentDefines: string, effect: Effect): string {\r\n        // First we try to switch to CPU skinning\r\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\r\n            this._mesh.computeBonesUsingShaders = false;\r\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\r\n            effect._bonesComputationForcedToCPU = true;\r\n\r\n            const scene = this._mesh.getScene();\r\n            for (let index = 0; index < scene.meshes.length; index++) {\r\n                const otherMesh = scene.meshes[index];\r\n\r\n                if (!otherMesh.material) {\r\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\r\n                        otherMesh.computeBonesUsingShaders = false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (otherMesh.material.getEffect() === effect) {\r\n                    otherMesh.computeBonesUsingShaders = false;\r\n                } else if (otherMesh.subMeshes) {\r\n                    for (const subMesh of otherMesh.subMeshes) {\r\n                        const subMeshEffect = subMesh.effect;\r\n\r\n                        if (subMeshEffect === effect) {\r\n                            otherMesh.computeBonesUsingShaders = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const currentFallbacks = this._defines[this._currentRank];\r\n            if (currentFallbacks) {\r\n                for (let index = 0; index < currentFallbacks.length; index++) {\r\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\r\n                }\r\n            }\r\n\r\n            this._currentRank++;\r\n        }\r\n\r\n        return currentDefines;\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;AAMA,IAIa;AAJb;;AAIM,IAAO,kBAAP,MAAsB;MAA5B,cAAA;AACY,aAAA,WAA6C,CAAA;AAE7C,aAAA,eAAe;AACf,aAAA,WAAW;AAEX,aAAA,QAAgC;MA2G5C;;;;MAtGW,aAAU;AACb,aAAK,QAAQ;MACjB;;;;;;MAOO,YAAY,MAAc,QAAc;AAC3C,YAAI,CAAC,KAAK,SAAS,IAAI,GAAG;AACtB,cAAI,OAAO,KAAK,cAAc;AAC1B,iBAAK,eAAe;UACxB;AAEA,cAAI,OAAO,KAAK,UAAU;AACtB,iBAAK,WAAW;UACpB;AAEA,eAAK,SAAS,IAAI,IAAI,IAAI,MAAK;QACnC;AAEA,aAAK,SAAS,IAAI,EAAE,KAAK,MAAM;MACnC;;;;;;MAOO,uBAAuB,MAAc,MAAkB;AAC1D,aAAK,QAAQ;AAEb,YAAI,OAAO,KAAK,cAAc;AAC1B,eAAK,eAAe;QACxB;AACA,YAAI,OAAO,KAAK,UAAU;AACtB,eAAK,WAAW;QACpB;MACJ;;;;MAKA,IAAW,mBAAgB;AACvB,eAAO,KAAK,gBAAgB,KAAK;MACrC;;;;;;;MAQO,OAAO,gBAAwB,QAAc;AAEhD,YAAI,KAAK,SAAS,KAAK,MAAM,4BAA4B,KAAK,MAAM,qBAAqB,GAAG;AACxF,eAAK,MAAM,2BAA2B;AACtC,2BAAiB,eAAe,QAAQ,kCAAkC,KAAK,MAAM,oBAAoB,gCAAgC;AACzI,iBAAO,+BAA+B;AAEtC,gBAAM,QAAQ,KAAK,MAAM,SAAQ;AACjC,mBAAS,QAAQ,GAAG,QAAQ,MAAM,OAAO,QAAQ,SAAS;AACtD,kBAAM,YAAY,MAAM,OAAO,KAAK;AAEpC,gBAAI,CAAC,UAAU,UAAU;AACrB,kBAAI,CAAC,KAAK,MAAM,YAAY,UAAU,4BAA4B,UAAU,qBAAqB,GAAG;AAChG,0BAAU,2BAA2B;cACzC;AACA;YACJ;AAEA,gBAAI,CAAC,UAAU,4BAA4B,UAAU,uBAAuB,GAAG;AAC3E;YACJ;AAEA,gBAAI,UAAU,SAAS,UAAS,MAAO,QAAQ;AAC3C,wBAAU,2BAA2B;YACzC,WAAW,UAAU,WAAW;AAC5B,yBAAW,WAAW,UAAU,WAAW;AACvC,sBAAM,gBAAgB,QAAQ;AAE9B,oBAAI,kBAAkB,QAAQ;AAC1B,4BAAU,2BAA2B;AACrC;gBACJ;cACJ;YACJ;UACJ;QACJ,OAAO;AACH,gBAAM,mBAAmB,KAAK,SAAS,KAAK,YAAY;AACxD,cAAI,kBAAkB;AAClB,qBAAS,QAAQ,GAAG,QAAQ,iBAAiB,QAAQ,SAAS;AAC1D,+BAAiB,eAAe,QAAQ,aAAa,iBAAiB,KAAK,GAAG,EAAE;YACpF;UACJ;AAEA,eAAK;QACT;AAEA,eAAO;MACX;;;;",
  "names": []
}
