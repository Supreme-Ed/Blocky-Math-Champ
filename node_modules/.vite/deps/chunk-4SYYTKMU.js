import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/ShadersWGSL/iblVoxelSlabDebug.vertex.js
var name, shader, iblVoxelSlabDebugVertexShaderWGSL;
var init_iblVoxelSlabDebug_vertex = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/iblVoxelSlabDebug.vertex.js"() {
    init_shaderStore();
    name = "iblVoxelSlabDebugVertexShader";
    shader = `attribute position: vec3f;varying vNormalizedPosition: vec3f;uniform world: mat4x4f;uniform invWorldScale: mat4x4f;uniform cameraViewMatrix: mat4x4f;uniform projection: mat4x4f;uniform viewMatrix: mat4x4f;@vertex
fn main(input : VertexInputs)->FragmentInputs {var worldPosition: vec4f=(uniforms.world* vec4f(input.position,1.));vertexOutputs.position=uniforms.projection*uniforms.cameraViewMatrix*worldPosition;vertexOutputs.vNormalizedPosition=(uniforms.viewMatrix*uniforms.invWorldScale*worldPosition).rgb;vertexOutputs.vNormalizedPosition=vertexOutputs.vNormalizedPosition* vec3f(0.5)+ vec3f(0.5);}`;
    if (!ShaderStore.ShadersStoreWGSL[name]) {
      ShaderStore.ShadersStoreWGSL[name] = shader;
    }
    iblVoxelSlabDebugVertexShaderWGSL = { name, shader };
  }
});

export {
  iblVoxelSlabDebugVertexShaderWGSL,
  init_iblVoxelSlabDebug_vertex
};
//# sourceMappingURL=chunk-4SYYTKMU.js.map
