{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphConsoleLogBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\r\nimport { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\n\r\n/**\r\n * Configuration for the console log block.\r\n */\r\nexport interface IFlowGraphConsoleLogBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * An optional message template to use for the log message.\r\n     * If provided, the template can hold placeholders for the message value.\r\n     * For example, if the template is \"The message is: \\{data\\}\", a new data input called \"data\" will be created.\r\n     * The value of the message input will be used to replace the placeholder in the template.\r\n     */\r\n    messageTemplate?: string;\r\n}\r\n\r\n/**\r\n * Block that logs a message to the console.\r\n */\r\nexport class FlowGraphConsoleLogBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: The message to log.\r\n     * Will be ignored if a message template is provided.\r\n     */\r\n    public readonly message: FlowGraphDataConnection<any>;\r\n\r\n    /**\r\n     * Input connection: The log type.\r\n     */\r\n    public readonly logType: FlowGraphDataConnection<\"log\" | \"warn\" | \"error\">;\r\n\r\n    public constructor(config?: IFlowGraphConsoleLogBlockConfiguration) {\r\n        super(config);\r\n        this.message = this.registerDataInput(\"message\", RichTypeAny);\r\n        this.logType = this.registerDataInput(\"logType\", RichTypeAny, \"log\");\r\n        if (config?.messageTemplate) {\r\n            const matches = this._getTemplateMatches(config.messageTemplate);\r\n            for (const match of matches) {\r\n                this.registerDataInput(match, RichTypeAny);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext): void {\r\n        const typeValue = this.logType.getValue(context);\r\n        const messageValue = this._getMessageValue(context);\r\n        if (typeValue === \"warn\") {\r\n            Logger.Warn(messageValue);\r\n        } else if (typeValue === \"error\") {\r\n            Logger.Error(messageValue);\r\n        } else {\r\n            Logger.Log(messageValue);\r\n        }\r\n        // activate the output flow block\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.ConsoleLog;\r\n    }\r\n\r\n    private _getMessageValue(context: FlowGraphContext): string {\r\n        if (this.config?.messageTemplate) {\r\n            let template: string = this.config.messageTemplate;\r\n            const matches = this._getTemplateMatches(template);\r\n            for (const match of matches) {\r\n                const value = this.getDataInput(match)?.getValue(context);\r\n                if (value !== undefined) {\r\n                    // replace all\r\n                    template = template.replace(new RegExp(`\\\\{${match}\\\\}`, \"g\"), value.toString());\r\n                }\r\n            }\r\n            return template;\r\n        } else {\r\n            return this.message.getValue(context);\r\n        }\r\n    }\r\n\r\n    private _getTemplateMatches(template: string): string[] {\r\n        const regex = /\\{([^}]+)\\}/g;\r\n        const matches: string[] = [];\r\n        let match;\r\n        while ((match = regex.exec(template)) !== null) {\r\n            matches.push(match[1]);\r\n        }\r\n        return matches;\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.ConsoleLog, FlowGraphConsoleLogBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAEA,IAuBa;AAvBb;;;AACA;AACA;AAEA;AAmBM,IAAO,2BAAP,cAAwC,qCAAoC;MAY9E,YAAmB,QAA+C;AAC9D,cAAM,MAAM;AACZ,aAAK,UAAU,KAAK,kBAAkB,WAAW,WAAW;AAC5D,aAAK,UAAU,KAAK,kBAAkB,WAAW,aAAa,KAAK;AACnE,YAAI,iCAAQ,iBAAiB;AACzB,gBAAM,UAAU,KAAK,oBAAoB,OAAO,eAAe;AAC/D,qBAAW,SAAS,SAAS;AACzB,iBAAK,kBAAkB,OAAO,WAAW;UAC7C;QACJ;MACJ;;;;MAKO,SAAS,SAAyB;AACrC,cAAM,YAAY,KAAK,QAAQ,SAAS,OAAO;AAC/C,cAAM,eAAe,KAAK,iBAAiB,OAAO;AAClD,YAAI,cAAc,QAAQ;AACtB,iBAAO,KAAK,YAAY;QAC5B,WAAW,cAAc,SAAS;AAC9B,iBAAO,MAAM,YAAY;QAC7B,OAAO;AACH,iBAAO,IAAI,YAAY;QAC3B;AAEA,aAAK,IAAI,gBAAgB,OAAO;MACpC;;;;MAKgB,eAAY;AACxB,eAAA;MACJ;MAEQ,iBAAiB,SAAyB;AAvEtD;AAwEQ,aAAI,UAAK,WAAL,mBAAa,iBAAiB;AAC9B,cAAI,WAAmB,KAAK,OAAO;AACnC,gBAAM,UAAU,KAAK,oBAAoB,QAAQ;AACjD,qBAAW,SAAS,SAAS;AACzB,kBAAM,SAAQ,UAAK,aAAa,KAAK,MAAvB,mBAA0B,SAAS;AACjD,gBAAI,UAAU,QAAW;AAErB,yBAAW,SAAS,QAAQ,IAAI,OAAO,MAAM,KAAK,OAAO,GAAG,GAAG,MAAM,SAAQ,CAAE;YACnF;UACJ;AACA,iBAAO;QACX,OAAO;AACH,iBAAO,KAAK,QAAQ,SAAS,OAAO;QACxC;MACJ;MAEQ,oBAAoB,UAAgB;AACxC,cAAM,QAAQ;AACd,cAAM,UAAoB,CAAA;AAC1B,YAAI;AACJ,gBAAQ,QAAQ,MAAM,KAAK,QAAQ,OAAO,MAAM;AAC5C,kBAAQ,KAAK,MAAM,CAAC,CAAC;QACzB;AACA,eAAO;MACX;;AAGJ,kBAAa,4BAAiC,wBAAwB;;;",
  "names": []
}
