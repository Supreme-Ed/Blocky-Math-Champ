import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/ShadersWGSL/fluidRenderingParticleThickness.vertex.js
var name, shader, fluidRenderingParticleThicknessVertexShaderWGSL;
var init_fluidRenderingParticleThickness_vertex = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/fluidRenderingParticleThickness.vertex.js"() {
    init_shaderStore();
    name = "fluidRenderingParticleThicknessVertexShader";
    shader = `attribute position: vec3f;attribute offset: vec2f;uniform view: mat4x4f;uniform projection: mat4x4f;uniform size: vec2f;varying uv: vec2f;@vertex
fn main(input: VertexInputs)->FragmentInputs {var cornerPos: vec3f=vec3f(
vec2f(input.offset.x-0.5,input.offset.y-0.5)*uniforms.size,
0.0
);var viewPos: vec3f=(uniforms.view*vec4f(input.position,1.0)).xyz+cornerPos;vertexOutputs.position=uniforms.projection*vec4f(viewPos,1.0);vertexOutputs.uv=input.offset;}
`;
    if (!ShaderStore.ShadersStoreWGSL[name]) {
      ShaderStore.ShadersStoreWGSL[name] = shader;
    }
    fluidRenderingParticleThicknessVertexShaderWGSL = { name, shader };
  }
});

export {
  fluidRenderingParticleThicknessVertexShaderWGSL,
  init_fluidRenderingParticleThickness_vertex
};
//# sourceMappingURL=chunk-5CM7N6LL.js.map
