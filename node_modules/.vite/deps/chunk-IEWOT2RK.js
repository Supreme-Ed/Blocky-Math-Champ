import {
  init_morphTargetsVertex
} from "./chunk-QOVALOJF.js";
import {
  init_morphTargetsVertexGlobalDeclaration
} from "./chunk-GLKKHPTW.js";
import {
  init_morphTargetsVertexDeclaration
} from "./chunk-SVH5S56E.js";
import {
  init_morphTargetsVertexGlobal
} from "./chunk-A75QMHDJ.js";
import {
  init_instancesDeclaration
} from "./chunk-PHDE2RTQ.js";
import {
  init_bakedVertexAnimation,
  init_bakedVertexAnimationDeclaration
} from "./chunk-FY3WF3G7.js";
import {
  init_instancesVertex
} from "./chunk-3GKD2CMZ.js";
import {
  init_bonesVertex
} from "./chunk-MV7NREEA.js";
import {
  init_bonesDeclaration
} from "./chunk-4QH3AMXR.js";
import {
  init_logDepthVertex
} from "./chunk-UTBRMTH7.js";
import {
  init_logDepthDeclaration
} from "./chunk-K3XAGB54.js";
import {
  init_clipPlaneVertex
} from "./chunk-YX2M7NON.js";
import {
  init_clipPlaneVertexDeclaration
} from "./chunk-EA2CB46P.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/ShadersWGSL/outline.vertex.js
var name, shader, outlineVertexShaderWGSL;
var init_outline_vertex = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/outline.vertex.js"() {
    init_shaderStore();
    init_bonesDeclaration();
    init_bakedVertexAnimationDeclaration();
    init_morphTargetsVertexGlobalDeclaration();
    init_morphTargetsVertexDeclaration();
    init_clipPlaneVertexDeclaration();
    init_instancesDeclaration();
    init_logDepthDeclaration();
    init_morphTargetsVertexGlobal();
    init_morphTargetsVertex();
    init_instancesVertex();
    init_bonesVertex();
    init_bakedVertexAnimation();
    init_clipPlaneVertex();
    init_logDepthVertex();
    name = "outlineVertexShader";
    shader = `attribute position: vec3f;attribute normal: vec3f;
#include<bonesDeclaration>
#include<bakedVertexAnimationDeclaration>
#include<morphTargetsVertexGlobalDeclaration>
#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]
#include<clipPlaneVertexDeclaration>
uniform offset: f32;
#include<instancesDeclaration>
uniform viewProjection: mat4x4f;
#ifdef ALPHATEST
varying vUV: vec2f;uniform diffuseMatrix: mat4x4f; 
#ifdef UV1
attribute uv: vec2f;
#endif
#ifdef UV2
attribute uv2: vec2f;
#endif
#endif
#include<logDepthDeclaration>
#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input: VertexInputs)->FragmentInputs {var positionUpdated: vec3f=vertexInputs.position;var normalUpdated: vec3f=vertexInputs.normal;
#ifdef UV1
var uvUpdated: vec2f=vertexInputs.uv;
#endif
#ifdef UV2
var uv2Updated: vec2f=vertexInputs.uv2;
#endif
#include<morphTargetsVertexGlobal>
#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]
var offsetPosition: vec3f=positionUpdated+(normalUpdated*uniforms.offset);
#include<instancesVertex>
#include<bonesVertex>
#include<bakedVertexAnimation>
var worldPos: vec4f=finalWorld*vec4f(offsetPosition,1.0);vertexOutputs.position=uniforms.viewProjection*worldPos;
#ifdef ALPHATEST
#ifdef UV1
vertexOutputs.vUV=(uniforms.diffuseMatrix*vec4f(uvUpdated,1.0,0.0)).xy;
#endif
#ifdef UV2
vertexOutputs.vUV=(uniforms.diffuseMatrix*vec4f(uv2Updated,1.0,0.0)).xy;
#endif
#endif
#include<clipPlaneVertex>
#include<logDepthVertex>
}
`;
    if (!ShaderStore.ShadersStoreWGSL[name]) {
      ShaderStore.ShadersStoreWGSL[name] = shader;
    }
    outlineVertexShaderWGSL = { name, shader };
  }
});

export {
  outlineVertexShaderWGSL,
  init_outline_vertex
};
//# sourceMappingURL=chunk-IEWOT2RK.js.map
