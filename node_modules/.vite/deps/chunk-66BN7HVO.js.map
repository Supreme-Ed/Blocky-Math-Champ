{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphWhileLoopBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeBoolean } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\n/**\r\n * Configuration for the while loop block.\r\n */\r\nexport interface IFlowGraphWhileLoopBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * If true, the loop body will be executed at least once.\r\n     */\r\n    doWhile?: boolean;\r\n}\r\n\r\n/**\r\n * A block that executes a branch while a condition is true.\r\n */\r\nexport class FlowGraphWhileLoopBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * The maximum number of iterations allowed in a loop.\r\n     * This can be set to avoid an infinite loop.\r\n     */\r\n    public static MaxLoopCount = 1000;\r\n\r\n    /**\r\n     * Input connection: The condition to evaluate.\r\n     */\r\n    public readonly condition: FlowGraphDataConnection<boolean>;\r\n    /**\r\n     * Output connection: The loop body.\r\n     */\r\n    public readonly executionFlow: FlowGraphSignalConnection;\r\n\r\n    /**\r\n     * Output connection: The completed signal. Triggered when condition is false.\r\n     * No out signal is available.\r\n     */\r\n    public readonly completed: FlowGraphSignalConnection;\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config?: IFlowGraphWhileLoopBlockConfiguration\r\n    ) {\r\n        super(config);\r\n\r\n        this.condition = this.registerDataInput(\"condition\", RichTypeBoolean);\r\n        this.executionFlow = this._registerSignalOutput(\"executionFlow\");\r\n        this.completed = this._registerSignalOutput(\"completed\");\r\n        // unregister \"out\" signal\r\n        this._unregisterSignalOutput(\"out\");\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\r\n        let conditionValue = this.condition.getValue(context);\r\n        if (this.config?.doWhile && !conditionValue) {\r\n            this.executionFlow._activateSignal(context);\r\n        }\r\n        let i = 0;\r\n        while (conditionValue) {\r\n            this.executionFlow._activateSignal(context);\r\n            ++i;\r\n            if (i >= FlowGraphWhileLoopBlock.MaxLoopCount) {\r\n                Logger.Warn(\"FlowGraphWhileLoopBlock: Max loop count reached. Breaking.\");\r\n                break;\r\n            }\r\n            conditionValue = this.condition.getValue(context);\r\n        }\r\n        // out is not triggered - completed is triggered\r\n        this.completed._activateSignal(context);\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.WhileLoop;\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.WhileLoop, FlowGraphWhileLoopBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAEA,IAoBa;AApBb;;;AAGA;AACA;AACA;AAeM,IAAO,0BAAP,MAAO,iCAAgC,qCAAoC;MAsB7E,YAIoB,QAA8C;AAE9D,cAAM,MAAM;AAFI,aAAA,SAAA;AAIhB,aAAK,YAAY,KAAK,kBAAkB,aAAa,eAAe;AACpE,aAAK,gBAAgB,KAAK,sBAAsB,eAAe;AAC/D,aAAK,YAAY,KAAK,sBAAsB,WAAW;AAEvD,aAAK,wBAAwB,KAAK;MACtC;MAEO,SAAS,SAA2B,gBAAyC;AAzDxF;AA0DQ,YAAI,iBAAiB,KAAK,UAAU,SAAS,OAAO;AACpD,cAAI,UAAK,WAAL,mBAAa,YAAW,CAAC,gBAAgB;AACzC,eAAK,cAAc,gBAAgB,OAAO;QAC9C;AACA,YAAI,IAAI;AACR,eAAO,gBAAgB;AACnB,eAAK,cAAc,gBAAgB,OAAO;AAC1C,YAAE;AACF,cAAI,KAAK,yBAAwB,cAAc;AAC3C,mBAAO,KAAK,4DAA4D;AACxE;UACJ;AACA,2BAAiB,KAAK,UAAU,SAAS,OAAO;QACpD;AAEA,aAAK,UAAU,gBAAgB,OAAO;MAC1C;MAEgB,eAAY;AACxB,eAAA;MACJ;;AArDc,4BAAA,eAAe;AAwDjC,kBAAa,2BAAgC,uBAAuB;;;",
  "names": []
}
