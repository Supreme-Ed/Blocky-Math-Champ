import {
  init_hdrFilteringFunctions,
  init_importanceSampling
} from "./chunk-OMPAGEWM.js";
import {
  init_pbrBRDFFunctions
} from "./chunk-RJWLGBK2.js";
import {
  init_helperFunctions
} from "./chunk-W4QLV37H.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/ShadersWGSL/hdrFiltering.fragment.js
var name, shader, hdrFilteringPixelShaderWGSL;
var init_hdrFiltering_fragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/hdrFiltering.fragment.js"() {
    init_shaderStore();
    init_helperFunctions();
    init_importanceSampling();
    init_pbrBRDFFunctions();
    init_hdrFilteringFunctions();
    name = "hdrFilteringPixelShader";
    shader = `#include<helperFunctions>
#include<importanceSampling>
#include<pbrBRDFFunctions>
#include<hdrFilteringFunctions>
uniform alphaG: f32;var inputTextureSampler: sampler;var inputTexture: texture_cube<f32>;uniform vFilteringInfo: vec2f;uniform hdrScale: f32;varying direction: vec3f;@fragment
fn main(input: FragmentInputs)->FragmentOutputs {var color: vec3f=radiance(uniforms.alphaG,inputTexture,inputTextureSampler,input.direction,uniforms.vFilteringInfo);fragmentOutputs.color= vec4f(color*uniforms.hdrScale,1.0);}`;
    if (!ShaderStore.ShadersStoreWGSL[name]) {
      ShaderStore.ShadersStoreWGSL[name] = shader;
    }
    hdrFilteringPixelShaderWGSL = { name, shader };
  }
});

export {
  hdrFilteringPixelShaderWGSL,
  init_hdrFiltering_fragment
};
//# sourceMappingURL=chunk-H5XYAQI7.js.map
