{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphFlipFlopBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"core/FlowGraph/flowGraphExecutionBlock\";\r\nimport { RichTypeBoolean } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"core/FlowGraph/flowGraphSignalConnection\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\n\r\n/**\r\n * Configuration for the flip flop block.\r\n */\r\nexport interface IFlowGraphFlipFlopBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The starting value of the flip flop switch\r\n     */\r\n    startValue?: boolean;\r\n}\r\n\r\n/**\r\n * This block flip flops between two outputs.\r\n */\r\nexport class FlowGraphFlipFlopBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Output connection: The signal to execute when the variable is on.\r\n     */\r\n    public readonly onOn: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connection: The signal to execute when the variable is off.\r\n     */\r\n    public readonly onOff: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connection: If the variable is on.\r\n     */\r\n    public readonly value: FlowGraphDataConnection<boolean>;\r\n\r\n    constructor(config?: IFlowGraphFlipFlopBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.onOn = this._registerSignalOutput(\"onOn\");\r\n        this.onOff = this._registerSignalOutput(\"onOff\");\r\n        this.value = this.registerDataOutput(\"value\", RichTypeBoolean);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\r\n        let value = context._getExecutionVariable(this, \"value\", typeof this.config?.startValue === \"boolean\" ? !this.config.startValue : false);\r\n\r\n        value = !value;\r\n        context._setExecutionVariable(this, \"value\", value);\r\n        this.value.setValue(value, context);\r\n        if (value) {\r\n            this.onOn._activateSignal(context);\r\n        } else {\r\n            this.onOff._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.FlipFlop;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.FlipFlop, FlowGraphFlipFlopBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAEA,IAoBa;AApBb;;;AACA;AAEA;AAiBM,IAAO,yBAAP,cAAsC,wBAAuB;MAc/D,YAAY,QAA6C;AACrD,cAAM,MAAM;AAEZ,aAAK,OAAO,KAAK,sBAAsB,MAAM;AAC7C,aAAK,QAAQ,KAAK,sBAAsB,OAAO;AAC/C,aAAK,QAAQ,KAAK,mBAAmB,SAAS,eAAe;MACjE;MAEO,SAAS,SAA2B,gBAAyC;AA1CxF;AA2CQ,YAAI,QAAQ,QAAQ,sBAAsB,MAAM,SAAS,SAAO,UAAK,WAAL,mBAAa,gBAAe,YAAY,CAAC,KAAK,OAAO,aAAa,KAAK;AAEvI,gBAAQ,CAAC;AACT,gBAAQ,sBAAsB,MAAM,SAAS,KAAK;AAClD,aAAK,MAAM,SAAS,OAAO,OAAO;AAClC,YAAI,OAAO;AACP,eAAK,KAAK,gBAAgB,OAAO;QACrC,OAAO;AACH,eAAK,MAAM,gBAAgB,OAAO;QACtC;MACJ;;;;MAKgB,eAAY;AACxB,eAAA;MACJ;;AAEJ,kBAAa,0BAA+B,sBAAsB;;;",
  "names": []
}
