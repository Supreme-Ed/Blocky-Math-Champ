import {
  init_backgroundUboDeclaration
} from "./chunk-4NR43P2Q.js";
import {
  init_shadowsVertex
} from "./chunk-YG2CN6C3.js";
import {
  init_lightVxFragmentDeclaration
} from "./chunk-O2OCTGXW.js";
import {
  init_lightVxUboDeclaration
} from "./chunk-IWO4USYI.js";
import {
  init_instancesDeclaration
} from "./chunk-FROGOQEC.js";
import {
  init_instancesVertex
} from "./chunk-IR3BSCAE.js";
import {
  init_bakedVertexAnimation,
  init_bakedVertexAnimationDeclaration
} from "./chunk-4R57ZCSL.js";
import {
  init_bonesVertex
} from "./chunk-KWJQWNEG.js";
import {
  init_bonesDeclaration
} from "./chunk-ZMBQROJF.js";
import {
  init_logDepthVertex
} from "./chunk-EFGB4UFK.js";
import {
  init_fogVertex
} from "./chunk-B2QL676U.js";
import {
  init_fogVertexDeclaration
} from "./chunk-EUSYX5IQ.js";
import {
  init_logDepthDeclaration
} from "./chunk-X2LMR5XM.js";
import {
  init_helperFunctions
} from "./chunk-JUBEOR2P.js";
import {
  init_clipPlaneVertex
} from "./chunk-C3VSXRMA.js";
import {
  init_clipPlaneVertexDeclaration
} from "./chunk-AMN47ABW.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/Shaders/ShadersInclude/backgroundVertexDeclaration.js
var name, shader;
var init_backgroundVertexDeclaration = __esm({
  "node_modules/@babylonjs/core/Shaders/ShadersInclude/backgroundVertexDeclaration.js"() {
    init_shaderStore();
    name = "backgroundVertexDeclaration";
    shader = `uniform mat4 view;uniform mat4 viewProjection;
#ifdef MULTIVIEW
uniform mat4 viewProjectionR;
#endif
uniform float shadowLevel;
#ifdef DIFFUSE
uniform mat4 diffuseMatrix;uniform vec2 vDiffuseInfos;
#endif
#ifdef REFLECTION
uniform vec2 vReflectionInfos;uniform mat4 reflectionMatrix;uniform vec3 vReflectionMicrosurfaceInfos;uniform float fFovMultiplier;
#endif
#ifdef POINTSIZE
uniform float pointSize;
#endif
`;
    if (!ShaderStore.IncludesShadersStore[name]) {
      ShaderStore.IncludesShadersStore[name] = shader;
    }
  }
});

// node_modules/@babylonjs/core/Shaders/background.vertex.js
var name2, shader2, backgroundVertexShader;
var init_background_vertex = __esm({
  "node_modules/@babylonjs/core/Shaders/background.vertex.js"() {
    init_shaderStore();
    init_backgroundVertexDeclaration();
    init_backgroundUboDeclaration();
    init_helperFunctions();
    init_bonesDeclaration();
    init_bakedVertexAnimationDeclaration();
    init_instancesDeclaration();
    init_clipPlaneVertexDeclaration();
    init_fogVertexDeclaration();
    init_lightVxFragmentDeclaration();
    init_lightVxUboDeclaration();
    init_logDepthDeclaration();
    init_instancesVertex();
    init_bonesVertex();
    init_bakedVertexAnimation();
    init_clipPlaneVertex();
    init_fogVertex();
    init_shadowsVertex();
    init_logDepthVertex();
    name2 = "backgroundVertexShader";
    shader2 = `precision highp float;
#include<__decl__backgroundVertex>
#include<helperFunctions>
attribute vec3 position;
#ifdef NORMAL
attribute vec3 normal;
#endif
#include<bonesDeclaration>
#include<bakedVertexAnimationDeclaration>
#include<instancesDeclaration>
varying vec3 vPositionW;
#ifdef NORMAL
varying vec3 vNormalW;
#endif
#ifdef UV1
attribute vec2 uv;
#endif
#ifdef UV2
attribute vec2 uv2;
#endif
#ifdef MAINUV1
varying vec2 vMainUV1;
#endif
#ifdef MAINUV2
varying vec2 vMainUV2;
#endif
#if defined(DIFFUSE) && DIFFUSEDIRECTUV==0
varying vec2 vDiffuseUV;
#endif
#include<clipPlaneVertexDeclaration>
#include<fogVertexDeclaration>
#include<__decl__lightVxFragment>[0..maxSimultaneousLights]
#ifdef REFLECTIONMAP_SKYBOX
varying vec3 vPositionUVW;
#endif
#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)
varying vec3 vDirectionW;
#endif
#include<logDepthDeclaration>
#define CUSTOM_VERTEX_DEFINITIONS
void main(void) {
#define CUSTOM_VERTEX_MAIN_BEGIN
#ifdef REFLECTIONMAP_SKYBOX
vPositionUVW=position;
#endif
#include<instancesVertex>
#include<bonesVertex>
#include<bakedVertexAnimation>
#ifdef MULTIVIEW
if (gl_ViewID_OVR==0u) {gl_Position=viewProjection*finalWorld*vec4(position,1.0);} else {gl_Position=viewProjectionR*finalWorld*vec4(position,1.0);}
#else
gl_Position=viewProjection*finalWorld*vec4(position,1.0);
#endif
vec4 worldPos=finalWorld*vec4(position,1.0);vPositionW=vec3(worldPos);
#ifdef NORMAL
mat3 normalWorld=mat3(finalWorld);
#ifdef NONUNIFORMSCALING
normalWorld=transposeMat3(inverseMat3(normalWorld));
#endif
vNormalW=normalize(normalWorld*normal);
#endif
#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)
vDirectionW=normalize(vec3(finalWorld*vec4(position,0.0)));
#ifdef EQUIRECTANGULAR_RELFECTION_FOV
mat3 screenToWorld=inverseMat3(mat3(finalWorld*viewProjection));vec3 segment=mix(vDirectionW,screenToWorld*vec3(0.0,0.0,1.0),abs(fFovMultiplier-1.0));if (fFovMultiplier<=1.0) {vDirectionW=normalize(segment);} else {vDirectionW=normalize(vDirectionW+(vDirectionW-segment));}
#endif
#endif
#ifndef UV1
vec2 uv=vec2(0.,0.);
#endif
#ifndef UV2
vec2 uv2=vec2(0.,0.);
#endif
#ifdef MAINUV1
vMainUV1=uv;
#endif
#ifdef MAINUV2
vMainUV2=uv2;
#endif
#if defined(DIFFUSE) && DIFFUSEDIRECTUV==0
if (vDiffuseInfos.x==0.)
{vDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));}
else
{vDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));}
#endif
#include<clipPlaneVertex>
#include<fogVertex>
#include<shadowsVertex>[0..maxSimultaneousLights]
#ifdef VERTEXCOLOR
vColor=colorUpdated;
#endif
#if defined(POINTSIZE) && !defined(WEBGPU)
gl_PointSize=pointSize;
#endif
#include<logDepthVertex>
#define CUSTOM_VERTEX_MAIN_END
}
`;
    if (!ShaderStore.ShadersStore[name2]) {
      ShaderStore.ShadersStore[name2] = shader2;
    }
    backgroundVertexShader = { name: name2, shader: shader2 };
  }
});

export {
  backgroundVertexShader,
  init_background_vertex
};
//# sourceMappingURL=chunk-F7AJKX5I.js.map
