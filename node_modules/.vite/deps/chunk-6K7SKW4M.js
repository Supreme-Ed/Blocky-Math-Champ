import {
  GetFlowGraphAssetWithType,
  init_flowGraphAssetsContext
} from "./chunk-CZKADBZM.js";
import {
  getNumericValue,
  init_utils
} from "./chunk-FPMUWFNC.js";
import {
  FlowGraphBlock,
  FlowGraphInteger,
  RichTypeAny,
  init_flowGraphBlock,
  init_flowGraphInteger,
  init_flowGraphRichTypes
} from "./chunk-I4L6YYX4.js";
import {
  RegisterClass,
  init_typeStore
} from "./chunk-D6A73UHJ.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/flowGraphGetAssetBlock.js
var FlowGraphGetAssetBlock;
var init_flowGraphGetAssetBlock = __esm({
  "node_modules/@babylonjs/core/FlowGraph/Blocks/Data/flowGraphGetAssetBlock.js"() {
    init_flowGraphAssetsContext();
    init_flowGraphBlock();
    init_flowGraphRichTypes();
    init_typeStore();
    init_flowGraphInteger();
    init_utils();
    FlowGraphGetAssetBlock = class extends FlowGraphBlock {
      constructor(config) {
        super(config);
        this.config = config;
        this.type = this.registerDataInput("type", RichTypeAny, config.type);
        this.value = this.registerDataOutput("value", RichTypeAny);
        this.index = this.registerDataInput("index", RichTypeAny, new FlowGraphInteger(getNumericValue(config.index ?? -1)));
      }
      _updateOutputs(context) {
        const type = this.type.getValue(context);
        const index = this.index.getValue(context);
        const asset = GetFlowGraphAssetWithType(context.assetsContext, type, getNumericValue(index), this.config.useIndexAsUniqueId);
        this.value.setValue(asset, context);
      }
      /**
       * Gets the class name of this block
       * @returns the class name
       */
      getClassName() {
        return "FlowGraphGetAssetBlock";
      }
    };
    RegisterClass("FlowGraphGetAssetBlock", FlowGraphGetAssetBlock);
  }
});

export {
  FlowGraphGetAssetBlock,
  init_flowGraphGetAssetBlock
};
//# sourceMappingURL=chunk-6K7SKW4M.js.map
