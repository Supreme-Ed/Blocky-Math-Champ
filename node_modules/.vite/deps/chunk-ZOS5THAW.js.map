{
  "version": 3,
  "sources": ["../../../dev/core/src/Lights/Shadows/shadowGeneratorSceneComponent.ts"],
  "sourcesContent": ["import type { SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport { ShadowGenerator } from \"./shadowGenerator\";\r\nimport { CascadedShadowGenerator } from \"./cascadedShadowGenerator\";\r\nimport type { ISceneSerializableComponent } from \"../../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../../sceneComponent\";\r\nimport { AddParser } from \"core/Loading/Plugins/babylonFileParser.function\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n\r\n// Adds the parser to the scene parsers.\r\nAddParser(SceneComponentConstants.NAME_SHADOWGENERATOR, (parsedData: any, scene: Scene) => {\r\n    // Shadows\r\n    if (parsedData.shadowGenerators !== undefined && parsedData.shadowGenerators !== null) {\r\n        for (let index = 0, cache = parsedData.shadowGenerators.length; index < cache; index++) {\r\n            const parsedShadowGenerator = parsedData.shadowGenerators[index];\r\n            if (parsedShadowGenerator.className === CascadedShadowGenerator.CLASSNAME) {\r\n                CascadedShadowGenerator.Parse(parsedShadowGenerator, scene);\r\n            } else {\r\n                ShadowGenerator.Parse(parsedShadowGenerator, scene);\r\n            }\r\n            // SG would be available on their associated lights\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Defines the shadow generator component responsible to manage any shadow generators\r\n * in a given scene.\r\n */\r\nexport class ShadowGeneratorSceneComponent implements ISceneSerializableComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_SHADOWGENERATOR;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_SHADOWGENERATOR, this, this._gatherRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing To Do Here.\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        // Shadows\r\n        serializationObject.shadowGenerators = [];\r\n        const lights = this.scene.lights;\r\n        for (const light of lights) {\r\n            if (light.doNotSerialize) {\r\n                continue;\r\n            }\r\n            const shadowGenerators = light.getShadowGenerators();\r\n            if (shadowGenerators) {\r\n                const iterator = shadowGenerators.values();\r\n                for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                    const shadowGenerator = key.value;\r\n                    if (shadowGenerator.doNotSerialize) {\r\n                        continue;\r\n                    }\r\n                    serializationObject.shadowGenerators.push(shadowGenerator.serialize());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addFromContainer(container: IAssetContainer): void {\r\n        // Nothing To Do Here. (directly attached to a light)\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public removeFromContainer(container: IAssetContainer, dispose?: boolean): void {\r\n        // Nothing To Do Here. (directly attached to a light)\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public dispose(): void {\r\n        // Nothing To Do Here.\r\n    }\r\n\r\n    private _gatherRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        // Shadows\r\n        const scene = this.scene;\r\n        if (this.scene.shadowsEnabled) {\r\n            for (let lightIndex = 0; lightIndex < scene.lights.length; lightIndex++) {\r\n                const light = scene.lights[lightIndex];\r\n                const shadowGenerators = light.getShadowGenerators();\r\n\r\n                if (light.isEnabled() && light.shadowEnabled && shadowGenerators) {\r\n                    const iterator = shadowGenerators.values();\r\n                    for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                        const shadowGenerator = key.value;\r\n                        const shadowMap = <RenderTargetTexture>shadowGenerator.getShadowMap();\r\n                        if (scene.textures.indexOf(shadowMap) !== -1) {\r\n                            renderTargets.push(shadowMap);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nShadowGenerator._SceneComponentInitialization = (scene: Scene) => {\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_SHADOWGENERATOR);\r\n    if (!component) {\r\n        component = new ShadowGeneratorSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAGA,IA2Ba;AA3Bb;;;AACA;AAEA;AACA;AAIA,cAAU,wBAAwB,sBAAsB,CAAC,YAAiB,UAAgB;AAEtF,UAAI,WAAW,qBAAqB,UAAa,WAAW,qBAAqB,MAAM;AACnF,iBAAS,QAAQ,GAAG,QAAQ,WAAW,iBAAiB,QAAQ,QAAQ,OAAO,SAAS;AACpF,gBAAM,wBAAwB,WAAW,iBAAiB,KAAK;AAC/D,cAAI,sBAAsB,cAAc,wBAAwB,WAAW;AACvE,oCAAwB,MAAM,uBAAuB,KAAK;UAC9D,OAAO;AACH,4BAAgB,MAAM,uBAAuB,KAAK;UACtD;QAEJ;MACJ;IACJ,CAAC;AAMK,IAAO,gCAAP,MAAoC;;;;;MAetC,YAAY,OAAY;AAXR,aAAA,OAAO,wBAAwB;AAY3C,aAAK,QAAQ;MACjB;;;;MAKO,WAAQ;AACX,aAAK,MAAM,0BAA0B,aAAa,wBAAwB,0CAA0C,MAAM,KAAK,oBAAoB;MACvJ;;;;;MAMO,UAAO;MAEd;;;;;MAMO,UAAU,qBAAwB;AAErC,4BAAoB,mBAAmB,CAAA;AACvC,cAAM,SAAS,KAAK,MAAM;AAC1B,mBAAW,SAAS,QAAQ;AACxB,cAAI,MAAM,gBAAgB;AACtB;UACJ;AACA,gBAAM,mBAAmB,MAAM,oBAAmB;AAClD,cAAI,kBAAkB;AAClB,kBAAM,WAAW,iBAAiB,OAAM;AACxC,qBAAS,MAAM,SAAS,KAAI,GAAI,IAAI,SAAS,MAAM,MAAM,SAAS,KAAI,GAAI;AACtE,oBAAM,kBAAkB,IAAI;AAC5B,kBAAI,gBAAgB,gBAAgB;AAChC;cACJ;AACA,kCAAoB,iBAAiB,KAAK,gBAAgB,UAAS,CAAE;YACzE;UACJ;QACJ;MACJ;;;;;;MAOO,iBAAiB,WAA0B;MAElD;;;;;;;MAQO,oBAAoB,WAA4B,SAAiB;MAExE;;;;;MAMO,UAAO;MAEd;MAEQ,qBAAqB,eAAyD;AAElF,cAAM,QAAQ,KAAK;AACnB,YAAI,KAAK,MAAM,gBAAgB;AAC3B,mBAAS,aAAa,GAAG,aAAa,MAAM,OAAO,QAAQ,cAAc;AACrE,kBAAM,QAAQ,MAAM,OAAO,UAAU;AACrC,kBAAM,mBAAmB,MAAM,oBAAmB;AAElD,gBAAI,MAAM,UAAS,KAAM,MAAM,iBAAiB,kBAAkB;AAC9D,oBAAM,WAAW,iBAAiB,OAAM;AACxC,uBAAS,MAAM,SAAS,KAAI,GAAI,IAAI,SAAS,MAAM,MAAM,SAAS,KAAI,GAAI;AACtE,sBAAM,kBAAkB,IAAI;AAC5B,sBAAM,YAAiC,gBAAgB,aAAY;AACnE,oBAAI,MAAM,SAAS,QAAQ,SAAS,MAAM,IAAI;AAC1C,gCAAc,KAAK,SAAS;gBAChC;cACJ;YACJ;UACJ;QACJ;MACJ;;AAGJ,oBAAgB,gCAAgC,CAAC,UAAgB;AAC7D,UAAI,YAAY,MAAM,cAAc,wBAAwB,oBAAoB;AAChF,UAAI,CAAC,WAAW;AACZ,oBAAY,IAAI,8BAA8B,KAAK;AACnD,cAAM,cAAc,SAAS;MACjC;IACJ;;;",
  "names": []
}
