import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/Shaders/iblCombineVoxelGrids.fragment.js
var name, shader, iblCombineVoxelGridsPixelShader;
var init_iblCombineVoxelGrids_fragment = __esm({
  "node_modules/@babylonjs/core/Shaders/iblCombineVoxelGrids.fragment.js"() {
    init_shaderStore();
    name = "iblCombineVoxelGridsPixelShader";
    shader = `precision highp float;precision highp sampler3D;varying vec2 vUV;uniform sampler3D voxelXaxisSampler;uniform sampler3D voxelYaxisSampler;uniform sampler3D voxelZaxisSampler;uniform float layer;void main(void) {vec3 coordZ=vec3(vUV.x,vUV.y,layer);float voxelZ=texture(voxelZaxisSampler,coordZ).r;vec3 coordX=vec3(1.0-layer,vUV.y,vUV.x);float voxelX=texture(voxelXaxisSampler,coordX).r;vec3 coordY=vec3(layer,vUV.x,vUV.y);float voxelY=texture(voxelYaxisSampler,coordY).r;float voxel=(voxelX>0.0 || voxelY>0.0 || voxelZ>0.0) ? 1.0 : 0.0;glFragColor=vec4(vec3(voxel),1.0);}`;
    if (!ShaderStore.ShadersStore[name]) {
      ShaderStore.ShadersStore[name] = shader;
    }
    iblCombineVoxelGridsPixelShader = { name, shader };
  }
});

export {
  iblCombineVoxelGridsPixelShader,
  init_iblCombineVoxelGrids_fragment
};
//# sourceMappingURL=chunk-HTFVWJ62.js.map
