import {
  init_logDepthFragment
} from "./chunk-OJENSRJA.js";
import {
  init_fogFragment
} from "./chunk-L7XMVAYQ.js";
import {
  init_fogFragmentDeclaration
} from "./chunk-5UXNSIA4.js";
import {
  init_logDepthDeclaration
} from "./chunk-K3XAGB54.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/imageProcessingCompatibility.js
var name, shader;
var init_imageProcessingCompatibility = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/imageProcessingCompatibility.js"() {
    init_shaderStore();
    name = "imageProcessingCompatibility";
    shader = `#ifdef IMAGEPROCESSINGPOSTPROCESS
fragmentOutputs.color=vec4f(pow(fragmentOutputs.color.rgb, vec3f(2.2)),fragmentOutputs.color.a);
#endif
`;
    if (!ShaderStore.IncludesShadersStoreWGSL[name]) {
      ShaderStore.IncludesShadersStoreWGSL[name] = shader;
    }
  }
});

// node_modules/@babylonjs/core/ShadersWGSL/sprites.fragment.js
var name2, shader2, spritesPixelShaderWGSL;
var init_sprites_fragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/sprites.fragment.js"() {
    init_shaderStore();
    init_fogFragmentDeclaration();
    init_logDepthDeclaration();
    init_logDepthFragment();
    init_fogFragment();
    init_imageProcessingCompatibility();
    name2 = "spritesPixelShader";
    shader2 = `uniform alphaTest: i32;varying vColor: vec4f;varying vUV: vec2f;var diffuseSamplerSampler: sampler;var diffuseSampler: texture_2d<f32>;
#include<fogFragmentDeclaration>
#include<logDepthDeclaration>
#define CUSTOM_FRAGMENT_DEFINITIONS
#ifdef PIXEL_PERFECT
fn uvPixelPerfect(uv: vec2f)->vec2f {var res: vec2f= vec2f(textureDimensions(diffuseSampler,0));var uvTemp=uv*res;var seam: vec2f=floor(uvTemp+0.5);uvTemp=seam+clamp((uvTemp-seam)/fwidth(uvTemp),vec2f(-0.5),vec2f(0.5));return uvTemp/res;}
#endif
@fragment
fn main(input: FragmentInputs)->FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
#ifdef PIXEL_PERFECT
var uv: vec2f=uvPixelPerfect(input.vUV);
#else
var uv: vec2f=input.vUV;
#endif
var color: vec4f=textureSample(diffuseSampler,diffuseSamplerSampler,uv);var fAlphaTest: f32= f32(uniforms.alphaTest);if (fAlphaTest != 0.)
{if (color.a<0.95) {discard;}}
color*=input.vColor;
#include<logDepthFragment>
#include<fogFragment>
fragmentOutputs.color=color;
#include<imageProcessingCompatibility>
#define CUSTOM_FRAGMENT_MAIN_END
}`;
    if (!ShaderStore.ShadersStoreWGSL[name2]) {
      ShaderStore.ShadersStoreWGSL[name2] = shader2;
    }
    spritesPixelShaderWGSL = { name: name2, shader: shader2 };
  }
});

export {
  spritesPixelShaderWGSL,
  init_sprites_fragment
};
//# sourceMappingURL=chunk-FIJNMPSK.js.map
