import {
  init_packingFunctions
} from "./chunk-U34ZEI6E.js";
import {
  init_clipPlaneFragmentDeclaration
} from "./chunk-7IS4JLSR.js";
import {
  init_clipPlaneFragment
} from "./chunk-34ARFYNC.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/ShadersWGSL/depth.fragment.js
var name, shader, depthPixelShaderWGSL;
var init_depth_fragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/depth.fragment.js"() {
    init_shaderStore();
    init_clipPlaneFragmentDeclaration();
    init_packingFunctions();
    init_clipPlaneFragment();
    name = "depthPixelShader";
    shader = `#ifdef ALPHATEST
varying vUV: vec2f;var diffuseSamplerSampler: sampler;var diffuseSampler: texture_2d<f32>;
#endif
#include<clipPlaneFragmentDeclaration>
varying vDepthMetric: f32;
#ifdef PACKED
#include<packingFunctions>
#endif
#ifdef STORE_CAMERASPACE_Z
varying vViewPos: vec4f;
#endif
#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs)->FragmentOutputs {
#include<clipPlaneFragment>
#ifdef ALPHATEST
if (textureSample(diffuseSampler,diffuseSamplerSampler,input.vUV).a<0.4) {discard;}
#endif
#ifdef STORE_CAMERASPACE_Z
#ifdef PACKED
fragmentOutputs.color=pack(input.vViewPos.z);
#else
fragmentOutputs.color= vec4f(input.vViewPos.z,0.0,0.0,1.0);
#endif
#else
#ifdef NONLINEARDEPTH
#ifdef PACKED
fragmentOutputs.color=pack(input.position.z);
#else
fragmentOutputs.color= vec4f(input.position.z,0.0,0.0,0.0);
#endif
#else
#ifdef PACKED
fragmentOutputs.color=pack(input.vDepthMetric);
#else
fragmentOutputs.color= vec4f(input.vDepthMetric,0.0,0.0,1.0);
#endif
#endif
#endif
}`;
    if (!ShaderStore.ShadersStoreWGSL[name]) {
      ShaderStore.ShadersStoreWGSL[name] = shader;
    }
    depthPixelShaderWGSL = { name, shader };
  }
});

export {
  depthPixelShaderWGSL,
  init_depth_fragment
};
//# sourceMappingURL=chunk-SYDGVG4H.js.map
