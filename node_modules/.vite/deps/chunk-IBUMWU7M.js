import {
  ShaderStore,
  init_shaderStore
} from "./chunk-IU6YKOYY.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/prePassDeclaration.js
var name, shader;
var init_prePassDeclaration = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/prePassDeclaration.js"() {
    init_shaderStore();
    name = "prePassDeclaration";
    shader = `#ifdef PREPASS
#ifdef PREPASS_LOCAL_POSITION
varying vPosition : vec3f;
#endif
#ifdef PREPASS_DEPTH
varying vViewPos: vec3f;
#endif
#if defined(PREPASS_VELOCITY) || defined(PREPASS_VELOCITY_LINEAR)
varying vCurrentPosition: vec4f;varying vPreviousPosition: vec4f;
#endif
#endif
`;
    if (!ShaderStore.IncludesShadersStoreWGSL[name]) {
      ShaderStore.IncludesShadersStoreWGSL[name] = shader;
    }
  }
});

// node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/oitDeclaration.js
var name2, shader2;
var init_oitDeclaration = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/oitDeclaration.js"() {
    init_shaderStore();
    name2 = "oitDeclaration";
    shader2 = `#ifdef ORDER_INDEPENDENT_TRANSPARENCY
#define MAX_DEPTH 99999.0
var oitDepthSamplerSampler: sampler;var oitDepthSampler: texture_2d<f32>;var oitFrontColorSamplerSampler: sampler;var oitFrontColorSampler: texture_2d<f32>;
#endif
`;
    if (!ShaderStore.IncludesShadersStoreWGSL[name2]) {
      ShaderStore.IncludesShadersStoreWGSL[name2] = shader2;
    }
  }
});

// node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/decalFragment.js
var name3, shader3;
var init_decalFragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/decalFragment.js"() {
    init_shaderStore();
    name3 = "decalFragment";
    shader3 = `#ifdef DECAL
var decalTempColor=decalColor.rgb;var decalTempAlpha=decalColor.a;
#ifdef GAMMADECAL
decalTempColor=toLinearSpaceVec3(decalColor.rgb);
#endif
#ifdef DECAL_SMOOTHALPHA
decalTempAlpha=decalColor.a*decalColor.a;
#endif
surfaceAlbedo=mix(surfaceAlbedo.rgb,decalTempColor,decalTempAlpha);
#endif
`;
    if (!ShaderStore.IncludesShadersStoreWGSL[name3]) {
      ShaderStore.IncludesShadersStoreWGSL[name3] = shader3;
    }
  }
});

// node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/depthPrePass.js
var name4, shader4;
var init_depthPrePass = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/depthPrePass.js"() {
    init_shaderStore();
    name4 = "depthPrePass";
    shader4 = `#ifdef DEPTHPREPASS
fragmentOutputs.color= vec4f(0.,0.,0.,1.0);return fragmentOutputs;
#endif
`;
    if (!ShaderStore.IncludesShadersStoreWGSL[name4]) {
      ShaderStore.IncludesShadersStoreWGSL[name4] = shader4;
    }
  }
});

// node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/oitFragment.js
var name5, shader5;
var init_oitFragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/oitFragment.js"() {
    init_shaderStore();
    name5 = "oitFragment";
    shader5 = `#ifdef ORDER_INDEPENDENT_TRANSPARENCY
var fragDepth: f32=fragmentInputs.position.z; 
#ifdef ORDER_INDEPENDENT_TRANSPARENCY_16BITS
var halfFloat: u32=pack2x16float( vec2f(fragDepth));var full: vec2f=unpack2x16float(halfFloat);fragDepth=full.x;
#endif
var fragCoord: vec2i=vec2i(fragmentInputs.position.xy);var lastDepth: vec2f=textureLoad(oitDepthSampler,fragCoord,0).rg;var lastFrontColor: vec4f=textureLoad(oitFrontColorSampler,fragCoord,0);fragmentOutputs.depth=vec2f(-MAX_DEPTH);fragmentOutputs.frontColor=lastFrontColor;fragmentOutputs.backColor= vec4f(0.0);
#ifdef USE_REVERSE_DEPTHBUFFER
var furthestDepth: f32=-lastDepth.x;var nearestDepth: f32=lastDepth.y;
#else
var nearestDepth: f32=-lastDepth.x;var furthestDepth: f32=lastDepth.y;
#endif
var alphaMultiplier: f32=1.0-lastFrontColor.a;
#ifdef USE_REVERSE_DEPTHBUFFER
if (fragDepth>nearestDepth || fragDepth<furthestDepth) {
#else
if (fragDepth<nearestDepth || fragDepth>furthestDepth) {
#endif
return fragmentOutputs;}
#ifdef USE_REVERSE_DEPTHBUFFER
if (fragDepth<nearestDepth && fragDepth>furthestDepth) {
#else
if (fragDepth>nearestDepth && fragDepth<furthestDepth) {
#endif
fragmentOutputs.depth=vec2f(-fragDepth,fragDepth);return fragmentOutputs;}
#endif
`;
    if (!ShaderStore.IncludesShadersStoreWGSL[name5]) {
      ShaderStore.IncludesShadersStoreWGSL[name5] = shader5;
    }
  }
});

export {
  init_prePassDeclaration,
  init_oitDeclaration,
  init_decalFragment,
  init_depthPrePass,
  init_oitFragment
};
//# sourceMappingURL=chunk-IBUMWU7M.js.map
