import {
  FlowGraphExecutionBlockWithOutSignal,
  init_flowGraphExecutionBlockWithOutSignal
} from "./chunk-AZ5WND6M.js";
import {
  RichTypeNumber,
  init_flowGraphRichTypes
} from "./chunk-I4L6YYX4.js";
import {
  RegisterClass,
  init_typeStore
} from "./chunk-D6A73UHJ.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Execution/ControlFlow/flowGraphThrottleBlock.js
var FlowGraphThrottleBlock;
var init_flowGraphThrottleBlock = __esm({
  "node_modules/@babylonjs/core/FlowGraph/Blocks/Execution/ControlFlow/flowGraphThrottleBlock.js"() {
    init_flowGraphRichTypes();
    init_flowGraphExecutionBlockWithOutSignal();
    init_typeStore();
    FlowGraphThrottleBlock = class extends FlowGraphExecutionBlockWithOutSignal {
      constructor(config) {
        super(config);
        this.reset = this._registerSignalInput("reset");
        this.duration = this.registerDataInput("duration", RichTypeNumber);
        this.lastRemainingTime = this.registerDataOutput("lastRemainingTime", RichTypeNumber, NaN);
      }
      _execute(context, callingSignal) {
        if (callingSignal === this.reset) {
          this.lastRemainingTime.setValue(NaN, context);
          context._setExecutionVariable(this, "lastRemainingTime", NaN);
          context._setExecutionVariable(this, "timestamp", 0);
          return;
        }
        const durationValue = this.duration.getValue(context);
        if (durationValue <= 0 || isNaN(durationValue) || !isFinite(durationValue)) {
          return this._reportError(context, "Invalid duration in Throttle block");
        }
        const lastRemainingTime = context._getExecutionVariable(this, "lastRemainingTime", NaN);
        const currentTime = Date.now();
        if (isNaN(lastRemainingTime)) {
          this.lastRemainingTime.setValue(0, context);
          context._setExecutionVariable(this, "lastRemainingTime", 0);
          context._setExecutionVariable(this, "timestamp", currentTime);
          return this.out._activateSignal(context);
        } else {
          const elapsedTime = currentTime - context._getExecutionVariable(this, "timestamp", 0);
          const durationInMs = durationValue * 1e3;
          if (durationInMs <= elapsedTime) {
            this.lastRemainingTime.setValue(0, context);
            context._setExecutionVariable(this, "lastRemainingTime", 0);
            context._setExecutionVariable(this, "timestamp", currentTime);
            return this.out._activateSignal(context);
          } else {
            const remainingTime = durationInMs - elapsedTime;
            this.lastRemainingTime.setValue(remainingTime / 1e3, context);
            context._setExecutionVariable(this, "lastRemainingTime", remainingTime);
          }
        }
      }
      /**
       * @returns class name of the block.
       */
      getClassName() {
        return "FlowGraphThrottleBlock";
      }
    };
    RegisterClass("FlowGraphThrottleBlock", FlowGraphThrottleBlock);
  }
});

export {
  FlowGraphThrottleBlock,
  init_flowGraphThrottleBlock
};
//# sourceMappingURL=chunk-ZQVF2KTU.js.map
