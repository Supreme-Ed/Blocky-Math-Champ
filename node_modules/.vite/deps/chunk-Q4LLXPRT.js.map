{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/Utils/flowGraphCodeExecutionBlock.ts"],
  "sourcesContent": ["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\n\nexport type CodeExecutionFunction = (value: any, context: FlowGraphContext) => any;\n\n/**\n * This block takes in a function that is defined OUTSIDE of the flow graph and executes it.\n * The function can be a normal function or an async function.\n * The function's arguments will be the value of the input connection as the first variable, and the flow graph context as the second variable.\n */\nexport class FlowGraphCodeExecutionBlock extends FlowGraphBlock {\n    /**\n     * Input connection: The function to execute.\n     */\n    public readonly executionFunction: FlowGraphDataConnection<CodeExecutionFunction>;\n\n    /**\n     * Input connection: The value to pass to the function.\n     */\n    public readonly value: FlowGraphDataConnection<any>;\n\n    /**\n     * Output connection: The result of the function.\n     */\n    public readonly result: FlowGraphDataConnection<any>;\n\n    /**\n     * Construct a FlowGraphCodeExecutionBlock.\n     * @param config construction parameters\n     */\n    constructor(public override config: IFlowGraphBlockConfiguration) {\n        super(config);\n\n        this.executionFunction = this.registerDataInput(\"function\", RichTypeAny);\n        this.value = this.registerDataInput(\"value\", RichTypeAny);\n        this.result = this.registerDataOutput(\"result\", RichTypeAny);\n    }\n\n    /**\n     * @internal\n     */\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const func = this.executionFunction.getValue(context);\n        const value = this.value.getValue(context);\n        if (func) {\n            this.result.setValue(func(value, context), context);\n        }\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CodeExecution;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AACA,IAaa;AAbb;;;AAEA;AAWM,IAAO,8BAAP,cAA2C,eAAc;;;;;MAoB3D,YAA4B,QAAoC;AAC5D,cAAM,MAAM;AADY,aAAA,SAAA;AAGxB,aAAK,oBAAoB,KAAK,kBAAkB,YAAY,WAAW;AACvE,aAAK,QAAQ,KAAK,kBAAkB,SAAS,WAAW;AACxD,aAAK,SAAS,KAAK,mBAAmB,UAAU,WAAW;MAC/D;;;;MAKgB,eAAe,SAAyB;AACpD,cAAM,OAAO,KAAK,kBAAkB,SAAS,OAAO;AACpD,cAAM,QAAQ,KAAK,MAAM,SAAS,OAAO;AACzC,YAAI,MAAM;AACN,eAAK,OAAO,SAAS,KAAK,OAAO,OAAO,GAAG,OAAO;QACtD;MACJ;MAEgB,eAAY;AACxB,eAAA;MACJ;;;;",
  "names": []
}
