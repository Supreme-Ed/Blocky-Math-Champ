import {
  FlowGraphExecutionBlockWithOutSignal,
  init_flowGraphExecutionBlockWithOutSignal
} from "./chunk-AZ5WND6M.js";
import {
  RichTypeBoolean,
  init_flowGraphRichTypes
} from "./chunk-I4L6YYX4.js";
import {
  Logger,
  init_logger
} from "./chunk-CLHHKTPI.js";
import {
  RegisterClass,
  init_typeStore
} from "./chunk-D6A73UHJ.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Execution/ControlFlow/flowGraphWhileLoopBlock.js
var FlowGraphWhileLoopBlock;
var init_flowGraphWhileLoopBlock = __esm({
  "node_modules/@babylonjs/core/FlowGraph/Blocks/Execution/ControlFlow/flowGraphWhileLoopBlock.js"() {
    init_flowGraphRichTypes();
    init_typeStore();
    init_flowGraphExecutionBlockWithOutSignal();
    init_logger();
    FlowGraphWhileLoopBlock = class _FlowGraphWhileLoopBlock extends FlowGraphExecutionBlockWithOutSignal {
      constructor(config) {
        super(config);
        this.config = config;
        this.condition = this.registerDataInput("condition", RichTypeBoolean);
        this.executionFlow = this._registerSignalOutput("executionFlow");
        this.completed = this._registerSignalOutput("completed");
        this._unregisterSignalOutput("out");
      }
      _execute(context, _callingSignal) {
        var _a;
        let conditionValue = this.condition.getValue(context);
        if (((_a = this.config) == null ? void 0 : _a.doWhile) && !conditionValue) {
          this.executionFlow._activateSignal(context);
        }
        let i = 0;
        while (conditionValue) {
          this.executionFlow._activateSignal(context);
          ++i;
          if (i >= _FlowGraphWhileLoopBlock.MaxLoopCount) {
            Logger.Warn("FlowGraphWhileLoopBlock: Max loop count reached. Breaking.");
            break;
          }
          conditionValue = this.condition.getValue(context);
        }
        this.completed._activateSignal(context);
      }
      getClassName() {
        return "FlowGraphWhileLoopBlock";
      }
    };
    FlowGraphWhileLoopBlock.MaxLoopCount = 1e3;
    RegisterClass("FlowGraphWhileLoopBlock", FlowGraphWhileLoopBlock);
  }
});

export {
  FlowGraphWhileLoopBlock,
  init_flowGraphWhileLoopBlock
};
//# sourceMappingURL=chunk-66BN7HVO.js.map
