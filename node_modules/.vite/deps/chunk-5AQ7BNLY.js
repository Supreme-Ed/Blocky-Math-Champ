import {
  FlowGraphBlock,
  RichTypeAny,
  RichTypeVector3,
  init_flowGraphBlock,
  init_flowGraphRichTypes
} from "./chunk-I4L6YYX4.js";
import {
  TmpVectors,
  Vector3,
  init_math_vector
} from "./chunk-3KKXJTKL.js";
import {
  RegisterClass,
  init_typeStore
} from "./chunk-D6A73UHJ.js";
import {
  __esm
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/flowGraphTransformCoordinatesSystemBlock.js
var FlowGraphTransformCoordinatesSystemBlock;
var init_flowGraphTransformCoordinatesSystemBlock = __esm({
  "node_modules/@babylonjs/core/FlowGraph/Blocks/Data/flowGraphTransformCoordinatesSystemBlock.js"() {
    init_flowGraphBlock();
    init_flowGraphRichTypes();
    init_math_vector();
    init_typeStore();
    FlowGraphTransformCoordinatesSystemBlock = class extends FlowGraphBlock {
      /**
       * Creates a new FlowGraphCoordinateTransformBlock
       * @param config optional configuration for this block
       */
      constructor(config) {
        super(config);
        this.sourceSystem = this.registerDataInput("sourceSystem", RichTypeAny);
        this.destinationSystem = this.registerDataInput("destinationSystem", RichTypeAny);
        this.inputCoordinates = this.registerDataInput("inputCoordinates", RichTypeVector3);
        this.outputCoordinates = this.registerDataOutput("outputCoordinates", RichTypeVector3);
      }
      _updateOutputs(_context) {
        const sourceSystemValue = this.sourceSystem.getValue(_context);
        const destinationSystemValue = this.destinationSystem.getValue(_context);
        const inputCoordinatesValue = this.inputCoordinates.getValue(_context);
        const sourceWorld = sourceSystemValue.getWorldMatrix();
        const destinationWorld = destinationSystemValue.getWorldMatrix();
        const destinationWorldInverse = TmpVectors.Matrix[0].copyFrom(destinationWorld);
        destinationWorldInverse.invert();
        const sourceToDestination = TmpVectors.Matrix[1];
        destinationWorldInverse.multiplyToRef(sourceWorld, sourceToDestination);
        const outputCoordinatesValue = this.outputCoordinates.getValue(_context);
        Vector3.TransformCoordinatesToRef(inputCoordinatesValue, sourceToDestination, outputCoordinatesValue);
      }
      /**
       * Gets the class name of this block
       * @returns the class name
       */
      getClassName() {
        return "FlowGraphTransformCoordinatesSystemBlock";
      }
    };
    RegisterClass("FlowGraphTransformCoordinatesSystemBlock", FlowGraphTransformCoordinatesSystemBlock);
  }
});

export {
  FlowGraphTransformCoordinatesSystemBlock,
  init_flowGraphTransformCoordinatesSystemBlock
};
//# sourceMappingURL=chunk-5AQ7BNLY.js.map
