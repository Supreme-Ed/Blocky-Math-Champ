{
  "version": 3,
  "sources": ["../../../dev/core/src/Collisions/pickingInfo.ts"],
  "sourcesContent": ["import type { Nullable, FloatArray } from \"../types\";\r\nimport { Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\n\r\nimport type { Ray } from \"../Culling/ray\";\r\n\r\n/**\r\n * Information about the result of picking within a scene\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/picking_collisions\r\n */\r\nexport class PickingInfo {\r\n    /**\r\n     * If the pick collided with an object\r\n     */\r\n    public hit = false;\r\n    /**\r\n     * Distance away where the pick collided\r\n     */\r\n    public distance = 0;\r\n    /**\r\n     * The location of pick collision\r\n     */\r\n    public pickedPoint: Nullable<Vector3> = null;\r\n    /**\r\n     * The mesh corresponding the pick collision\r\n     */\r\n    public pickedMesh: Nullable<AbstractMesh> = null;\r\n    /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bu = 0;\r\n    /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bv = 0;\r\n    /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public faceId = -1;\r\n    /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public subMeshFaceId = -1;\r\n    /** Id of the submesh that was picked */\r\n    public subMeshId = 0;\r\n    /** If a sprite was picked, this will be the sprite the pick collided with */\r\n    public pickedSprite: Nullable<Sprite> = null;\r\n    /** If we are picking a mesh with thin instance, this will give you the picked thin instance */\r\n    public thinInstanceIndex = -1;\r\n    /**\r\n     * The ray that was used to perform the picking.\r\n     */\r\n    public ray: Nullable<Ray> = null;\r\n    /**\r\n     * If a mesh was used to do the picking (eg. 6dof controller) as a \"near interaction\", this will be populated.\r\n     */\r\n    public originMesh: Nullable<AbstractMesh> = null;\r\n    /**\r\n     * The aim-space transform of the input used for picking, if it is an XR input source.\r\n     */\r\n    public aimTransform: Nullable<TransformNode> = null;\r\n    /**\r\n     * The grip-space transform of the input used for picking, if it is an XR input source.\r\n     * Some XR sources, such as input coming from head mounted displays, do not have this.\r\n     */\r\n    public gripTransform: Nullable<TransformNode> = null;\r\n\r\n    /**\r\n     * Gets the normal corresponding to the face the pick collided with\r\n     * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\r\n     * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map (default: true)\r\n     * @returns The normal corresponding to the face the pick collided with\r\n     * @remarks Note that the returned normal will always point towards the picking ray.\r\n     */\r\n    public getNormal(useWorldCoordinates = false, useVerticesNormals = true): Nullable<Vector3> {\r\n        if (!this.pickedMesh || (useVerticesNormals && !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind))) {\r\n            return null;\r\n        }\r\n\r\n        let indices = this.pickedMesh.getIndices();\r\n\r\n        if (indices?.length === 0) {\r\n            indices = null;\r\n        }\r\n\r\n        let result: Vector3;\r\n\r\n        const tmp0 = TmpVectors.Vector3[0];\r\n        const tmp1 = TmpVectors.Vector3[1];\r\n        const tmp2 = TmpVectors.Vector3[2];\r\n\r\n        if (useVerticesNormals) {\r\n            const normals = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            let normal0 = indices\r\n                ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3] * 3, tmp0)\r\n                : tmp0.copyFromFloats(normals[this.faceId * 3 * 3], normals[this.faceId * 3 * 3 + 1], normals[this.faceId * 3 * 3 + 2]);\r\n            let normal1 = indices\r\n                ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 1] * 3, tmp1)\r\n                : tmp1.copyFromFloats(normals[(this.faceId * 3 + 1) * 3], normals[(this.faceId * 3 + 1) * 3 + 1], normals[(this.faceId * 3 + 1) * 3 + 2]);\r\n            let normal2 = indices\r\n                ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 2] * 3, tmp2)\r\n                : tmp2.copyFromFloats(normals[(this.faceId * 3 + 2) * 3], normals[(this.faceId * 3 + 2) * 3 + 1], normals[(this.faceId * 3 + 2) * 3 + 2]);\r\n\r\n            normal0 = normal0.scale(this.bu);\r\n            normal1 = normal1.scale(this.bv);\r\n            normal2 = normal2.scale(1.0 - this.bu - this.bv);\r\n\r\n            result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\r\n        } else {\r\n            const positions = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n            const vertex1 = indices\r\n                ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3] * 3, tmp0)\r\n                : tmp0.copyFromFloats(positions[this.faceId * 3 * 3], positions[this.faceId * 3 * 3 + 1], positions[this.faceId * 3 * 3 + 2]);\r\n            const vertex2 = indices\r\n                ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 1] * 3, tmp1)\r\n                : tmp1.copyFromFloats(positions[(this.faceId * 3 + 1) * 3], positions[(this.faceId * 3 + 1) * 3 + 1], positions[(this.faceId * 3 + 1) * 3 + 2]);\r\n            const vertex3 = indices\r\n                ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 2] * 3, tmp2)\r\n                : tmp2.copyFromFloats(positions[(this.faceId * 3 + 2) * 3], positions[(this.faceId * 3 + 2) * 3 + 1], positions[(this.faceId * 3 + 2) * 3 + 2]);\r\n\r\n            const p1p2 = vertex1.subtract(vertex2);\r\n            const p3p2 = vertex3.subtract(vertex2);\r\n\r\n            result = Vector3.Cross(p1p2, p3p2);\r\n        }\r\n\r\n        const transformNormalToWorld = (pickedMesh: AbstractMesh, n: Vector3) => {\r\n            if (this.thinInstanceIndex !== -1) {\r\n                const tm = (pickedMesh as Mesh).thinInstanceGetWorldMatrices()[this.thinInstanceIndex];\r\n\r\n                if (tm) {\r\n                    Vector3.TransformNormalToRef(n, tm, n);\r\n                }\r\n            }\r\n\r\n            let wm = pickedMesh.getWorldMatrix();\r\n\r\n            if (pickedMesh.nonUniformScaling) {\r\n                TmpVectors.Matrix[0].copyFrom(wm);\r\n                wm = TmpVectors.Matrix[0];\r\n                wm.setTranslationFromFloats(0, 0, 0);\r\n                wm.invert();\r\n                wm.transposeToRef(TmpVectors.Matrix[1]);\r\n\r\n                wm = TmpVectors.Matrix[1];\r\n            }\r\n\r\n            Vector3.TransformNormalToRef(n, wm, n);\r\n        };\r\n\r\n        if (useWorldCoordinates) {\r\n            transformNormalToWorld(this.pickedMesh, result);\r\n        }\r\n\r\n        if (this.ray) {\r\n            const normalForDirectionChecking = TmpVectors.Vector3[0].copyFrom(result);\r\n\r\n            if (!useWorldCoordinates) {\r\n                // the normal has not been transformed to world space as part as the normal processing, so we must do it now\r\n                transformNormalToWorld(this.pickedMesh, normalForDirectionChecking);\r\n            }\r\n\r\n            // Flip the normal if the picking ray is in the same direction.\r\n            if (Vector3.Dot(normalForDirectionChecking, this.ray.direction) > 0) {\r\n                result.negateInPlace();\r\n            }\r\n        }\r\n\r\n        result.normalize();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture coordinates of where the pick occurred\r\n     * @param uvSet The UV set to use to calculate the texture coordinates (default: VertexBuffer.UVKind)\r\n     * @returns The vector containing the coordinates of the texture\r\n     */\r\n    public getTextureCoordinates(uvSet = VertexBuffer.UVKind): Nullable<Vector2> {\r\n        if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(uvSet)) {\r\n            return null;\r\n        }\r\n\r\n        const indices = this.pickedMesh.getIndices();\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n\r\n        const uvs = this.pickedMesh.getVerticesData(uvSet);\r\n        if (!uvs) {\r\n            return null;\r\n        }\r\n\r\n        let uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\r\n        let uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\r\n        let uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\r\n\r\n        uv0 = uv0.scale(this.bu);\r\n        uv1 = uv1.scale(this.bv);\r\n        uv2 = uv2.scale(1.0 - this.bu - this.bv);\r\n\r\n        return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;AACA,IAaa;AAbb;;;AAGA;AAUM,IAAO,cAAP,MAAkB;MAAxB,cAAA;AAIW,aAAA,MAAM;AAIN,aAAA,WAAW;AAIX,aAAA,cAAiC;AAIjC,aAAA,aAAqC;AAErC,aAAA,KAAK;AAEL,aAAA,KAAK;AAEL,aAAA,SAAS;AAET,aAAA,gBAAgB;AAEhB,aAAA,YAAY;AAEZ,aAAA,eAAiC;AAEjC,aAAA,oBAAoB;AAIpB,aAAA,MAAqB;AAIrB,aAAA,aAAqC;AAIrC,aAAA,eAAwC;AAKxC,aAAA,gBAAyC;MA4IpD;;;;;;;;MAnIW,UAAU,sBAAsB,OAAO,qBAAqB,MAAI;AACnE,YAAI,CAAC,KAAK,cAAe,sBAAsB,CAAC,KAAK,WAAW,sBAAsB,aAAa,UAAU,GAAI;AAC7G,iBAAO;QACX;AAEA,YAAI,UAAU,KAAK,WAAW,WAAU;AAExC,aAAI,mCAAS,YAAW,GAAG;AACvB,oBAAU;QACd;AAEA,YAAI;AAEJ,cAAM,OAAO,WAAW,QAAQ,CAAC;AACjC,cAAM,OAAO,WAAW,QAAQ,CAAC;AACjC,cAAM,OAAO,WAAW,QAAQ,CAAC;AAEjC,YAAI,oBAAoB;AACpB,gBAAM,UAAsB,KAAK,WAAW,gBAAgB,aAAa,UAAU;AAEnF,cAAI,UAAU,UACR,QAAQ,eAAe,SAAS,QAAQ,KAAK,SAAS,CAAC,IAAI,GAAG,IAAI,IAClE,KAAK,eAAe,QAAQ,KAAK,SAAS,IAAI,CAAC,GAAG,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,GAAG,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,CAAC;AAC1H,cAAI,UAAU,UACR,QAAQ,eAAe,SAAS,QAAQ,KAAK,SAAS,IAAI,CAAC,IAAI,GAAG,IAAI,IACtE,KAAK,eAAe,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,GAAG,SAAS,KAAK,SAAS,IAAI,KAAK,IAAI,CAAC,GAAG,SAAS,KAAK,SAAS,IAAI,KAAK,IAAI,CAAC,CAAC;AAC5I,cAAI,UAAU,UACR,QAAQ,eAAe,SAAS,QAAQ,KAAK,SAAS,IAAI,CAAC,IAAI,GAAG,IAAI,IACtE,KAAK,eAAe,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,GAAG,SAAS,KAAK,SAAS,IAAI,KAAK,IAAI,CAAC,GAAG,SAAS,KAAK,SAAS,IAAI,KAAK,IAAI,CAAC,CAAC;AAE5I,oBAAU,QAAQ,MAAM,KAAK,EAAE;AAC/B,oBAAU,QAAQ,MAAM,KAAK,EAAE;AAC/B,oBAAU,QAAQ,MAAM,IAAM,KAAK,KAAK,KAAK,EAAE;AAE/C,mBAAS,IAAI,QAAQ,QAAQ,IAAI,QAAQ,IAAI,QAAQ,GAAG,QAAQ,IAAI,QAAQ,IAAI,QAAQ,GAAG,QAAQ,IAAI,QAAQ,IAAI,QAAQ,CAAC;QAChI,OAAO;AACH,gBAAM,YAAwB,KAAK,WAAW,gBAAgB,aAAa,YAAY;AAEvF,gBAAM,UAAU,UACV,QAAQ,eAAe,WAAW,QAAQ,KAAK,SAAS,CAAC,IAAI,GAAG,IAAI,IACpE,KAAK,eAAe,UAAU,KAAK,SAAS,IAAI,CAAC,GAAG,UAAU,KAAK,SAAS,IAAI,IAAI,CAAC,GAAG,UAAU,KAAK,SAAS,IAAI,IAAI,CAAC,CAAC;AAChI,gBAAM,UAAU,UACV,QAAQ,eAAe,WAAW,QAAQ,KAAK,SAAS,IAAI,CAAC,IAAI,GAAG,IAAI,IACxE,KAAK,eAAe,WAAW,KAAK,SAAS,IAAI,KAAK,CAAC,GAAG,WAAW,KAAK,SAAS,IAAI,KAAK,IAAI,CAAC,GAAG,WAAW,KAAK,SAAS,IAAI,KAAK,IAAI,CAAC,CAAC;AAClJ,gBAAM,UAAU,UACV,QAAQ,eAAe,WAAW,QAAQ,KAAK,SAAS,IAAI,CAAC,IAAI,GAAG,IAAI,IACxE,KAAK,eAAe,WAAW,KAAK,SAAS,IAAI,KAAK,CAAC,GAAG,WAAW,KAAK,SAAS,IAAI,KAAK,IAAI,CAAC,GAAG,WAAW,KAAK,SAAS,IAAI,KAAK,IAAI,CAAC,CAAC;AAElJ,gBAAM,OAAO,QAAQ,SAAS,OAAO;AACrC,gBAAM,OAAO,QAAQ,SAAS,OAAO;AAErC,mBAAS,QAAQ,MAAM,MAAM,IAAI;QACrC;AAEA,cAAM,yBAAyB,CAAC,YAA0B,MAAc;AACpE,cAAI,KAAK,sBAAsB,IAAI;AAC/B,kBAAM,KAAM,WAAoB,6BAA4B,EAAG,KAAK,iBAAiB;AAErF,gBAAI,IAAI;AACJ,sBAAQ,qBAAqB,GAAG,IAAI,CAAC;YACzC;UACJ;AAEA,cAAI,KAAK,WAAW,eAAc;AAElC,cAAI,WAAW,mBAAmB;AAC9B,uBAAW,OAAO,CAAC,EAAE,SAAS,EAAE;AAChC,iBAAK,WAAW,OAAO,CAAC;AACxB,eAAG,yBAAyB,GAAG,GAAG,CAAC;AACnC,eAAG,OAAM;AACT,eAAG,eAAe,WAAW,OAAO,CAAC,CAAC;AAEtC,iBAAK,WAAW,OAAO,CAAC;UAC5B;AAEA,kBAAQ,qBAAqB,GAAG,IAAI,CAAC;QACzC;AAEA,YAAI,qBAAqB;AACrB,iCAAuB,KAAK,YAAY,MAAM;QAClD;AAEA,YAAI,KAAK,KAAK;AACV,gBAAM,6BAA6B,WAAW,QAAQ,CAAC,EAAE,SAAS,MAAM;AAExE,cAAI,CAAC,qBAAqB;AAEtB,mCAAuB,KAAK,YAAY,0BAA0B;UACtE;AAGA,cAAI,QAAQ,IAAI,4BAA4B,KAAK,IAAI,SAAS,IAAI,GAAG;AACjE,mBAAO,cAAa;UACxB;QACJ;AAEA,eAAO,UAAS;AAEhB,eAAO;MACX;;;;;;MAOO,sBAAsB,QAAQ,aAAa,QAAM;AACpD,YAAI,CAAC,KAAK,cAAc,CAAC,KAAK,WAAW,sBAAsB,KAAK,GAAG;AACnE,iBAAO;QACX;AAEA,cAAM,UAAU,KAAK,WAAW,WAAU;AAC1C,YAAI,CAAC,SAAS;AACV,iBAAO;QACX;AAEA,cAAM,MAAM,KAAK,WAAW,gBAAgB,KAAK;AACjD,YAAI,CAAC,KAAK;AACN,iBAAO;QACX;AAEA,YAAI,MAAM,QAAQ,UAAU,KAAK,QAAQ,KAAK,SAAS,CAAC,IAAI,CAAC;AAC7D,YAAI,MAAM,QAAQ,UAAU,KAAK,QAAQ,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC;AACjE,YAAI,MAAM,QAAQ,UAAU,KAAK,QAAQ,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC;AAEjE,cAAM,IAAI,MAAM,KAAK,EAAE;AACvB,cAAM,IAAI,MAAM,KAAK,EAAE;AACvB,cAAM,IAAI,MAAM,IAAM,KAAK,KAAK,KAAK,EAAE;AAEvC,eAAO,IAAI,QAAQ,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;MACnE;;;;",
  "names": []
}
