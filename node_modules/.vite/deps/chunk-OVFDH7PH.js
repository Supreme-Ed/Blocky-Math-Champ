import {
  PostProcessManager,
  RenderingManager
} from "./chunk-HXUUY6DG.js";
import {
  Texture
} from "./chunk-BRRZMV6Z.js";
import {
  Matrix,
  Vector3
} from "./chunk-5OHQ76KS.js";
import {
  Effect,
  FloorPOT,
  NearestPOT
} from "./chunk-C7TQWAJK.js";
import {
  Observable
} from "./chunk-GWFZRJMO.js";
import {
  Logger
} from "./chunk-OJJXGLTO.js";
import {
  _ObserveArray
} from "./chunk-AQLPQ2Z4.js";

// node_modules/@babylonjs/core/Rendering/objectRenderer.js
var ObjectRenderer = class _ObjectRenderer {
  /**
   * Use this list to define the list of mesh you want to render.
   */
  get renderList() {
    return this._renderList;
  }
  set renderList(value) {
    if (this._renderList === value) {
      return;
    }
    if (this._unObserveRenderList) {
      this._unObserveRenderList();
      this._unObserveRenderList = null;
    }
    if (value) {
      this._unObserveRenderList = _ObserveArray(value, this._renderListHasChanged);
    }
    this._renderList = value;
  }
  /**
   * If true, the object renderer will render all objects without any image processing applied.
   * If false (default value), the renderer will use the current setting of the scene's image processing configuration.
   */
  get disableImageProcessing() {
    return this._disableImageProcessing;
  }
  set disableImageProcessing(value) {
    if (value === this._disableImageProcessing) {
      return;
    }
    this._disableImageProcessing = value;
    this._scene.markAllMaterialsAsDirty(64);
  }
  /**
   * Friendly name of the object renderer
   */
  get name() {
    return this._name;
  }
  set name(value) {
    if (this._name === value) {
      return;
    }
    this._name = value;
    if (!this._scene) {
      return;
    }
    const engine = this._scene.getEngine();
    for (let i = 0; i < this._renderPassIds.length; ++i) {
      const renderPassId = this._renderPassIds[i];
      engine._renderPassNames[renderPassId] = `${this._name}#${i}`;
    }
  }
  /**
   * Gets the render pass ids used by the object renderer.
   */
  get renderPassIds() {
    return this._renderPassIds;
  }
  /**
   * Gets the current value of the refreshId counter
   */
  get currentRefreshId() {
    return this._currentRefreshId;
  }
  /**
   * Sets a specific material to be used to render a mesh/a list of meshes with this object renderer
   * @param mesh mesh or array of meshes
   * @param material material or array of materials to use for this render pass. If undefined is passed, no specific material will be used but the regular material instead (mesh.material). It's possible to provide an array of materials to use a different material for each rendering pass.
   */
  setMaterialForRendering(mesh, material) {
    let meshes;
    if (!Array.isArray(mesh)) {
      meshes = [mesh];
    } else {
      meshes = mesh;
    }
    for (let j = 0; j < meshes.length; ++j) {
      for (let i = 0; i < this.options.numPasses; ++i) {
        let mesh2 = meshes[j];
        if (meshes[j].isAnInstance) {
          mesh2 = meshes[j].sourceMesh;
        }
        mesh2.setMaterialForRenderPass(this._renderPassIds[i], material !== void 0 ? Array.isArray(material) ? material[i] : material : void 0);
      }
    }
  }
  /**
   * Instantiates an object renderer.
   * @param name The friendly name of the object renderer
   * @param scene The scene the renderer belongs to
   * @param options The options used to create the renderer (optional)
   */
  constructor(name, scene, options) {
    this._unObserveRenderList = null;
    this._renderListHasChanged = (_functionName, previousLength) => {
      const newLength = this._renderList ? this._renderList.length : 0;
      if (previousLength === 0 && newLength > 0 || newLength === 0) {
        this._scene.meshes.forEach((mesh) => {
          mesh._markSubMeshesAsLightDirty();
        });
      }
    };
    this.particleSystemList = null;
    this.getCustomRenderList = null;
    this.renderParticles = true;
    this.renderSprites = false;
    this.forceLayerMaskCheck = false;
    this._disableImageProcessing = false;
    this.onBeforeRenderObservable = new Observable();
    this.onAfterRenderObservable = new Observable();
    this.onBeforeRenderingManagerRenderObservable = new Observable();
    this.onAfterRenderingManagerRenderObservable = new Observable();
    this.onFastPathRenderObservable = new Observable();
    this._currentRefreshId = -1;
    this._refreshRate = 1;
    this._currentApplyByPostProcessSetting = false;
    this._currentSceneCamera = null;
    this.name = name;
    this._scene = scene;
    this.renderList = [];
    this._renderPassIds = [];
    this.options = {
      numPasses: 1,
      doNotChangeAspectRatio: true,
      ...options
    };
    this._createRenderPassId();
    this.renderPassId = this._renderPassIds[0];
    this._renderingManager = new RenderingManager(scene);
    this._renderingManager._useSceneAutoClearSetup = true;
  }
  _releaseRenderPassId() {
    const engine = this._scene.getEngine();
    for (let i = 0; i < this.options.numPasses; ++i) {
      engine.releaseRenderPassId(this._renderPassIds[i]);
    }
    this._renderPassIds.length = 0;
  }
  _createRenderPassId() {
    this._releaseRenderPassId();
    const engine = this._scene.getEngine();
    for (let i = 0; i < this.options.numPasses; ++i) {
      this._renderPassIds[i] = engine.createRenderPassId(`${this.name}#${i}`);
    }
  }
  /**
   * Resets the refresh counter of the renderer and start back from scratch.
   * Could be useful to re-render if it is setup to render only once.
   */
  resetRefreshCounter() {
    this._currentRefreshId = -1;
  }
  /**
   * Defines the refresh rate of the rendering or the rendering frequency.
   * Use 0 to render just once, 1 to render on every frame, 2 to render every two frames and so on...
   */
  get refreshRate() {
    return this._refreshRate;
  }
  set refreshRate(value) {
    this._refreshRate = value;
    this.resetRefreshCounter();
  }
  /**
   * Indicates if the renderer should render the current frame.
   * The output is based on the specified refresh rate.
   * @returns true if the renderer should render the current frame
   */
  shouldRender() {
    if (this._currentRefreshId === -1) {
      this._currentRefreshId = 1;
      return true;
    }
    if (this.refreshRate === this._currentRefreshId) {
      this._currentRefreshId = 1;
      return true;
    }
    this._currentRefreshId++;
    return false;
  }
  /**
   * This function will check if the renderer is ready to render (textures are loaded, shaders are compiled)
   * @param viewportWidth defines the width of the viewport
   * @param viewportHeight defines the height of the viewport
   * @returns true if all required resources are ready
   */
  isReadyForRendering(viewportWidth, viewportHeight) {
    this.prepareRenderList();
    this.initRender(viewportWidth, viewportHeight);
    const isReady = this._checkReadiness();
    this.finishRender();
    return isReady;
  }
  /**
   * Makes sure the list of meshes is ready to be rendered
   * You should call this function before "initRender", but if you know the render list is ok, you may call "initRender" directly
   */
  prepareRenderList() {
    const scene = this._scene;
    if (this._waitingRenderList) {
      if (!this.renderListPredicate) {
        this.renderList = [];
        for (let index = 0; index < this._waitingRenderList.length; index++) {
          const id = this._waitingRenderList[index];
          const mesh = scene.getMeshById(id);
          if (mesh) {
            this.renderList.push(mesh);
          }
        }
      }
      this._waitingRenderList = void 0;
    }
    if (this.renderListPredicate) {
      if (this.renderList) {
        this.renderList.length = 0;
      } else {
        this.renderList = [];
      }
      const sceneMeshes = this._scene.meshes;
      for (let index = 0; index < sceneMeshes.length; index++) {
        const mesh = sceneMeshes[index];
        if (this.renderListPredicate(mesh)) {
          this.renderList.push(mesh);
        }
      }
    }
    this._currentApplyByPostProcessSetting = this._scene.imageProcessingConfiguration.applyByPostProcess;
    if (this._disableImageProcessing) {
      this._scene.imageProcessingConfiguration._applyByPostProcess = this._disableImageProcessing;
    }
  }
  /**
   * This method makes sure everything is setup before "render" can be called
   * @param viewportWidth Width of the viewport to render to
   * @param viewportHeight Height of the viewport to render to
   */
  initRender(viewportWidth, viewportHeight) {
    const engine = this._scene.getEngine();
    const camera = this.activeCamera ?? this._scene.activeCamera;
    this._currentSceneCamera = this._scene.activeCamera;
    if (camera) {
      if (camera !== this._scene.activeCamera) {
        this._scene.setTransformMatrix(camera.getViewMatrix(), camera.getProjectionMatrix(true));
        this._scene.activeCamera = camera;
      }
      engine.setViewport(camera.rigParent ? camera.rigParent.viewport : camera.viewport, viewportWidth, viewportHeight);
    }
    this._defaultRenderListPrepared = false;
  }
  /**
   * This method must be called after the "render" call(s), to complete the rendering process.
   */
  finishRender() {
    const scene = this._scene;
    if (this._disableImageProcessing) {
      scene.imageProcessingConfiguration._applyByPostProcess = this._currentApplyByPostProcessSetting;
    }
    scene.activeCamera = this._currentSceneCamera;
    if (this._currentSceneCamera) {
      if (this.activeCamera && this.activeCamera !== scene.activeCamera) {
        scene.setTransformMatrix(this._currentSceneCamera.getViewMatrix(), this._currentSceneCamera.getProjectionMatrix(true));
      }
      scene.getEngine().setViewport(this._currentSceneCamera.viewport);
    }
    scene.resetCachedMaterial();
  }
  /**
   * Renders all the objects (meshes, particles systems, sprites) to the currently bound render target texture.
   * @param passIndex defines the pass index to use (default: 0)
   * @param skipOnAfterRenderObservable defines a flag to skip raising the onAfterRenderObservable
   */
  render(passIndex = 0, skipOnAfterRenderObservable = false) {
    const scene = this._scene;
    const engine = scene.getEngine();
    const currentRenderPassId = engine.currentRenderPassId;
    engine.currentRenderPassId = this._renderPassIds[passIndex];
    this.onBeforeRenderObservable.notifyObservers(passIndex);
    const fastPath = engine.snapshotRendering && engine.snapshotRenderingMode === 1;
    if (!fastPath) {
      let currentRenderList = null;
      const defaultRenderList = this.renderList ? this.renderList : scene.getActiveMeshes().data;
      const defaultRenderListLength = this.renderList ? this.renderList.length : scene.getActiveMeshes().length;
      if (this.getCustomRenderList) {
        currentRenderList = this.getCustomRenderList(passIndex, defaultRenderList, defaultRenderListLength);
      }
      if (!currentRenderList) {
        if (!this._defaultRenderListPrepared) {
          this._prepareRenderingManager(defaultRenderList, defaultRenderListLength, !this.renderList || this.forceLayerMaskCheck);
          this._defaultRenderListPrepared = true;
        }
        currentRenderList = defaultRenderList;
      } else {
        this._prepareRenderingManager(currentRenderList, currentRenderList.length, this.forceLayerMaskCheck);
      }
      this.onBeforeRenderingManagerRenderObservable.notifyObservers(passIndex);
      this._renderingManager.render(this.customRenderFunction, currentRenderList, this.renderParticles, this.renderSprites);
      this.onAfterRenderingManagerRenderObservable.notifyObservers(passIndex);
    } else {
      this.onFastPathRenderObservable.notifyObservers(passIndex);
    }
    if (!skipOnAfterRenderObservable) {
      this.onAfterRenderObservable.notifyObservers(passIndex);
    }
    engine.currentRenderPassId = currentRenderPassId;
  }
  /** @internal */
  _checkReadiness() {
    const scene = this._scene;
    const engine = scene.getEngine();
    const currentRenderPassId = engine.currentRenderPassId;
    let returnValue = true;
    if (!scene.getViewMatrix()) {
      scene.updateTransformMatrix();
    }
    const numPasses = this.options.numPasses;
    for (let passIndex = 0; passIndex < numPasses && returnValue; passIndex++) {
      let currentRenderList = null;
      const defaultRenderList = this.renderList ? this.renderList : scene.getActiveMeshes().data;
      const defaultRenderListLength = this.renderList ? this.renderList.length : scene.getActiveMeshes().length;
      engine.currentRenderPassId = this._renderPassIds[passIndex];
      this.onBeforeRenderObservable.notifyObservers(passIndex);
      if (this.getCustomRenderList) {
        currentRenderList = this.getCustomRenderList(passIndex, defaultRenderList, defaultRenderListLength);
      }
      if (!currentRenderList) {
        currentRenderList = defaultRenderList;
      }
      if (!this.options.doNotChangeAspectRatio) {
        scene.updateTransformMatrix(true);
      }
      for (let i = 0; i < currentRenderList.length && returnValue; ++i) {
        const mesh = currentRenderList[i];
        if (!mesh.isEnabled() || mesh.isBlocked || !mesh.isVisible || !mesh.subMeshes) {
          continue;
        }
        if (this.customIsReadyFunction) {
          if (!this.customIsReadyFunction(mesh, this.refreshRate, true)) {
            returnValue = false;
            continue;
          }
        } else if (!mesh.isReady(true)) {
          returnValue = false;
          continue;
        }
      }
      this.onAfterRenderObservable.notifyObservers(passIndex);
      if (numPasses > 1) {
        scene.incrementRenderId();
        scene.resetCachedMaterial();
      }
    }
    const particleSystems = this.particleSystemList || scene.particleSystems;
    for (const particleSystem of particleSystems) {
      if (!particleSystem.isReady()) {
        returnValue = false;
      }
    }
    engine.currentRenderPassId = currentRenderPassId;
    return returnValue;
  }
  _prepareRenderingManager(currentRenderList, currentRenderListLength, checkLayerMask) {
    const scene = this._scene;
    const camera = scene.activeCamera;
    const cameraForLOD = this.cameraForLOD ?? camera;
    this._renderingManager.reset();
    const sceneRenderId = scene.getRenderId();
    const currentFrameId = scene.getFrameId();
    for (let meshIndex = 0; meshIndex < currentRenderListLength; meshIndex++) {
      const mesh = currentRenderList[meshIndex];
      if (mesh && !mesh.isBlocked) {
        if (this.customIsReadyFunction) {
          if (!this.customIsReadyFunction(mesh, this.refreshRate, false)) {
            this.resetRefreshCounter();
            continue;
          }
        } else if (!mesh.isReady(this.refreshRate === 0)) {
          this.resetRefreshCounter();
          continue;
        }
        let meshToRender = null;
        if (cameraForLOD) {
          const meshToRenderAndFrameId = mesh._internalAbstractMeshDataInfo._currentLOD.get(cameraForLOD);
          if (!meshToRenderAndFrameId || meshToRenderAndFrameId[1] !== currentFrameId) {
            meshToRender = scene.customLODSelector ? scene.customLODSelector(mesh, cameraForLOD) : mesh.getLOD(cameraForLOD);
            if (!meshToRenderAndFrameId) {
              mesh._internalAbstractMeshDataInfo._currentLOD.set(cameraForLOD, [meshToRender, currentFrameId]);
            } else {
              meshToRenderAndFrameId[0] = meshToRender;
              meshToRenderAndFrameId[1] = currentFrameId;
            }
          } else {
            meshToRender = meshToRenderAndFrameId[0];
          }
        } else {
          meshToRender = mesh;
        }
        if (!meshToRender) {
          continue;
        }
        if (meshToRender !== mesh && meshToRender.billboardMode !== 0) {
          meshToRender.computeWorldMatrix();
        }
        meshToRender._preActivateForIntermediateRendering(sceneRenderId);
        let isMasked;
        if (checkLayerMask && camera) {
          isMasked = (mesh.layerMask & camera.layerMask) === 0;
        } else {
          isMasked = false;
        }
        if (mesh.isEnabled() && mesh.isVisible && mesh.subMeshes && !isMasked) {
          if (meshToRender !== mesh) {
            meshToRender._activate(sceneRenderId, true);
          }
          if (mesh._activate(sceneRenderId, true) && mesh.subMeshes.length) {
            if (!mesh.isAnInstance) {
              meshToRender._internalAbstractMeshDataInfo._onlyForInstancesIntermediate = false;
            } else {
              if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {
                meshToRender = mesh;
              }
            }
            meshToRender._internalAbstractMeshDataInfo._isActiveIntermediate = true;
            scene._prepareSkeleton(meshToRender);
            for (let subIndex = 0; subIndex < meshToRender.subMeshes.length; subIndex++) {
              const subMesh = meshToRender.subMeshes[subIndex];
              this._renderingManager.dispatch(subMesh, meshToRender);
            }
          }
          mesh._postActivate();
        }
      }
    }
    const particleSystems = this.particleSystemList || scene.particleSystems;
    for (let particleIndex = 0; particleIndex < particleSystems.length; particleIndex++) {
      const particleSystem = particleSystems[particleIndex];
      const emitter = particleSystem.emitter;
      if (!particleSystem.isStarted() || !emitter || emitter.position && !emitter.isEnabled()) {
        continue;
      }
      this._renderingManager.dispatchParticles(particleSystem);
    }
  }
  /**
   * Overrides the default sort function applied in the rendering group to prepare the meshes.
   * This allowed control for front to back rendering or reversely depending of the special needs.
   *
   * @param renderingGroupId The rendering group id corresponding to its index
   * @param opaqueSortCompareFn The opaque queue comparison function use to sort.
   * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.
   * @param transparentSortCompareFn The transparent queue comparison function use to sort.
   */
  setRenderingOrder(renderingGroupId, opaqueSortCompareFn = null, alphaTestSortCompareFn = null, transparentSortCompareFn = null) {
    this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);
  }
  /**
   * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.
   *
   * @param renderingGroupId The rendering group id corresponding to its index
   * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.
   * @param depth Automatically clears depth between groups if true and autoClear is true.
   * @param stencil Automatically clears stencil between groups if true and autoClear is true.
   */
  setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth = true, stencil = true) {
    this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth, stencil);
    this._renderingManager._useSceneAutoClearSetup = false;
  }
  /**
   * Clones the renderer.
   * @returns the cloned renderer
   */
  clone() {
    const newRenderer = new _ObjectRenderer(this.name, this._scene, this.options);
    if (this.renderList) {
      newRenderer.renderList = this.renderList.slice(0);
    }
    return newRenderer;
  }
  /**
   * Dispose the renderer and release its associated resources.
   */
  dispose() {
    const renderList = this.renderList ? this.renderList : this._scene.getActiveMeshes().data;
    const renderListLength = this.renderList ? this.renderList.length : this._scene.getActiveMeshes().length;
    for (let i = 0; i < renderListLength; i++) {
      const mesh = renderList[i];
      if (mesh.getMaterialForRenderPass(this.renderPassId) !== void 0) {
        mesh.setMaterialForRenderPass(this.renderPassId, void 0);
      }
    }
    this.onBeforeRenderObservable.clear();
    this.onAfterRenderObservable.clear();
    this.onBeforeRenderingManagerRenderObservable.clear();
    this.onAfterRenderingManagerRenderObservable.clear();
    this.onFastPathRenderObservable.clear();
    this._releaseRenderPassId();
    this.renderList = null;
  }
  /** @internal */
  _rebuild() {
    if (this.refreshRate === _ObjectRenderer.REFRESHRATE_RENDER_ONCE) {
      this.refreshRate = _ObjectRenderer.REFRESHRATE_RENDER_ONCE;
    }
  }
  /**
   * Clear the info related to rendering groups preventing retention point in material dispose.
   */
  freeRenderingGroups() {
    if (this._renderingManager) {
      this._renderingManager.freeRenderingGroups();
    }
  }
};
ObjectRenderer.REFRESHRATE_RENDER_ONCE = 0;
ObjectRenderer.REFRESHRATE_RENDER_ONEVERYFRAME = 1;
ObjectRenderer.REFRESHRATE_RENDER_ONEVERYTWOFRAMES = 2;

// node_modules/@babylonjs/core/Materials/Textures/renderTargetTexture.js
Effect.prototype.setDepthStencilTexture = function(channel, texture) {
  this._engine.setDepthStencilTexture(this._samplers[channel], this._uniforms[channel], texture, channel);
};
var RenderTargetTexture = class _RenderTargetTexture extends Texture {
  /**
   * Use this predicate to dynamically define the list of mesh you want to render.
   * If set, the renderList property will be overwritten.
   */
  get renderListPredicate() {
    return this._objectRenderer.renderListPredicate;
  }
  set renderListPredicate(value) {
    this._objectRenderer.renderListPredicate = value;
  }
  /**
   * Use this list to define the list of mesh you want to render.
   */
  get renderList() {
    return this._objectRenderer.renderList;
  }
  set renderList(value) {
    this._objectRenderer.renderList = value;
  }
  /**
   * Define the list of particle systems to render in the texture. If not provided, will render all the particle systems of the scene.
   * Note that the particle systems are rendered only if renderParticles is set to true.
   */
  get particleSystemList() {
    return this._objectRenderer.particleSystemList;
  }
  set particleSystemList(value) {
    this._objectRenderer.particleSystemList = value;
  }
  /**
   * Use this function to overload the renderList array at rendering time.
   * Return null to render with the current renderList, else return the list of meshes to use for rendering.
   * For 2DArray RTT, layerOrFace is the index of the layer that is going to be rendered, else it is the faceIndex of
   * the cube (if the RTT is a cube, else layerOrFace=0).
   * The renderList passed to the function is the current render list (the one that will be used if the function returns null).
   * The length of this list is passed through renderListLength: don't use renderList.length directly because the array can
   * hold dummy elements!
   */
  get getCustomRenderList() {
    return this._objectRenderer.getCustomRenderList;
  }
  set getCustomRenderList(value) {
    this._objectRenderer.getCustomRenderList = value;
  }
  /**
   * Define if particles should be rendered in your texture (default: true).
   */
  get renderParticles() {
    return this._objectRenderer.renderParticles;
  }
  set renderParticles(value) {
    this._objectRenderer.renderParticles = value;
  }
  /**
   * Define if sprites should be rendered in your texture (default: false).
   */
  get renderSprites() {
    return this._objectRenderer.renderSprites;
  }
  set renderSprites(value) {
    this._objectRenderer.renderSprites = value;
  }
  /**
   * Force checking the layerMask property even if a custom list of meshes is provided (ie. if renderList is not undefined) (default: false).
   */
  get forceLayerMaskCheck() {
    return this._objectRenderer.forceLayerMaskCheck;
  }
  set forceLayerMaskCheck(value) {
    this._objectRenderer.forceLayerMaskCheck = value;
  }
  /**
   * Define the camera used to render the texture.
   */
  get activeCamera() {
    return this._objectRenderer.activeCamera;
  }
  set activeCamera(value) {
    this._objectRenderer.activeCamera = value;
  }
  /**
   * Define the camera used to calculate the LOD of the objects.
   * If not defined, activeCamera will be used. If not defined nor activeCamera, scene's active camera will be used.
   */
  get cameraForLOD() {
    return this._objectRenderer.cameraForLOD;
  }
  set cameraForLOD(value) {
    this._objectRenderer.cameraForLOD = value;
  }
  /**
   * If true, the renderer will render all objects without any image processing applied.
   * If false (default value), the renderer will use the current setting of the scene's image processing configuration.
   */
  get disableImageProcessing() {
    return this._objectRenderer.disableImageProcessing;
  }
  set disableImageProcessing(value) {
    this._objectRenderer.disableImageProcessing = value;
  }
  /**
   * Override the mesh isReady function with your own one.
   */
  get customIsReadyFunction() {
    return this._objectRenderer.customIsReadyFunction;
  }
  set customIsReadyFunction(value) {
    this._objectRenderer.customIsReadyFunction = value;
  }
  /**
   * Override the render function of the texture with your own one.
   */
  get customRenderFunction() {
    return this._objectRenderer.customRenderFunction;
  }
  set customRenderFunction(value) {
    this._objectRenderer.customRenderFunction = value;
  }
  /**
   * Post-processes for this render target
   */
  get postProcesses() {
    return this._postProcesses;
  }
  get _prePassEnabled() {
    return !!this._prePassRenderTarget && this._prePassRenderTarget.enabled;
  }
  /**
   * Set a after unbind callback in the texture.
   * This has been kept for backward compatibility and use of onAfterUnbindObservable is recommended.
   */
  set onAfterUnbind(callback) {
    if (this._onAfterUnbindObserver) {
      this.onAfterUnbindObservable.remove(this._onAfterUnbindObserver);
    }
    this._onAfterUnbindObserver = this.onAfterUnbindObservable.add(callback);
  }
  /**
   * An event triggered before rendering the texture
   */
  get onBeforeRenderObservable() {
    return this._objectRenderer.onBeforeRenderObservable;
  }
  /**
   * Set a before render callback in the texture.
   * This has been kept for backward compatibility and use of onBeforeRenderObservable is recommended.
   */
  set onBeforeRender(callback) {
    if (this._onBeforeRenderObserver) {
      this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);
    }
    this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);
  }
  /**
   * An event triggered after rendering the texture
   */
  get onAfterRenderObservable() {
    return this._objectRenderer.onAfterRenderObservable;
  }
  /**
   * Set a after render callback in the texture.
   * This has been kept for backward compatibility and use of onAfterRenderObservable is recommended.
   */
  set onAfterRender(callback) {
    if (this._onAfterRenderObserver) {
      this.onAfterRenderObservable.remove(this._onAfterRenderObserver);
    }
    this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);
  }
  /**
   * Set a clear callback in the texture.
   * This has been kept for backward compatibility and use of onClearObservable is recommended.
   */
  set onClear(callback) {
    if (this._onClearObserver) {
      this.onClearObservable.remove(this._onClearObserver);
    }
    this._onClearObserver = this.onClearObservable.add(callback);
  }
  /** @internal */
  get _waitingRenderList() {
    return this._objectRenderer._waitingRenderList;
  }
  /** @internal */
  set _waitingRenderList(value) {
    this._objectRenderer._waitingRenderList = value;
  }
  /**
   * Current render pass id of the render target texture. Note it can change over the rendering as there's a separate id for each face of a cube / each layer of an array layer!
   */
  get renderPassId() {
    return this._objectRenderer.renderPassId;
  }
  /**
   * Gets the render pass ids used by the render target texture. For a single render target the array length will be 1, for a cube texture it will be 6 and for
   * a 2D texture array it will return an array of ids the size of the 2D texture array
   */
  get renderPassIds() {
    return this._objectRenderer.renderPassIds;
  }
  /**
   * Gets the current value of the refreshId counter
   */
  get currentRefreshId() {
    return this._objectRenderer.currentRefreshId;
  }
  /**
   * Sets a specific material to be used to render a mesh/a list of meshes in this render target texture
   * @param mesh mesh or array of meshes
   * @param material material or array of materials to use for this render pass. If undefined is passed, no specific material will be used but the regular material instead (mesh.material). It's possible to provide an array of materials to use a different material for each rendering in the case of a cube texture (6 rendering) and a 2D texture array (as many rendering as the length of the array)
   */
  setMaterialForRendering(mesh, material) {
    this._objectRenderer.setMaterialForRendering(mesh, material);
  }
  /**
   * Define if the texture has multiple draw buffers or if false a single draw buffer.
   */
  get isMulti() {
    var _a;
    return ((_a = this._renderTarget) == null ? void 0 : _a.isMulti) ?? false;
  }
  /**
   * Gets render target creation options that were used.
   */
  get renderTargetOptions() {
    return this._renderTargetOptions;
  }
  /**
   * Gets the render target wrapper associated with this render target
   */
  get renderTarget() {
    return this._renderTarget;
  }
  _onRatioRescale() {
    if (this._sizeRatio) {
      this.resize(this._initialSizeParameter);
    }
  }
  /**
   * Gets or sets the size of the bounding box associated with the texture (when in cube mode)
   * When defined, the cubemap will switch to local mode
   * @see https://community.arm.com/graphics/b/blog/posts/reflections-based-on-local-cubemaps-in-unity
   * @example https://www.babylonjs-playground.com/#RNASML
   */
  set boundingBoxSize(value) {
    if (this._boundingBoxSize && this._boundingBoxSize.equals(value)) {
      return;
    }
    this._boundingBoxSize = value;
    const scene = this.getScene();
    if (scene) {
      scene.markAllMaterialsAsDirty(1);
    }
  }
  get boundingBoxSize() {
    return this._boundingBoxSize;
  }
  /**
   * In case the RTT has been created with a depth texture, get the associated
   * depth texture.
   * Otherwise, return null.
   */
  get depthStencilTexture() {
    var _a;
    return ((_a = this._renderTarget) == null ? void 0 : _a._depthStencilTexture) ?? null;
  }
  /** @internal */
  constructor(name, size, scene, generateMipMaps = false, doNotChangeAspectRatio = true, type = 0, isCube = false, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, generateDepthBuffer = true, generateStencilBuffer = false, isMulti = false, format = 5, delayAllocation = false, samples, creationFlags, noColorAttachment = false, useSRGBBuffer = false) {
    let colorAttachment = void 0;
    let gammaSpace = true;
    let existingObjectRenderer = void 0;
    if (typeof generateMipMaps === "object") {
      const options = generateMipMaps;
      generateMipMaps = !!options.generateMipMaps;
      doNotChangeAspectRatio = options.doNotChangeAspectRatio ?? true;
      type = options.type ?? 0;
      isCube = !!options.isCube;
      samplingMode = options.samplingMode ?? Texture.TRILINEAR_SAMPLINGMODE;
      generateDepthBuffer = options.generateDepthBuffer ?? true;
      generateStencilBuffer = !!options.generateStencilBuffer;
      isMulti = !!options.isMulti;
      format = options.format ?? 5;
      delayAllocation = !!options.delayAllocation;
      samples = options.samples;
      creationFlags = options.creationFlags;
      noColorAttachment = !!options.noColorAttachment;
      useSRGBBuffer = !!options.useSRGBBuffer;
      colorAttachment = options.colorAttachment;
      gammaSpace = options.gammaSpace ?? gammaSpace;
      existingObjectRenderer = options.existingObjectRenderer;
    }
    super(null, scene, !generateMipMaps, void 0, samplingMode, void 0, void 0, void 0, void 0, format);
    this.ignoreCameraViewport = false;
    this.onBeforeBindObservable = new Observable();
    this.onAfterUnbindObservable = new Observable();
    this.onClearObservable = new Observable();
    this.onResizeObservable = new Observable();
    this._cleared = false;
    this.skipInitialClear = false;
    this._samples = 1;
    this._canRescale = true;
    this._renderTarget = null;
    this._dontDisposeObjectRenderer = false;
    this.boundingBoxPosition = Vector3.Zero();
    this._disableEngineStages = false;
    this._dumpToolsLoading = false;
    scene = this.getScene();
    if (!scene) {
      return;
    }
    const engine = this.getScene().getEngine();
    this._gammaSpace = gammaSpace;
    this._coordinatesMode = Texture.PROJECTION_MODE;
    this.name = name;
    this.isRenderTarget = true;
    this._initialSizeParameter = size;
    this._dontDisposeObjectRenderer = !!existingObjectRenderer;
    this._processSizeParameter(size);
    this._objectRenderer = existingObjectRenderer ?? new ObjectRenderer(name, scene, {
      numPasses: isCube ? 6 : this.getRenderLayers() || 1,
      doNotChangeAspectRatio
    });
    this._onBeforeRenderingManagerRenderObserver = this._objectRenderer.onBeforeRenderingManagerRenderObservable.add(() => {
      if (!this._disableEngineStages) {
        for (const step of this._scene._beforeRenderTargetClearStage) {
          step.action(this, this._currentFaceIndex, this._currentLayer);
        }
      }
      if (this.onClearObservable.hasObservers()) {
        this.onClearObservable.notifyObservers(engine);
      } else if (!this.skipInitialClear) {
        engine.clear(this.clearColor || this._scene.clearColor, true, true, true);
      }
      if (!this._doNotChangeAspectRatio) {
        this._scene.updateTransformMatrix(true);
      }
      if (!this._disableEngineStages) {
        for (const step of this._scene._beforeRenderTargetDrawStage) {
          step.action(this, this._currentFaceIndex, this._currentLayer);
        }
      }
    });
    this._onAfterRenderingManagerRenderObserver = this._objectRenderer.onAfterRenderingManagerRenderObservable.add(() => {
      var _a;
      if (!this._disableEngineStages) {
        for (const step of this._scene._afterRenderTargetDrawStage) {
          step.action(this, this._currentFaceIndex, this._currentLayer);
        }
      }
      const saveGenerateMipMaps = ((_a = this._texture) == null ? void 0 : _a.generateMipMaps) ?? false;
      if (this._texture) {
        this._texture.generateMipMaps = false;
      }
      if (this._postProcessManager) {
        this._postProcessManager._finalizeFrame(false, this._renderTarget ?? void 0, this._currentFaceIndex, this._postProcesses, this.ignoreCameraViewport);
      } else if (this._currentUseCameraPostProcess) {
        this._scene.postProcessManager._finalizeFrame(false, this._renderTarget ?? void 0, this._currentFaceIndex);
      }
      if (!this._disableEngineStages) {
        for (const step of this._scene._afterRenderTargetPostProcessStage) {
          step.action(this, this._currentFaceIndex, this._currentLayer);
        }
      }
      if (this._texture) {
        this._texture.generateMipMaps = saveGenerateMipMaps;
      }
      if (!this._doNotChangeAspectRatio) {
        this._scene.updateTransformMatrix(true);
      }
      if (this._currentDumpForDebug) {
        if (!this._dumpTools) {
          Logger.Error("dumpTools module is still being loaded. To speed up the process import dump tools directly in your project");
        } else {
          this._dumpTools.DumpFramebuffer(this.getRenderWidth(), this.getRenderHeight(), engine);
        }
      }
    });
    this._onFastPathRenderObserver = this._objectRenderer.onFastPathRenderObservable.add(() => {
      if (this.onClearObservable.hasObservers()) {
        this.onClearObservable.notifyObservers(engine);
      } else {
        if (!this.skipInitialClear) {
          engine.clear(this.clearColor || this._scene.clearColor, true, true, true);
        }
      }
    });
    this._resizeObserver = engine.onResizeObservable.add(() => {
    });
    this._generateMipMaps = generateMipMaps ? true : false;
    this._doNotChangeAspectRatio = doNotChangeAspectRatio;
    if (isMulti) {
      return;
    }
    this._renderTargetOptions = {
      generateMipMaps,
      type,
      format: this._format ?? void 0,
      samplingMode: this.samplingMode,
      generateDepthBuffer,
      generateStencilBuffer,
      samples,
      creationFlags,
      noColorAttachment,
      useSRGBBuffer,
      colorAttachment,
      label: this.name
    };
    if (this.samplingMode === Texture.NEAREST_SAMPLINGMODE) {
      this.wrapU = Texture.CLAMP_ADDRESSMODE;
      this.wrapV = Texture.CLAMP_ADDRESSMODE;
    }
    if (!delayAllocation) {
      if (isCube) {
        this._renderTarget = scene.getEngine().createRenderTargetCubeTexture(this.getRenderSize(), this._renderTargetOptions);
        this.coordinatesMode = Texture.INVCUBIC_MODE;
        this._textureMatrix = Matrix.Identity();
      } else {
        this._renderTarget = scene.getEngine().createRenderTargetTexture(this._size, this._renderTargetOptions);
      }
      this._texture = this._renderTarget.texture;
      if (samples !== void 0) {
        this.samples = samples;
      }
    }
  }
  /**
   * Creates a depth stencil texture.
   * This is only available in WebGL 2 or with the depth texture extension available.
   * @param comparisonFunction Specifies the comparison function to set on the texture. If 0 or undefined, the texture is not in comparison mode (default: 0)
   * @param bilinearFiltering Specifies whether or not bilinear filtering is enable on the texture (default: true)
   * @param generateStencil Specifies whether or not a stencil should be allocated in the texture (default: false)
   * @param samples sample count of the depth/stencil texture (default: 1)
   * @param format format of the depth texture (default: 14)
   * @param label defines the label of the texture (for debugging purpose)
   */
  createDepthStencilTexture(comparisonFunction = 0, bilinearFiltering = true, generateStencil = false, samples = 1, format = 14, label) {
    var _a;
    (_a = this._renderTarget) == null ? void 0 : _a.createDepthStencilTexture(comparisonFunction, bilinearFiltering, generateStencil, samples, format, label);
  }
  _processSizeParameter(size) {
    if (size.ratio) {
      this._sizeRatio = size.ratio;
      const engine = this._getEngine();
      this._size = {
        width: this._bestReflectionRenderTargetDimension(engine.getRenderWidth(), this._sizeRatio),
        height: this._bestReflectionRenderTargetDimension(engine.getRenderHeight(), this._sizeRatio)
      };
    } else {
      this._size = size;
    }
  }
  /**
   * Define the number of samples to use in case of MSAA.
   * It defaults to one meaning no MSAA has been enabled.
   */
  get samples() {
    var _a;
    return ((_a = this._renderTarget) == null ? void 0 : _a.samples) ?? this._samples;
  }
  set samples(value) {
    if (this._renderTarget) {
      this._samples = this._renderTarget.setSamples(value);
    }
  }
  /**
   * Adds a post process to the render target rendering passes.
   * @param postProcess define the post process to add
   */
  addPostProcess(postProcess) {
    if (!this._postProcessManager) {
      const scene = this.getScene();
      if (!scene) {
        return;
      }
      this._postProcessManager = new PostProcessManager(scene);
      this._postProcesses = new Array();
    }
    this._postProcesses.push(postProcess);
    this._postProcesses[0].autoClear = false;
  }
  /**
   * Clear all the post processes attached to the render target
   * @param dispose define if the cleared post processes should also be disposed (false by default)
   */
  clearPostProcesses(dispose = false) {
    if (!this._postProcesses) {
      return;
    }
    if (dispose) {
      for (const postProcess of this._postProcesses) {
        postProcess.dispose();
      }
    }
    this._postProcesses = [];
  }
  /**
   * Remove one of the post process from the list of attached post processes to the texture
   * @param postProcess define the post process to remove from the list
   */
  removePostProcess(postProcess) {
    if (!this._postProcesses) {
      return;
    }
    const index = this._postProcesses.indexOf(postProcess);
    if (index === -1) {
      return;
    }
    this._postProcesses.splice(index, 1);
    if (this._postProcesses.length > 0) {
      this._postProcesses[0].autoClear = false;
    }
  }
  /**
   * Resets the refresh counter of the texture and start bak from scratch.
   * Could be useful to regenerate the texture if it is setup to render only once.
   */
  resetRefreshCounter() {
    this._objectRenderer.resetRefreshCounter();
  }
  /**
   * Define the refresh rate of the texture or the rendering frequency.
   * Use 0 to render just once, 1 to render on every frame, 2 to render every two frames and so on...
   */
  get refreshRate() {
    return this._objectRenderer.refreshRate;
  }
  set refreshRate(value) {
    this._objectRenderer.refreshRate = value;
  }
  /** @internal */
  _shouldRender() {
    return this._objectRenderer.shouldRender();
  }
  /**
   * Gets the actual render size of the texture.
   * @returns the width of the render size
   */
  getRenderSize() {
    return this.getRenderWidth();
  }
  /**
   * Gets the actual render width of the texture.
   * @returns the width of the render size
   */
  getRenderWidth() {
    if (this._size.width) {
      return this._size.width;
    }
    return this._size;
  }
  /**
   * Gets the actual render height of the texture.
   * @returns the height of the render size
   */
  getRenderHeight() {
    if (this._size.width) {
      return this._size.height;
    }
    return this._size;
  }
  /**
   * Gets the actual number of layers of the texture or, in the case of a 3D texture, return the depth.
   * @returns the number of layers
   */
  getRenderLayers() {
    const layers = this._size.layers;
    if (layers) {
      return layers;
    }
    const depth = this._size.depth;
    if (depth) {
      return depth;
    }
    return 0;
  }
  /**
   * Don't allow this render target texture to rescale. Mainly used to prevent rescaling by the scene optimizer.
   */
  disableRescaling() {
    this._canRescale = false;
  }
  /**
   * Get if the texture can be rescaled or not.
   */
  get canRescale() {
    return this._canRescale;
  }
  /**
   * Resize the texture using a ratio.
   * @param ratio the ratio to apply to the texture size in order to compute the new target size
   */
  scale(ratio) {
    const newSize = Math.max(1, this.getRenderSize() * ratio);
    this.resize(newSize);
  }
  /**
   * Get the texture reflection matrix used to rotate/transform the reflection.
   * @returns the reflection matrix
   */
  getReflectionTextureMatrix() {
    if (this.isCube) {
      return this._textureMatrix;
    }
    return super.getReflectionTextureMatrix();
  }
  /**
   * Resize the texture to a new desired size.
   * Be careful as it will recreate all the data in the new texture.
   * @param size Define the new size. It can be:
   *   - a number for squared texture,
   *   - an object containing { width: number, height: number }
   *   - or an object containing a ratio { ratio: number }
   */
  resize(size) {
    var _a;
    const wasCube = this.isCube;
    (_a = this._renderTarget) == null ? void 0 : _a.dispose();
    this._renderTarget = null;
    const scene = this.getScene();
    if (!scene) {
      return;
    }
    this._processSizeParameter(size);
    if (wasCube) {
      this._renderTarget = scene.getEngine().createRenderTargetCubeTexture(this.getRenderSize(), this._renderTargetOptions);
    } else {
      this._renderTarget = scene.getEngine().createRenderTargetTexture(this._size, this._renderTargetOptions);
    }
    this._texture = this._renderTarget.texture;
    if (this._renderTargetOptions.samples !== void 0) {
      this.samples = this._renderTargetOptions.samples;
    }
    if (this.onResizeObservable.hasObservers()) {
      this.onResizeObservable.notifyObservers(this);
    }
  }
  /**
   * Renders all the objects from the render list into the texture.
   * @param useCameraPostProcess Define if camera post processes should be used during the rendering
   * @param dumpForDebug Define if the rendering result should be dumped (copied) for debugging purpose
   */
  render(useCameraPostProcess = false, dumpForDebug = false) {
    this._render(useCameraPostProcess, dumpForDebug);
  }
  /**
   * This function will check if the render target texture can be rendered (textures are loaded, shaders are compiled)
   * @returns true if all required resources are ready
   */
  isReadyForRendering() {
    if (!this._dumpToolsLoading) {
      this._dumpToolsLoading = true;
      import("./dumpTools-VYRL434Y.js").then((module) => this._dumpTools = module);
    }
    this._objectRenderer.prepareRenderList();
    this.onBeforeBindObservable.notifyObservers(this);
    this._objectRenderer.initRender(this.getRenderWidth(), this.getRenderHeight());
    const isReady = this._objectRenderer._checkReadiness();
    this.onAfterUnbindObservable.notifyObservers(this);
    this._objectRenderer.finishRender();
    return isReady;
  }
  _render(useCameraPostProcess = false, dumpForDebug = false) {
    const scene = this.getScene();
    if (!scene) {
      return;
    }
    if (this.useCameraPostProcesses !== void 0) {
      useCameraPostProcess = this.useCameraPostProcesses;
    }
    this._objectRenderer.prepareRenderList();
    this.onBeforeBindObservable.notifyObservers(this);
    this._objectRenderer.initRender(this.getRenderWidth(), this.getRenderHeight());
    if ((this.is2DArray || this.is3D) && !this.isMulti) {
      for (let layer = 0; layer < this.getRenderLayers(); layer++) {
        this._renderToTarget(0, useCameraPostProcess, dumpForDebug, layer);
        scene.incrementRenderId();
        scene.resetCachedMaterial();
      }
    } else if (this.isCube && !this.isMulti) {
      for (let face = 0; face < 6; face++) {
        this._renderToTarget(face, useCameraPostProcess, dumpForDebug);
        scene.incrementRenderId();
        scene.resetCachedMaterial();
      }
    } else {
      this._renderToTarget(0, useCameraPostProcess, dumpForDebug);
    }
    this.onAfterUnbindObservable.notifyObservers(this);
    this._objectRenderer.finishRender();
  }
  _bestReflectionRenderTargetDimension(renderDimension, scale) {
    const minimum = 128;
    const x = renderDimension * scale;
    const curved = NearestPOT(x + minimum * minimum / (minimum + x));
    return Math.min(FloorPOT(renderDimension), curved);
  }
  /**
   * @internal
   * @param faceIndex face index to bind to if this is a cubetexture
   * @param layer defines the index of the texture to bind in the array
   */
  _bindFrameBuffer(faceIndex = 0, layer = 0) {
    const scene = this.getScene();
    if (!scene) {
      return;
    }
    const engine = scene.getEngine();
    if (this._renderTarget) {
      engine.bindFramebuffer(this._renderTarget, this.isCube ? faceIndex : void 0, void 0, void 0, this.ignoreCameraViewport, 0, layer);
    }
  }
  _unbindFrameBuffer(engine, faceIndex) {
    if (!this._renderTarget) {
      return;
    }
    engine.unBindFramebuffer(this._renderTarget, this.isCube, () => {
      this.onAfterRenderObservable.notifyObservers(faceIndex);
    });
  }
  /**
   * @internal
   */
  _prepareFrame(scene, faceIndex, layer, useCameraPostProcess) {
    if (this._postProcessManager) {
      if (!this._prePassEnabled) {
        this._postProcessManager._prepareFrame(this._texture, this._postProcesses);
      }
    } else if (!useCameraPostProcess || !scene.postProcessManager._prepareFrame(this._texture)) {
      this._bindFrameBuffer(faceIndex, layer);
    }
  }
  _renderToTarget(faceIndex, useCameraPostProcess, dumpForDebug, layer = 0) {
    var _a, _b;
    const scene = this.getScene();
    if (!scene) {
      return;
    }
    const engine = scene.getEngine();
    this._currentFaceIndex = faceIndex;
    this._currentLayer = layer;
    this._currentUseCameraPostProcess = useCameraPostProcess;
    this._currentDumpForDebug = dumpForDebug;
    this._prepareFrame(scene, faceIndex, layer, useCameraPostProcess);
    (_a = engine._debugPushGroup) == null ? void 0 : _a.call(engine, `render to face #${faceIndex} layer #${layer}`, 2);
    this._objectRenderer.render(faceIndex + layer, true);
    (_b = engine._debugPopGroup) == null ? void 0 : _b.call(engine, 2);
    this._unbindFrameBuffer(engine, faceIndex);
    if (this._texture && this.isCube && faceIndex === 5) {
      engine.generateMipMapsForCubemap(this._texture, true);
    }
  }
  /**
   * Overrides the default sort function applied in the rendering group to prepare the meshes.
   * This allowed control for front to back rendering or reversely depending of the special needs.
   *
   * @param renderingGroupId The rendering group id corresponding to its index
   * @param opaqueSortCompareFn The opaque queue comparison function use to sort.
   * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.
   * @param transparentSortCompareFn The transparent queue comparison function use to sort.
   */
  setRenderingOrder(renderingGroupId, opaqueSortCompareFn = null, alphaTestSortCompareFn = null, transparentSortCompareFn = null) {
    this._objectRenderer.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);
  }
  /**
   * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.
   *
   * @param renderingGroupId The rendering group id corresponding to its index
   * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.
   */
  setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil) {
    this._objectRenderer.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil);
  }
  /**
   * Clones the texture.
   * @returns the cloned texture
   */
  clone() {
    const textureSize = this.getSize();
    const newTexture = new _RenderTargetTexture(this.name, textureSize, this.getScene(), this._renderTargetOptions.generateMipMaps, this._doNotChangeAspectRatio, this._renderTargetOptions.type, this.isCube, this._renderTargetOptions.samplingMode, this._renderTargetOptions.generateDepthBuffer, this._renderTargetOptions.generateStencilBuffer, void 0, this._renderTargetOptions.format, void 0, this._renderTargetOptions.samples);
    newTexture.hasAlpha = this.hasAlpha;
    newTexture.level = this.level;
    newTexture.coordinatesMode = this.coordinatesMode;
    if (this.renderList) {
      newTexture.renderList = this.renderList.slice(0);
    }
    return newTexture;
  }
  /**
   * Serialize the texture to a JSON representation we can easily use in the respective Parse function.
   * @returns The JSON representation of the texture
   */
  serialize() {
    if (!this.name) {
      return null;
    }
    const serializationObject = super.serialize();
    serializationObject.renderTargetSize = this.getRenderSize();
    serializationObject.renderList = [];
    if (this.renderList) {
      for (let index = 0; index < this.renderList.length; index++) {
        serializationObject.renderList.push(this.renderList[index].id);
      }
    }
    return serializationObject;
  }
  /**
   *  This will remove the attached framebuffer objects. The texture will not be able to be used as render target anymore
   */
  disposeFramebufferObjects() {
    var _a;
    (_a = this._renderTarget) == null ? void 0 : _a.dispose(true);
  }
  /**
   * Release and destroy the underlying lower level texture aka internalTexture.
   */
  releaseInternalTexture() {
    var _a;
    (_a = this._renderTarget) == null ? void 0 : _a.releaseTextures();
    this._texture = null;
  }
  /**
   * Dispose the texture and release its associated resources.
   */
  dispose() {
    var _a;
    this.onResizeObservable.clear();
    this.onClearObservable.clear();
    this.onAfterUnbindObservable.clear();
    this.onBeforeBindObservable.clear();
    if (this._postProcessManager) {
      this._postProcessManager.dispose();
      this._postProcessManager = null;
    }
    if (this._prePassRenderTarget) {
      this._prePassRenderTarget.dispose();
    }
    this._objectRenderer.onBeforeRenderingManagerRenderObservable.remove(this._onBeforeRenderingManagerRenderObserver);
    this._objectRenderer.onAfterRenderingManagerRenderObservable.remove(this._onAfterRenderingManagerRenderObserver);
    this._objectRenderer.onFastPathRenderObservable.remove(this._onFastPathRenderObserver);
    if (!this._dontDisposeObjectRenderer) {
      this._objectRenderer.dispose();
    }
    this.clearPostProcesses(true);
    if (this._resizeObserver) {
      this.getScene().getEngine().onResizeObservable.remove(this._resizeObserver);
      this._resizeObserver = null;
    }
    const scene = this.getScene();
    if (!scene) {
      return;
    }
    let index = scene.customRenderTargets.indexOf(this);
    if (index >= 0) {
      scene.customRenderTargets.splice(index, 1);
    }
    for (const camera of scene.cameras) {
      index = camera.customRenderTargets.indexOf(this);
      if (index >= 0) {
        camera.customRenderTargets.splice(index, 1);
      }
    }
    (_a = this._renderTarget) == null ? void 0 : _a.dispose();
    this._renderTarget = null;
    this._texture = null;
    super.dispose();
  }
  /** @internal */
  _rebuild() {
    this._objectRenderer._rebuild();
    if (this._postProcessManager) {
      this._postProcessManager._rebuild();
    }
  }
  /**
   * Clear the info related to rendering groups preventing retention point in material dispose.
   */
  freeRenderingGroups() {
    this._objectRenderer.freeRenderingGroups();
  }
  /**
   * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)
   * @returns the view count
   */
  getViewCount() {
    return 1;
  }
};
RenderTargetTexture.REFRESHRATE_RENDER_ONCE = ObjectRenderer.REFRESHRATE_RENDER_ONCE;
RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYFRAME = ObjectRenderer.REFRESHRATE_RENDER_ONEVERYFRAME;
RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYTWOFRAMES = ObjectRenderer.REFRESHRATE_RENDER_ONEVERYTWOFRAMES;
Texture._CreateRenderTargetTexture = (name, renderTargetSize, scene, generateMipMaps, creationFlags) => {
  return new RenderTargetTexture(name, renderTargetSize, scene, generateMipMaps);
};

export {
  ObjectRenderer,
  RenderTargetTexture
};
//# sourceMappingURL=chunk-OVFDH7PH.js.map
