{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphSceneReadyEventBlock.ts"],
  "sourcesContent": ["import { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\nimport { FlowGraphEventType } from \"core/FlowGraph/flowGraphEventType\";\r\n/**\r\n * Block that triggers when a scene is ready.\r\n */\r\nexport class FlowGraphSceneReadyEventBlock extends FlowGraphEventBlock {\r\n    public override initPriority: number = -1;\r\n\r\n    public override readonly type: FlowGraphEventType = FlowGraphEventType.SceneReady;\r\n\r\n    public override _executeEvent(context: FlowGraphContext, _payload: any): boolean {\r\n        this._execute(context);\r\n        return true;\r\n    }\r\n    public override _preparePendingTasks(context: FlowGraphContext): void {\r\n        // no-op\r\n    }\r\n    public override _cancelPendingTasks(context: FlowGraphContext): void {\r\n        // no-op\r\n    }\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName() {\r\n        return FlowGraphBlockNames.SceneReadyEvent;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.SceneReadyEvent, FlowGraphSceneReadyEventBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;AAAA,IAQa;AARb;;;AAEA;AAMM,IAAO,gCAAP,cAA6C,oBAAmB;MAAtE,cAAA;;AACoB,aAAA,eAAuB;AAEd,aAAA,OAAI;MAkBjC;MAhBoB,cAAc,SAA2B,UAAa;AAClE,aAAK,SAAS,OAAO;AACrB,eAAO;MACX;MACgB,qBAAqB,SAAyB;MAE9D;MACgB,oBAAoB,SAAyB;MAE7D;;;;MAIgB,eAAY;AACxB,eAAA;MACJ;;AAEJ,kBAAa,iCAAsC,6BAA6B;;;",
  "names": []
}
